/*
 * File:    NumberStringUtilityTest.java
 * Package: commons.math
 * Author:  Zachary Gill
 * Repo:    https://github.com/ZGorlock/Java-Commons
 */

package commons.math;

import java.io.File;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import commons.access.Filesystem;
import commons.access.Project;
import commons.test.TestAccess;
import commons.test.TestUtils;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * JUnit test of NumberStringUtility.
 *
 * @see NumberStringUtility
 */
@SuppressWarnings({"RedundantSuppression", "ConstantConditions", "ResultOfMethodCallIgnored", "unchecked", "SpellCheckingInspection"})
@RunWith(PowerMockRunner.class)
@PrepareForTest({NumberStringUtility.class})
public class NumberStringUtilityTest {
    
    //Logger
    
    /**
     * The logger.
     */
    private static final Logger logger = LoggerFactory.getLogger(NumberStringUtilityTest.class);
    
    
    //Constants
    
    /**
     * The directory containing resources for this test class.
     */
    private static final File testResources = Project.testResourcesDir(NumberStringUtility.class);
    
    
    //Initialization
    
    /**
     * The JUnit class setup operations.
     *
     * @throws Exception When there is an exception.
     */
    @SuppressWarnings("EmptyMethod")
    @BeforeClass
    public static void setupClass() throws Exception {
    }
    
    /**
     * The JUnit class cleanup operations.
     *
     * @throws Exception When there is an exception.
     */
    @SuppressWarnings("EmptyMethod")
    @AfterClass
    public static void cleanupClass() throws Exception {
    }
    
    /**
     * The JUnit setup operations.
     *
     * @throws Exception When there is an exception.
     */
    @SuppressWarnings("EmptyMethod")
    @Before
    public void setup() throws Exception {
    }
    
    /**
     * The JUnit cleanup operations.
     *
     * @throws Exception When there is an exception.
     */
    @SuppressWarnings("EmptyMethod")
    @After
    public void cleanup() throws Exception {
    }
    
    
    //Tests
    
    /**
     * JUnit test of constants.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#NUMBER_NAMES
     * @see NumberStringUtility#VALID_TOKENS
     * @see NumberStringUtility#VALID_LATIN_POWER_NAME_TOKENS
     * @see NumberStringUtility#NUMBER_PATTERN
     * @see NumberStringUtility#EXPONENTIAL_NOTATION_PATTERN
     * @see NumberStringUtility#INTEGER_PATTERN
     * @see NumberStringUtility#INTEGER_STRING_PATTERN
     * @see NumberStringUtility#ZERO_PATTERN
     * @see NumberStringUtility#ZERO_STRING_PATTERN
     * @see NumberStringUtility#ENDING_ZEROS_PATTERN
     * @see NumberStringUtility#ENDING_FRACTIONAL_SUFFIX_PATTERN
     * @see NumberStringUtility#NUMBER_PHRASE_PATTERN
     * @see NumberStringUtility#LATIN_POWER_NAME_PATTERN
     */
    @Test
    public void testConstants() throws Exception {
        //constants
        TestUtils.assertArrayEquals(
                Arrays.stream(TestAccess.getFieldValue(NumberStringUtility.class, String[][].class, "NUMBER_NAMES"))
                        .map(e -> String.join("|", e)).toArray(),
                new String[] {"zero|one|two|three|four|five|six|seven|eight|nine",
                              "|ten|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety",
                              "|hundred",
                              "ten|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen",
                              "|thousand|mi|bi|tri|quadri|quinti|sexti|septi|octi|noni",
                              "|un|duo|tre|quattuor|quin|sex|septen|octo|novem",
                              "|dec|vigin|trigin|quadragin|quinquagin|sexagin|septuagin|octogin|nonagin",
                              "|cen|duocen|trecen|quadringen|quingen|sescen|septingen|octingen|nongen",
                              "|millia",
                              "llion|illion|tillion",
                              "th|st|nd|rd",
                              "zero|fir|seco|thi|four|fif|six|seven|eigh|nin",
                              "negative|point|and|oh|o|times X to the|s"});
        TestUtils.assertListEquals(
                TestAccess.getFieldValue(NumberStringUtility.class, List.class, "VALID_TOKENS"),
                new String[] {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
                              "ten", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety",
                              "hundred",
                              "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen",
                              "thousand", "mi", "bi", "tri", "quadri", "quinti", "sexti", "septi", "octi", "noni",
                              "un", "duo", "tre", "quattuor", "quin", "sex", "septen", "octo", "novem",
                              "dec", "vigin", "trigin", "quadragin", "quinquagin", "sexagin", "septuagin", "octogin", "nonagin",
                              "cen", "duocen", "trecen", "quadringen", "quingen", "sescen", "septingen", "octingen", "nongen",
                              "millia",
                              "llion", "illion", "tillion",
                              "th", "st", "nd", "rd",
                              "fir", "seco", "thi", "fif", "eigh", "nin",
                              "negative", "point", "and", "oh", "o", "times ten to the", "s"});
        TestUtils.assertListEquals(
                TestAccess.getFieldValue(NumberStringUtility.class, List.class, "VALID_LATIN_POWER_NAME_TOKENS"),
                new String[] {"quinquagin", "quadringen", "quadragin", "septuagin", "septingen", "thousand", "quattuor", "octingen",
                              "sexagin", "octogin", "nonagin", "quingen", "quadri", "quinti", "septen", "trigin", "duocen", "trecen",
                              "sescen", "nongen", "millia", "sexti", "septi", "novem", "vigin", "octi", "noni", "quin", "octo", "tri",
                              "duo", "tre", "sex", "dec", "cen", "mi", "bi", "un", "tillion", "illion", "llion"});
        
        //patterns
        Assert.assertEquals("[+\\-]?(?:(?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))", NumberStringUtility.NUMBER_PATTERN.pattern());
        Assert.assertEquals("(?<integral>[+\\-]?\\d*)(?:\\.(?<fractional>\\d+))?[Ee](?<exponent>[+\\-]?\\d+)", NumberStringUtility.EXPONENTIAL_NOTATION_PATTERN.pattern());
        Assert.assertEquals("[+\\-]?\\d+", NumberStringUtility.INTEGER_PATTERN.pattern());
        Assert.assertEquals("^\\d+$", NumberStringUtility.INTEGER_STRING_PATTERN.pattern());
        Assert.assertEquals("[+\\-]?(?:(?:0+(?:\\.0+)?)|(?:\\.0+))", NumberStringUtility.ZERO_PATTERN.pattern());
        Assert.assertEquals("^0+$", NumberStringUtility.ZERO_STRING_PATTERN.pattern());
        Assert.assertEquals(".*?(?<zeros>0+)$", NumberStringUtility.ENDING_ZEROS_PATTERN.pattern());
        Assert.assertEquals("(?:th|st|nd|rd)?$", NumberStringUtility.ENDING_FRACTIONAL_SUFFIX_PATTERN.pattern());
        Assert.assertEquals("^(?:(?:zero|one|two|three|four|five|six|seven|eight|nine|ten|twenty|thirty|forty|fifty|sixty|seventy|eighty|ninety|hundred|eleven|twelve|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|thousand|mi|bi|tri|quadri|quinti|sexti|septi|octi|noni|un|duo|tre|quattuor|quin|sex|septen|octo|novem|dec|vigin|trigin|quadragin|quinquagin|sexagin|septuagin|octogin|nonagin|cen|duocen|trecen|quadringen|quingen|sescen|septingen|octingen|nongen|millia|llion|illion|tillion|th|st|nd|rd|fir|seco|thi|fif|eigh|nin|negative|point|and|oh|o|times ten to the|s|(?:[+\\-]?(?:(?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+)))|(?:(?:[+\\-]?\\d*)(?:\\.(?:\\d+))?[Ee](?:[+\\-]?\\d+)))[\\s\\-]?)+$", NumberStringUtility.NUMBER_PHRASE_PATTERN.pattern());
        Assert.assertEquals("^(?:thousand|mi|bi|tri|quadri|quinti|sexti|septi|octi|noni|un|duo|tre|quattuor|quin|sex|septen|octo|novem|dec|vigin|trigin|quadragin|quinquagin|sexagin|septuagin|octogin|nonagin|cen|duocen|trecen|quadringen|quingen|sescen|septingen|octingen|nongen|millia|llion|illion|tillion)+$", NumberStringUtility.LATIN_POWER_NAME_PATTERN.pattern());
    }
    
    /**
     * JUnit test of NumberNameSet.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility.NumberNameSet
     */
    @Test
    public void testNumberNameSet() throws Exception {
        Class<?> numberNameSet = TestAccess.getEnum(NumberStringUtility.class, "NumberNameSet");
        Object[] enumValues = numberNameSet.getEnumConstants();
        Assert.assertEquals(13, enumValues.length);
        Assert.assertEquals("DIGITS", enumValues[0].toString());
        Assert.assertEquals("TENS", enumValues[1].toString());
        Assert.assertEquals("HUNDREDS", enumValues[2].toString());
        Assert.assertEquals("TEENS", enumValues[3].toString());
        Assert.assertEquals("LATIN_SPECIAL", enumValues[4].toString());
        Assert.assertEquals("LATIN_ONES_PREFIXES", enumValues[5].toString());
        Assert.assertEquals("LATIN_TENS_PREFIXES", enumValues[6].toString());
        Assert.assertEquals("LATIN_HUNDREDS_PREFIXES", enumValues[7].toString());
        Assert.assertEquals("LATIN_THOUSANDS_SEPARATORS", enumValues[8].toString());
        Assert.assertEquals("SUFFIXES", enumValues[9].toString());
        Assert.assertEquals("FRACTIONAL", enumValues[10].toString());
        Assert.assertEquals("RECIPROCAL", enumValues[11].toString());
        Assert.assertEquals("MODIFIERS", enumValues[12].toString());
    }
    
    /**
     * JUnit test of NumberNameSuffix.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility.NumberNameSuffix
     */
    @Test
    public void testNumberNameSuffix() throws Exception {
        Class<?> numberNameSuffix = TestAccess.getEnum(NumberStringUtility.class, "NumberNameSuffix");
        Object[] enumValues = numberNameSuffix.getEnumConstants();
        Assert.assertEquals(3, enumValues.length);
        Assert.assertEquals("SPECIAL", enumValues[0].toString());
        Assert.assertEquals("SMALL", enumValues[1].toString());
        Assert.assertEquals("STANDARD", enumValues[2].toString());
    }
    
    /**
     * JUnit test of NumberNameModifier.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility.NumberNameModifier
     */
    @Test
    public void testNumberNameModifier() throws Exception {
        Class<?> numberNameModifier = TestAccess.getEnum(NumberStringUtility.class, "NumberNameModifier");
        Object[] enumValues = numberNameModifier.getEnumConstants();
        Assert.assertEquals(7, enumValues.length);
        Assert.assertEquals("NEGATIVE", enumValues[0].toString());
        Assert.assertEquals("POINT", enumValues[1].toString());
        Assert.assertEquals("AND", enumValues[2].toString());
        Assert.assertEquals("OH_HUNDRED", enumValues[3].toString());
        Assert.assertEquals("O_HUNDRED", enumValues[4].toString());
        Assert.assertEquals("EXPONENTIATED", enumValues[5].toString());
        Assert.assertEquals("PLURAL", enumValues[6].toString());
    }
    
    /**
     * JUnit test of FractionMode.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility.FractionMode
     */
    @Test
    public void testFractionMode() throws Exception {
        Assert.assertEquals(3, NumberStringUtility.FractionMode.values().length);
        Assert.assertEquals("DEFAULT", NumberStringUtility.FractionMode.values()[0].toString());
        Assert.assertEquals("SIMPLE", NumberStringUtility.FractionMode.values()[1].toString());
        Assert.assertEquals("FANCY", NumberStringUtility.FractionMode.values()[2].toString());
    }
    
    /**
     * JUnit test of stringValueOf.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#stringValueOf(Number, boolean)
     * @see NumberStringUtility#stringValueOf(Number)
     */
    @Test
    public void testStringValueOf() throws Exception {
        //simple cases
        Assert.assertEquals("0", NumberStringUtility.stringValueOf(0));
        Assert.assertEquals("1", NumberStringUtility.stringValueOf(1));
        Assert.assertEquals("984", NumberStringUtility.stringValueOf(984));
        Assert.assertEquals("456781", NumberStringUtility.stringValueOf(456781));
        Assert.assertEquals("456781000", NumberStringUtility.stringValueOf(456781000));
        Assert.assertEquals("56428452456781", NumberStringUtility.stringValueOf(56428452456781L));
        
        //exponential notation
        Assert.assertEquals("1156400000000",
                NumberStringUtility.stringValueOf(1.1564e12));
        Assert.assertEquals("8.45612897541E+56",
                NumberStringUtility.stringValueOf(8.45612897541e56));
        Assert.assertEquals("4.6E+105",
                NumberStringUtility.stringValueOf(4.6e105));
        Assert.assertEquals("1156400000000",
                NumberStringUtility.stringValueOf(new BigDecimal("1156400000000")));
        Assert.assertEquals("8.45612897541E+56",
                NumberStringUtility.stringValueOf(new BigDecimal("845612897541000000000000000000000000000000000000000000000")));
        Assert.assertEquals("4.6E+105",
                NumberStringUtility.stringValueOf(new BigDecimal("4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        
        //negative numbers
        Assert.assertEquals("0", NumberStringUtility.stringValueOf(-0));
        Assert.assertEquals("-1", NumberStringUtility.stringValueOf(-1));
        Assert.assertEquals("-984", NumberStringUtility.stringValueOf(-984));
        Assert.assertEquals("-456781", NumberStringUtility.stringValueOf(-456781));
        Assert.assertEquals("-456781000", NumberStringUtility.stringValueOf(-456781000));
        Assert.assertEquals("-56428452456781", NumberStringUtility.stringValueOf(-56428452456781L));
        
        //negative numbers, exponential notation
        Assert.assertEquals("-1156400000000",
                NumberStringUtility.stringValueOf(-1.1564e12));
        Assert.assertEquals("-8.45612897541E+56",
                NumberStringUtility.stringValueOf(-8.45612897541e56));
        Assert.assertEquals("-4.6E+105",
                NumberStringUtility.stringValueOf(-4.6e105));
        Assert.assertEquals("-1156400000000",
                NumberStringUtility.stringValueOf(new BigDecimal("-1156400000000")));
        Assert.assertEquals("-8.45612897541E+56",
                NumberStringUtility.stringValueOf(new BigDecimal("-845612897541000000000000000000000000000000000000000000000")));
        Assert.assertEquals("-4.6E+105",
                NumberStringUtility.stringValueOf(new BigDecimal("-4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        
        //decimals
        Assert.assertEquals("0.1", NumberStringUtility.stringValueOf(.1));
        Assert.assertEquals("0.056481", NumberStringUtility.stringValueOf(.056481));
        Assert.assertEquals("0.0875210023469445", NumberStringUtility.stringValueOf(.0875210023469445));
        Assert.assertEquals("1E-22", NumberStringUtility.stringValueOf(.0000000000000000000001));
        Assert.assertEquals("18.3", NumberStringUtility.stringValueOf(new BigDecimal("18.300")));
        
        //decimals, exponential notation
        Assert.assertEquals("0.0000456541",
                NumberStringUtility.stringValueOf(4.56541e-5));
        Assert.assertEquals("8.156420069E-16",
                NumberStringUtility.stringValueOf(8.156420069e-16));
        Assert.assertEquals("1E-22",
                NumberStringUtility.stringValueOf(1.0e-22));
        Assert.assertEquals("1.84565770156E-151",
                NumberStringUtility.stringValueOf(1.84565770156e-151));
        Assert.assertEquals("0.0000456541",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000456541")));
        Assert.assertEquals("8.156420069E-16",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000008156420069")));
        Assert.assertEquals("1E-22",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000000000001")));
        Assert.assertEquals("1.84565770156E-151",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184565770156")));
        
        //negative numbers, decimals
        Assert.assertEquals("-0.1", NumberStringUtility.stringValueOf(-.1));
        Assert.assertEquals("-0.056481", NumberStringUtility.stringValueOf(-.056481));
        Assert.assertEquals("-0.0875210023469445", NumberStringUtility.stringValueOf(-.0875210023469445));
        Assert.assertEquals("-1E-22", NumberStringUtility.stringValueOf(-.0000000000000000000001));
        Assert.assertEquals("-18.3", NumberStringUtility.stringValueOf(new BigDecimal("-18.300")));
        
        //negative numbers, decimals, exponential notation
        Assert.assertEquals("-0.0000456541",
                NumberStringUtility.stringValueOf(-4.56541e-5));
        Assert.assertEquals("-8.156420069E-16",
                NumberStringUtility.stringValueOf(-8.156420069e-16));
        Assert.assertEquals("-1E-22",
                NumberStringUtility.stringValueOf(-1.0e-22));
        Assert.assertEquals("-1.84565770156E-151",
                NumberStringUtility.stringValueOf(-1.84565770156e-151));
        Assert.assertEquals("-0.0000456541",
                NumberStringUtility.stringValueOf(new BigDecimal("-0.0000456541")));
        Assert.assertEquals("-8.156420069E-16",
                NumberStringUtility.stringValueOf(new BigDecimal("-0.0000000000000008156420069")));
        Assert.assertEquals("-1E-22",
                NumberStringUtility.stringValueOf(new BigDecimal("-0.0000000000000000000001")));
        Assert.assertEquals("-1.84565770156E-151",
                NumberStringUtility.stringValueOf(new BigDecimal("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184565770156")));
        
        //mixed numbers
        Assert.assertEquals("0.16542", NumberStringUtility.stringValueOf(0.16542));
        Assert.assertEquals("1.18744", NumberStringUtility.stringValueOf(1.18744));
        Assert.assertEquals("984.8975", NumberStringUtility.stringValueOf(984.8975));
        Assert.assertEquals("456781.4987", NumberStringUtility.stringValueOf(456781.4987));
        Assert.assertEquals("56428481.6874977", NumberStringUtility.stringValueOf(56428481.6874977));
        Assert.assertEquals("48940612.8460105", NumberStringUtility.stringValueOf(new BigDecimal("48940612.8460105000")));
        
        //mixed numbers, exponential notation
        Assert.assertEquals("11564.654798",
                NumberStringUtility.stringValueOf(1.1564654798e4));
        Assert.assertEquals("845.612897",
                NumberStringUtility.stringValueOf(8.45612897e2));
        Assert.assertEquals("4665874.210054",
                NumberStringUtility.stringValueOf(4.665874210054e6));
        Assert.assertEquals("11564.654798",
                NumberStringUtility.stringValueOf(new BigDecimal("1.1564654798e4")));
        Assert.assertEquals("845.612897",
                NumberStringUtility.stringValueOf(new BigDecimal("8.45612897e2")));
        Assert.assertEquals("4665874.210054",
                NumberStringUtility.stringValueOf(new BigDecimal("4.665874210054e6")));
        
        //mixed numbers, negative numbers
        Assert.assertEquals("-0.16542", NumberStringUtility.stringValueOf(-0.16542));
        Assert.assertEquals("-1.18744", NumberStringUtility.stringValueOf(-1.18744));
        Assert.assertEquals("-984.8975", NumberStringUtility.stringValueOf(-984.8975));
        Assert.assertEquals("-456781.4987", NumberStringUtility.stringValueOf(-456781.4987));
        Assert.assertEquals("-56428481.6874977", NumberStringUtility.stringValueOf(-56428481.6874977));
        Assert.assertEquals("-48940612.8460105", NumberStringUtility.stringValueOf(new BigDecimal("-48940612.8460105000")));
        
        //mixed numbers, negative numbers, exponential notation
        Assert.assertEquals("-11564.654798",
                NumberStringUtility.stringValueOf(-1.1564654798e4));
        Assert.assertEquals("-845.612897",
                NumberStringUtility.stringValueOf(-8.45612897e2));
        Assert.assertEquals("-4665874.210054",
                NumberStringUtility.stringValueOf(-4.665874210054e6));
        Assert.assertEquals("-11564.654798",
                NumberStringUtility.stringValueOf(new BigDecimal("-1.1564654798e4")));
        Assert.assertEquals("-845.612897",
                NumberStringUtility.stringValueOf(new BigDecimal("-8.45612897e2")));
        Assert.assertEquals("-4665874.210054",
                NumberStringUtility.stringValueOf(new BigDecimal("-4.665874210054e6")));
        
        //big decimal cases
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829",
                NumberStringUtility.stringValueOf(new BigDecimal("5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("-5967945689794436877198887828689582168366902795322725858829",
                NumberStringUtility.stringValueOf(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        
        //extremely large cases
        Assert.assertEquals("1E+845612345",
                NumberStringUtility.stringValueOf(new BigDecimal("1E845612345")));
        Assert.assertEquals("1E-845612345",
                NumberStringUtility.stringValueOf(new BigDecimal("1E-845612345")));
        Assert.assertEquals("8.45132198830763E+400654231",
                NumberStringUtility.stringValueOf(new BigDecimal("8.45132198830763E400654231")));
        Assert.assertEquals("8.45132198830763E-400654231",
                NumberStringUtility.stringValueOf(new BigDecimal("8.45132198830763E-400654231")));
        Assert.assertEquals("-1E+845612345",
                NumberStringUtility.stringValueOf(new BigDecimal("-1E845612345")));
        Assert.assertEquals("-1E-845612345",
                NumberStringUtility.stringValueOf(new BigDecimal("-1E-845612345")));
        Assert.assertEquals("-8.45132198830763E+400654231",
                NumberStringUtility.stringValueOf(new BigDecimal("-8.45132198830763E400654231")));
        Assert.assertEquals("-8.45132198830763E-400654231",
                NumberStringUtility.stringValueOf(new BigDecimal("-8.45132198830763E-400654231")));
        
        //precision
        Assert.assertEquals("1000000000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("1000000000000000")));
        Assert.assertEquals("1000000000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("1E15")));
        Assert.assertEquals("1E+16",
                NumberStringUtility.stringValueOf(new BigDecimal("10000000000000000")));
        Assert.assertEquals("1E+16",
                NumberStringUtility.stringValueOf(new BigDecimal("1E16")));
        Assert.assertEquals("10000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("10000000000000001")));
        Assert.assertEquals("5.5E+19",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5E19")));
        Assert.assertEquals("5.5E+19",
                NumberStringUtility.stringValueOf(new BigDecimal("55000000000000000000")));
        Assert.assertEquals("5.586322916E+19",
                NumberStringUtility.stringValueOf(new BigDecimal("5.586322916E19")));
        Assert.assertEquals("5.586322916E+19",
                NumberStringUtility.stringValueOf(new BigDecimal("55863229160000000000")));
        Assert.assertEquals("55863229161000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5863229161E19")));
        Assert.assertEquals("55863229161000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("55863229161000000000")));
        Assert.assertEquals("50000000001000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("5.0000000001E19")));
        Assert.assertEquals("50000000001000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("50000000001000000000")));
        Assert.assertEquals("0.000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000001")));
        Assert.assertEquals("0.000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("1E-15")));
        Assert.assertEquals("1E-16",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000001")));
        Assert.assertEquals("1E-16",
                NumberStringUtility.stringValueOf(new BigDecimal("1E-16")));
        Assert.assertEquals("1.0000000000000001",
                NumberStringUtility.stringValueOf(new BigDecimal("1.0000000000000001")));
        Assert.assertEquals("5.5E-15",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000055")));
        Assert.assertEquals("5.5E-15",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5E-15")));
        Assert.assertEquals("5.586322916E-11",
                NumberStringUtility.stringValueOf(new BigDecimal("0.00000000005586322916")));
        Assert.assertEquals("5.586322916E-11",
                NumberStringUtility.stringValueOf(new BigDecimal("5.586322916E-11")));
        Assert.assertEquals("0.00000000055863229161",
                NumberStringUtility.stringValueOf(new BigDecimal("0.00000000055863229161")));
        Assert.assertEquals("0.00000000055863229161",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5863229161E-10")));
        Assert.assertEquals("6E+64",
                NumberStringUtility.stringValueOf(new BigDecimal("60000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals("6E+64",
                NumberStringUtility.stringValueOf(new BigDecimal("6E64")));
        Assert.assertEquals("6.0000000000000000000000000000000000000000000000000000002E+64",
                NumberStringUtility.stringValueOf(new BigDecimal("60000000000000000000000000000000000000000000000000000002000000000")));
        Assert.assertEquals("6.0000000000000000000000000000000000000000000000000000002E+64",
                NumberStringUtility.stringValueOf(new BigDecimal("6.0000000000000000000000000000000000000000000000000000002E64")));
        Assert.assertEquals("60000000000000000000000000000000000000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("60000000000000000000000000000000000000000000000000000000000000002")));
        Assert.assertEquals("6E-63",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000000000000000000000000000000000006")));
        Assert.assertEquals("6E-63",
                NumberStringUtility.stringValueOf(new BigDecimal("6E-63")));
        Assert.assertEquals("6E-64",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000000000000000000000000000000000000000000000000000006")));
        Assert.assertEquals("6E-64",
                NumberStringUtility.stringValueOf(new BigDecimal("6E-64")));
        Assert.assertEquals("0.6000000000000000000000000000000000000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("0.6000000000000000000000000000000000000000000000000000000000000002000000000")));
        Assert.assertEquals("0.6000000000000000000000000000000000000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("0.6000000000000000000000000000000000000000000000000000000000000002")));
        Assert.assertEquals("0.000000000000000000000000000000060000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000060000000000000000000000000000002")));
        Assert.assertEquals("0.000000000000000000000000000000060000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("6.0000000000000000000000000000002E-32")));
        Assert.assertEquals("6.0000000000000000000000000000002E-33",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000000000000000000000060000000000000000000000000000002")));
        Assert.assertEquals("6.000000000000000000000000000000002E-34",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000000000000000000000006000000000000000000000000000000002")));
        Assert.assertEquals("9E+1023",
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimal("9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")));
        Assert.assertEquals("9E+1024",
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimal("90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010")));
        Assert.assertEquals("9E+1032",
                NumberStringUtility.stringValueOf(new BigDecimal("9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000834618092")));
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals("9E-1023",
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals("9E-1023",
                NumberStringUtility.stringValueOf(new BigDecimal("9E-1023")));
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals("0.9",
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals("0.9",
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimal
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("35684.54407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("35684.544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.9486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181.8419384601")));
        Assert.assertEquals("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.1",
                NumberStringUtility.stringValueOf(new BigDecimal("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.18419384601")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601")));
        Assert.assertEquals("0.3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("0.35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057E-6",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-7",
                NumberStringUtility.stringValueOf(new BigDecimal("0.00000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-32",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-33",
                NumberStringUtility.stringValueOf(new BigDecimal("0.0000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106.22957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E+88")));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163")));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.stringValueOf(new BigDecimal("1E8456123459")));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.stringValueOf(new BigDecimal("1E10000000000")));
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.stringValueOf(new BigDecimal("1E-8456123459")));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.stringValueOf(new BigDecimal("1E-10000000000")));
        
        //format
        Assert.assertEquals("1156400000000",
                NumberStringUtility.stringValueOf(1.1564e12, true));
        Assert.assertEquals("1.1564E+12",
                NumberStringUtility.stringValueOf(1.1564e12, false));
        Assert.assertEquals("1156400000000",
                NumberStringUtility.stringValueOf(new BigDecimal("1156400000000"), true));
        Assert.assertEquals("1.1564E+12",
                NumberStringUtility.stringValueOf(new BigDecimal("1156400000000"), false));
        Assert.assertEquals("1000000000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("1E15"), true));
        Assert.assertEquals("1E+15",
                NumberStringUtility.stringValueOf(new BigDecimal("1E15"), false));
        Assert.assertEquals("55863229161000000000",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5863229161E19"), true));
        Assert.assertEquals("5.5863229161E+19",
                NumberStringUtility.stringValueOf(new BigDecimal("5.5863229161E19"), false));
        Assert.assertEquals("0.000000000000000000000000000000060000000000000000000000000000002",
                NumberStringUtility.stringValueOf(new BigDecimal("6.0000000000000000000000000000002E-32"), true));
        Assert.assertEquals("6.0000000000000000000000000000002E-32",
                NumberStringUtility.stringValueOf(new BigDecimal("6.0000000000000000000000000000002E-32"), false));
        Assert.assertEquals("0.9",
                NumberStringUtility.stringValueOf(new BigDecimaltrue));
        Assert.assertEquals
                NumberStringUtility.stringValueOf(new BigDecimalfalse));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), true));
        Assert.assertEquals("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), false));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), true));
        Assert.assertEquals("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), false));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601"), true));
        Assert.assertEquals("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601",
                NumberStringUtility.stringValueOf(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601"), false));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-32",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), true));
        Assert.assertEquals("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-32",
                NumberStringUtility.stringValueOf(new BigDecimal("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), false));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163"), true));
        Assert.assertEquals("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163",
                NumberStringUtility.stringValueOf(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163"), false));
        
        //invalid
        TestUtils.assertException(NumberFormatException.class, "Character N is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.", () ->
                NumberStringUtility.stringValueOf(Double.NaN));
        TestUtils.assertException(NumberFormatException.class, () ->
                NumberStringUtility.stringValueOf(new BigDecimal("")));
        TestUtils.assertException(NumberFormatException.class, () ->
                NumberStringUtility.stringValueOf(new BigDecimal("test")));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.stringValueOf(null));
    }
    
    /**
     * JUnit test of numberValueOf.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberValueOf(String, boolean)
     * @see NumberStringUtility#numberValueOf(String)
     */
    @Test
    public void testNumberValueOf() throws Exception {
        //simple cases
        Assert.assertEquals(0, NumberStringUtility.numberValueOf("0").intValue());
        Assert.assertEquals(1, NumberStringUtility.numberValueOf("1").intValue());
        Assert.assertEquals(984, NumberStringUtility.numberValueOf("984").intValue());
        Assert.assertEquals(456781, NumberStringUtility.numberValueOf("456781").intValue());
        Assert.assertEquals(456781000, NumberStringUtility.numberValueOf("456781000").intValue());
        Assert.assertEquals(56428452456781L, NumberStringUtility.numberValueOf("56428452456781").longValue());
        
        //invalid
        TestUtils.assertException(NumberFormatException.class, "Character A is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.", () ->
                NumberStringUtility.numberValueOf("156a87"));
        
        //exponential notation
        Assert.assertEquals(1.1564e12,
                NumberStringUtility.numberValueOf("1.1564e12").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.45612897541e56,
                NumberStringUtility.numberValueOf("8.45612897541e56").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(4.6e105,
                NumberStringUtility.numberValueOf("4.6e105").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.1564e12,
                NumberStringUtility.numberValueOf("1156400000000").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.45612897541e56,
                NumberStringUtility.numberValueOf("845612897541000000000000000000000000000000000000000000000").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(4.6e105,
                NumberStringUtility.numberValueOf("4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000").doubleValue(), TestUtils.DELTA);
        
        //negative numbers
        Assert.assertEquals(-0, NumberStringUtility.numberValueOf("0").intValue());
        Assert.assertEquals(-1, NumberStringUtility.numberValueOf("-1").intValue());
        Assert.assertEquals(-984, NumberStringUtility.numberValueOf("-984").intValue());
        Assert.assertEquals(-456781, NumberStringUtility.numberValueOf("-456781").intValue());
        Assert.assertEquals(-456781000, NumberStringUtility.numberValueOf("-456781000").intValue());
        Assert.assertEquals(-56428452456781L, NumberStringUtility.numberValueOf("-56428452456781").longValue());
        
        //negative numbers, exponential notation
        Assert.assertEquals(-1.1564e12,
                NumberStringUtility.numberValueOf("-1.1564e12").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.45612897541e56,
                NumberStringUtility.numberValueOf("-8.45612897541e56").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-4.6e105,
                NumberStringUtility.numberValueOf("-4.6e105").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.1564e12,
                NumberStringUtility.numberValueOf("-1156400000000").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.45612897541e56,
                NumberStringUtility.numberValueOf("-845612897541000000000000000000000000000000000000000000000").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-4.6e105,
                NumberStringUtility.numberValueOf("-4600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000").doubleValue(), TestUtils.DELTA);
        
        //decimals
        Assert.assertEquals(.1, NumberStringUtility.numberValueOf("0.1").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(.056481, NumberStringUtility.numberValueOf("0.056481").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(.0875210023469445, NumberStringUtility.numberValueOf("0.0875210023469445").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(.0000000000000000000001, NumberStringUtility.numberValueOf("0.0000000000000000000001").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(18.3, NumberStringUtility.numberValueOf("18.300").doubleValue(), TestUtils.DELTA);
        
        //decimals, exponential notation
        Assert.assertEquals(0.0000456541,
                NumberStringUtility.numberValueOf("4.56541e-5").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.156420069e-16,
                NumberStringUtility.numberValueOf("8.156420069e-16").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.0e-22,
                NumberStringUtility.numberValueOf("1.0e-22").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.84565770156e-151,
                NumberStringUtility.numberValueOf("1.84565770156e-151").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(0.0000456541,
                NumberStringUtility.numberValueOf("0.0000456541").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.156420069e-16,
                NumberStringUtility.numberValueOf("0.0000000000000008156420069").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.0e-22,
                NumberStringUtility.numberValueOf("0.0000000000000000000001").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.84565770156e-151,
                NumberStringUtility.numberValueOf("0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184565770156").doubleValue(), TestUtils.DELTA);
        
        //negative numbers, decimals
        Assert.assertEquals(-.1, NumberStringUtility.numberValueOf("-0.1").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-.056481, NumberStringUtility.numberValueOf("-0.056481").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-.0875210023469445, NumberStringUtility.numberValueOf("-0.0875210023469445").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-.0000000000000000000001, NumberStringUtility.numberValueOf("-0.0000000000000000000001").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-18.3, NumberStringUtility.numberValueOf("-18.300").doubleValue(), TestUtils.DELTA);
        
        //negative numbers, decimals, exponential notation
        Assert.assertEquals(-0.0000456541,
                NumberStringUtility.numberValueOf("-4.56541e-5").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.156420069e-16,
                NumberStringUtility.numberValueOf("-8.156420069e-16").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.0e-22,
                NumberStringUtility.numberValueOf("-1.0e-22").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.84565770156e-151,
                NumberStringUtility.numberValueOf("-1.84565770156e-151").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-0.0000456541,
                NumberStringUtility.numberValueOf("-0.0000456541").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.156420069e-16,
                NumberStringUtility.numberValueOf("-0.0000000000000008156420069").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.0e-22,
                NumberStringUtility.numberValueOf("-0.0000000000000000000001").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.84565770156e-151,
                NumberStringUtility.numberValueOf("-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000184565770156").doubleValue(), TestUtils.DELTA);
        
        //mixed numbers
        Assert.assertEquals(0.16542, NumberStringUtility.numberValueOf("0.16542").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.18744, NumberStringUtility.numberValueOf("1.18744").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(984.8975, NumberStringUtility.numberValueOf("984.8975").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(456781.4987, NumberStringUtility.numberValueOf("456781.4987").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(56428481.6874977, NumberStringUtility.numberValueOf("56428481.6874977").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(48940612.8460105, NumberStringUtility.numberValueOf("48940612.8460105000").doubleValue(), TestUtils.DELTA);
        
        //mixed numbers, exponential notation
        Assert.assertEquals(1.1564654798e4,
                NumberStringUtility.numberValueOf("1.1564654798e4").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.45612897e2,
                NumberStringUtility.numberValueOf("8.45612897e2").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(4.665874210054e6,
                NumberStringUtility.numberValueOf("4.665874210054e6").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(1.1564654798e4,
                NumberStringUtility.numberValueOf("11564.654798").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(8.45612897e2,
                NumberStringUtility.numberValueOf("845.612897").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(4.665874210054e6,
                NumberStringUtility.numberValueOf("4665874.210054").doubleValue(), TestUtils.DELTA);
        
        //mixed numbers, negative numbers
        Assert.assertEquals(-0.16542, NumberStringUtility.numberValueOf("-0.16542").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.18744, NumberStringUtility.numberValueOf("-1.18744").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-984.8975, NumberStringUtility.numberValueOf("-984.8975").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-456781.4987, NumberStringUtility.numberValueOf("-456781.4987").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-56428481.6874977, NumberStringUtility.numberValueOf("-56428481.6874977").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-48940612.8460105, NumberStringUtility.numberValueOf("-48940612.8460105000").doubleValue(), TestUtils.DELTA);
        
        //mixed numbers, negative numbers, exponential notation
        Assert.assertEquals(-1.1564654798e4,
                NumberStringUtility.numberValueOf("-1.1564654798e4").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.45612897e2,
                NumberStringUtility.numberValueOf("-8.45612897e2").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-4.665874210054e6,
                NumberStringUtility.numberValueOf("-4.665874210054e6").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-1.1564654798e4,
                NumberStringUtility.numberValueOf("-11564.654798").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-8.45612897e2,
                NumberStringUtility.numberValueOf("-845.612897").doubleValue(), TestUtils.DELTA);
        Assert.assertEquals(-4.665874210054e6,
                NumberStringUtility.numberValueOf("-4665874.210054").doubleValue(), TestUtils.DELTA);
        
        //big decimal cases
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829"),
                NumberStringUtility.numberValueOf("5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberValueOf("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberValueOf("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829"),
                NumberStringUtility.numberValueOf("-5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals(new BigDecimal("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberValueOf("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberValueOf("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        
        //precision
        Assert.assertEquals(new BigDecimal("1000000000000000"),
                NumberStringUtility.numberValueOf("1000000000000000"));
        Assert.assertEquals(new BigDecimal("1E+16"),
                NumberStringUtility.numberValueOf("1E+16"));
        Assert.assertEquals(new BigDecimal("10000000000000001"),
                NumberStringUtility.numberValueOf("10000000000000001"));
        Assert.assertEquals(new BigDecimal("5.5E+19"),
                NumberStringUtility.numberValueOf("5.5E+19"));
        Assert.assertEquals(new BigDecimal("5.586322916E+19"),
                NumberStringUtility.numberValueOf("5.586322916E+19"));
        Assert.assertEquals(new BigDecimal("55863229161000000000"),
                NumberStringUtility.numberValueOf("55863229161000000000"));
        Assert.assertEquals(new BigDecimal("50000000001000000000"),
                NumberStringUtility.numberValueOf("50000000001000000000"));
        Assert.assertEquals(new BigDecimal("0.000000000000001"),
                NumberStringUtility.numberValueOf("0.000000000000001"));
        Assert.assertEquals(new BigDecimal("1E-16"),
                NumberStringUtility.numberValueOf("1E-16"));
        Assert.assertEquals(new BigDecimal("1.0000000000000001"),
                NumberStringUtility.numberValueOf("1.0000000000000001"));
        Assert.assertEquals(new BigDecimal("5.5E-15"),
                NumberStringUtility.numberValueOf("5.5E-15"));
        Assert.assertEquals(new BigDecimal("5.586322916E-11"),
                NumberStringUtility.numberValueOf("5.586322916E-11"));
        Assert.assertEquals(new BigDecimal("0.00000000055863229161"),
                NumberStringUtility.numberValueOf("0.00000000055863229161"));
        Assert.assertEquals(new BigDecimal("0.00000000050000000001"),
                NumberStringUtility.numberValueOf("0.00000000050000000001"));
        Assert.assertEquals(new BigDecimal("6E+63"),
                NumberStringUtility.numberValueOf("6E+63"));
        Assert.assertEquals(new BigDecimal("6E+64"),
                NumberStringUtility.numberValueOf("6E+64"));
        Assert.assertEquals(new BigDecimal("6.0000000000000000000000000000000000000000000000000000002E+64"),
                NumberStringUtility.numberValueOf("6.0000000000000000000000000000000000000000000000000000002E+64"));
        Assert.assertEquals(new BigDecimal("60000000000000000000000000000000000000000000000000000000000000002"),
                NumberStringUtility.numberValueOf("60000000000000000000000000000000000000000000000000000000000000002"));
        Assert.assertEquals(new BigDecimal("6E-63"),
                NumberStringUtility.numberValueOf("6E-63"));
        Assert.assertEquals(new BigDecimal("6E-64"),
                NumberStringUtility.numberValueOf("6E-64"));
        Assert.assertEquals(new BigDecimal("0.6000000000000000000000000000000000000000000000000000000000000002"),
                NumberStringUtility.numberValueOf("0.6000000000000000000000000000000000000000000000000000000000000002"));
        Assert.assertEquals(new BigDecimal("0.000000000000000000000000000000060000000000000000000000000000002"),
                NumberStringUtility.numberValueOf("0.000000000000000000000000000000060000000000000000000000000000002"));
        Assert.assertEquals(new BigDecimal("6.0000000000000000000000000000002E-33"),
                NumberStringUtility.numberValueOf("6.0000000000000000000000000000002E-33"));
        Assert.assertEquals(new BigDecimal("6.00000000000000000000000000000002E-33"),
                NumberStringUtility.numberValueOf("6.00000000000000000000000000000002E-33"));
        Assert.assertEquals(new BigDecimal("6.000000000000000000000000000000002E-34"),
                NumberStringUtility.numberValueOf("6.000000000000000000000000000000002E-34"));
        Assert.assertEquals(new BigDecimal("9E+1023"),
                NumberStringUtility.numberValueOf("9E+1023"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("9E+1024"),
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("9E+1032"),
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("9E-1023"),
                NumberStringUtility.numberValueOf("9E-1023"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("0.9"),
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("0.9"),
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOf
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("35684.54407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("35684.544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.9486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181.8419384601"));
        Assert.assertEquals(new BigDecimal("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.1"),
                NumberStringUtility.numberValueOf("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.18419384601"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601"));
        Assert.assertEquals(new BigDecimal("0.3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("0.35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057E-6"),
                NumberStringUtility.numberValueOf("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-7"),
                NumberStringUtility.numberValueOf("0.00000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-32"),
                NumberStringUtility.numberValueOf("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-33"),
                NumberStringUtility.numberValueOf("0.0000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106.22957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E+88"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163"));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberValueOf("1E8456123459"));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberValueOf("1E10000000000"));
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberValueOf("1E-8456123459"));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberValueOf("1E-10000000000"));
        
        //format
        Assert.assertEquals(new BigDecimal("1156400000000"),
                NumberStringUtility.numberValueOf("1.1564e12", true));
        Assert.assertEquals(new BigDecimal("1.1564E+12"),
                NumberStringUtility.numberValueOf("1.1564e12", false));
        Assert.assertEquals(new BigDecimal("1156400000000"),
                NumberStringUtility.numberValueOf("1156400000000", true));
        Assert.assertEquals(new BigDecimal("1.1564E+12"),
                NumberStringUtility.numberValueOf("1156400000000", false));
        Assert.assertEquals(new BigDecimal("1000000000000000"),
                NumberStringUtility.numberValueOf("1E15", true));
        Assert.assertEquals(new BigDecimal("1E+15"),
                NumberStringUtility.numberValueOf("1E15", false));
        Assert.assertEquals(new BigDecimal("55863229161000000000"),
                NumberStringUtility.numberValueOf("5.5863229161E19", true));
        Assert.assertEquals(new BigDecimal("5.5863229161E+19"),
                NumberStringUtility.numberValueOf("5.5863229161E19", false));
        Assert.assertEquals(new BigDecimal("0.000000000000000000000000000000060000000000000000000000000000002"),
                NumberStringUtility.numberValueOf("6.0000000000000000000000000000002E-32", true));
        Assert.assertEquals(new BigDecimal("6.0000000000000000000000000000002E-32"),
                NumberStringUtility.numberValueOf("6.0000000000000000000000000000002E-32", false));
        Assert.assertEquals(new BigDecimal("0.9"),
                NumberStringUtility.numberValueOftrue));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberValueOffalse));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", true));
        Assert.assertEquals(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", false));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", true));
        Assert.assertEquals(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", false));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601", true));
        Assert.assertEquals(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601"),
                NumberStringUtility.numberValueOf("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601", false));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-32"),
                NumberStringUtility.numberValueOf("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", true));
        Assert.assertEquals(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-32"),
                NumberStringUtility.numberValueOf("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", false));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163", true));
        Assert.assertEquals(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163"),
                NumberStringUtility.numberValueOf("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163", false));
    }
    
    /**
     * JUnit test of numberStringToNumberPhrase.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberStringToNumberPhrase(String, NumberStringUtility.FractionMode)
     * @see NumberStringUtility#numberStringToNumberPhrase(String)
     */
    @Test
    public void testNumberStringToNumberPhrase() throws Exception {
        //simple cases
        Assert.assertEquals("zero", NumberStringUtility.numberStringToNumberPhrase("0"));
        Assert.assertEquals("one", NumberStringUtility.numberStringToNumberPhrase("1"));
        Assert.assertEquals("two", NumberStringUtility.numberStringToNumberPhrase("2"));
        Assert.assertEquals("three", NumberStringUtility.numberStringToNumberPhrase("3"));
        Assert.assertEquals("four", NumberStringUtility.numberStringToNumberPhrase("4"));
        Assert.assertEquals("five", NumberStringUtility.numberStringToNumberPhrase("5"));
        Assert.assertEquals("six", NumberStringUtility.numberStringToNumberPhrase("6"));
        Assert.assertEquals("seven", NumberStringUtility.numberStringToNumberPhrase("7"));
        Assert.assertEquals("eight", NumberStringUtility.numberStringToNumberPhrase("8"));
        Assert.assertEquals("nine", NumberStringUtility.numberStringToNumberPhrase("9"));
        Assert.assertEquals("ten", NumberStringUtility.numberStringToNumberPhrase("10"));
        Assert.assertEquals("eleven", NumberStringUtility.numberStringToNumberPhrase("11"));
        Assert.assertEquals("twelve", NumberStringUtility.numberStringToNumberPhrase("12"));
        Assert.assertEquals("thirteen", NumberStringUtility.numberStringToNumberPhrase("13"));
        Assert.assertEquals("fourteen", NumberStringUtility.numberStringToNumberPhrase("14"));
        Assert.assertEquals("fifteen", NumberStringUtility.numberStringToNumberPhrase("15"));
        Assert.assertEquals("sixteen", NumberStringUtility.numberStringToNumberPhrase("16"));
        Assert.assertEquals("seventeen", NumberStringUtility.numberStringToNumberPhrase("17"));
        Assert.assertEquals("eighteen", NumberStringUtility.numberStringToNumberPhrase("18"));
        Assert.assertEquals("nineteen", NumberStringUtility.numberStringToNumberPhrase("19"));
        
        //two digit cases
        Assert.assertEquals("twenty", NumberStringUtility.numberStringToNumberPhrase("20"));
        Assert.assertEquals("twenty five", NumberStringUtility.numberStringToNumberPhrase("25"));
        Assert.assertEquals("thirty", NumberStringUtility.numberStringToNumberPhrase("30"));
        Assert.assertEquals("thirty one", NumberStringUtility.numberStringToNumberPhrase("31"));
        Assert.assertEquals("forty", NumberStringUtility.numberStringToNumberPhrase("40"));
        Assert.assertEquals("forty six", NumberStringUtility.numberStringToNumberPhrase("46"));
        Assert.assertEquals("fifty", NumberStringUtility.numberStringToNumberPhrase("50"));
        Assert.assertEquals("fifty two", NumberStringUtility.numberStringToNumberPhrase("52"));
        Assert.assertEquals("sixty", NumberStringUtility.numberStringToNumberPhrase("60"));
        Assert.assertEquals("sixty eight", NumberStringUtility.numberStringToNumberPhrase("68"));
        Assert.assertEquals("seventy", NumberStringUtility.numberStringToNumberPhrase("70"));
        Assert.assertEquals("seventy seven", NumberStringUtility.numberStringToNumberPhrase("77"));
        Assert.assertEquals("eighty", NumberStringUtility.numberStringToNumberPhrase("80"));
        Assert.assertEquals("eighty three", NumberStringUtility.numberStringToNumberPhrase("83"));
        Assert.assertEquals("ninety", NumberStringUtility.numberStringToNumberPhrase("90"));
        Assert.assertEquals("ninety four", NumberStringUtility.numberStringToNumberPhrase("94"));
        Assert.assertEquals("ninety nine", NumberStringUtility.numberStringToNumberPhrase("99"));
        
        //three digit cases
        Assert.assertEquals("one hundred", NumberStringUtility.numberStringToNumberPhrase("100"));
        Assert.assertEquals("one hundred fifty four", NumberStringUtility.numberStringToNumberPhrase("154"));
        Assert.assertEquals("two hundred", NumberStringUtility.numberStringToNumberPhrase("200"));
        Assert.assertEquals("two hundred nineteen", NumberStringUtility.numberStringToNumberPhrase("219"));
        Assert.assertEquals("three hundred", NumberStringUtility.numberStringToNumberPhrase("300"));
        Assert.assertEquals("three hundred seventy seven", NumberStringUtility.numberStringToNumberPhrase("377"));
        Assert.assertEquals("four hundred", NumberStringUtility.numberStringToNumberPhrase("400"));
        Assert.assertEquals("four hundred sixty eight", NumberStringUtility.numberStringToNumberPhrase("468"));
        Assert.assertEquals("five hundred", NumberStringUtility.numberStringToNumberPhrase("500"));
        Assert.assertEquals("five hundred ninety four", NumberStringUtility.numberStringToNumberPhrase("594"));
        Assert.assertEquals("six hundred", NumberStringUtility.numberStringToNumberPhrase("600"));
        Assert.assertEquals("six hundred eight", NumberStringUtility.numberStringToNumberPhrase("608"));
        Assert.assertEquals("seven hundred", NumberStringUtility.numberStringToNumberPhrase("700"));
        Assert.assertEquals("seven hundred seventy six", NumberStringUtility.numberStringToNumberPhrase("776"));
        Assert.assertEquals("eight hundred", NumberStringUtility.numberStringToNumberPhrase("800"));
        Assert.assertEquals("eight hundred forty two", NumberStringUtility.numberStringToNumberPhrase("842"));
        Assert.assertEquals("nine hundred", NumberStringUtility.numberStringToNumberPhrase("900"));
        Assert.assertEquals("nine hundred ninety nine", NumberStringUtility.numberStringToNumberPhrase("999"));
        
        //larger cases
        Assert.assertEquals("one thousand",
                NumberStringUtility.numberStringToNumberPhrase("1000"));
        Assert.assertEquals("six hundred forty three thousand eight hundred twenty two",
                NumberStringUtility.numberStringToNumberPhrase("643822"));
        Assert.assertEquals("fifteen million six hundred twenty one thousand nine hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("15621907"));
        Assert.assertEquals("nine hundred forty six billion one hundred four million sixty seven thousand one",
                NumberStringUtility.numberStringToNumberPhrase("946104067001"));
        Assert.assertEquals("one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one",
                NumberStringUtility.numberStringToNumberPhrase("199486273416821"));
        Assert.assertEquals("one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one",
                NumberStringUtility.numberStringToNumberPhrase("199486000000821"));
        Assert.assertEquals("one quintillion nine hundred ninety four quadrillion eight hundred sixty trillion eight hundred twenty one million fifty four",
                NumberStringUtility.numberStringToNumberPhrase("1994860000821000054"));
        Assert.assertEquals("one quadrillion",
                NumberStringUtility.numberStringToNumberPhrase("1000000000000000"));
        Assert.assertEquals("one quintillion",
                NumberStringUtility.numberStringToNumberPhrase("1000000000000000000"));
        Assert.assertEquals("one quintillion",
                NumberStringUtility.numberStringToNumberPhrase("1E+18"));
        
        //very large cases
        Assert.assertEquals("three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion four hundred ninety eight tredecillion four hundred six duodecillion four hundred sixteen undecillion five hundred forty decillion four hundred sixty four nonillion",
                NumberStringUtility.numberStringToNumberPhrase("3.465874122498406416540464e54"));
        Assert.assertEquals("ninety five septendecillion six hundred sixty one sexdecillion one hundred fifty six quindecillion four hundred sixty nine quattuordecillion eight hundred seventy tredecillion eight hundred ninety one duodecillion eight hundred sixty six undecillion five hundred seventy five decillion",
                NumberStringUtility.numberStringToNumberPhrase("9.5661156469870891866575e55"));
        Assert.assertEquals("one hundred eighty seven septendecillion four hundred forty two sexdecillion ninety quindecillion five hundred eight quattuordecillion nine hundred forty seven tredecillion eight hundred ninety six duodecillion two hundred eleven undecillion six hundred eleven decillion",
                NumberStringUtility.numberStringToNumberPhrase("1.87442090508947896211611e56"));
        Assert.assertEquals("two octodecillion ninety seven septendecillion seven hundred fifty one sexdecillion two hundred seventy four quindecillion six hundred fifty four quattuordecillion two hundred thirty eight tredecillion eight hundred forty five duodecillion six hundred ninety seven undecillion",
                NumberStringUtility.numberStringToNumberPhrase("2.097751274654238845697e57"));
        Assert.assertEquals("seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion nine hundred eighty untrigintillion four hundred eighty nine trigintillion four hundred sixty five novemvigintillion one hundred sixty two octovigintillion four hundred fifty septenvigintillion",
                NumberStringUtility.numberStringToNumberPhrase("7.46112387798048946516245e108"));
        Assert.assertEquals("four duosexagintillion forty two sexagintillion three hundred thirty nine novemquinquagintillion three hundred three octoquinquagintillion sixty five septenquinquagintillion eight hundred forty eight sexquinquagintillion forty five quinquinquagintillion six hundred quattuorquinquagintillion",
                NumberStringUtility.numberStringToNumberPhrase("4.0000423393030658480456e189"));
        Assert.assertEquals("eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty eight octononagintillion nine hundred seventy septennonagintillion eight hundred forty five sexnonagintillion six hundred one quinnonagintillion one hundred twenty three quattuornonagintillion one hundred sixty nine trenonagintillion eight hundred forty duononagintillion five hundred sixty six unnonagintillion",
                NumberStringUtility.numberStringToNumberPhrase("8.4519974638970845601123169840566e307"));
        Assert.assertEquals("three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion four hundred ninety eight tredecillion four hundred six duodecillion four hundred sixteen undecillion five hundred forty decillion four hundred sixty four nonillion",
                NumberStringUtility.numberStringToNumberPhrase("3465874122498406416540464000000000000000000000000000000"));
        Assert.assertEquals("ninety five septendecillion six hundred sixty one sexdecillion one hundred fifty six quindecillion four hundred sixty nine quattuordecillion eight hundred seventy tredecillion eight hundred ninety one duodecillion eight hundred sixty six undecillion five hundred seventy five decillion",
                NumberStringUtility.numberStringToNumberPhrase("95661156469870891866575000000000000000000000000000000000"));
        Assert.assertEquals("one hundred eighty seven septendecillion four hundred forty two sexdecillion ninety quindecillion five hundred eight quattuordecillion nine hundred forty seven tredecillion eight hundred ninety six duodecillion two hundred eleven undecillion six hundred eleven decillion",
                NumberStringUtility.numberStringToNumberPhrase("187442090508947896211611000000000000000000000000000000000"));
        Assert.assertEquals("two octodecillion ninety seven septendecillion seven hundred fifty one sexdecillion two hundred seventy four quindecillion six hundred fifty four quattuordecillion two hundred thirty eight tredecillion eight hundred forty five duodecillion six hundred ninety seven undecillion",
                NumberStringUtility.numberStringToNumberPhrase("2097751274654238845697000000000000000000000000000000000000"));
        Assert.assertEquals("seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion nine hundred eighty untrigintillion four hundred eighty nine trigintillion four hundred sixty five novemvigintillion one hundred sixty two octovigintillion four hundred fifty septenvigintillion",
                NumberStringUtility.numberStringToNumberPhrase("7461123877980489465162450000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals("four duosexagintillion forty two sexagintillion three hundred thirty nine novemquinquagintillion three hundred three octoquinquagintillion sixty five septenquinquagintillion eight hundred forty eight sexquinquagintillion forty five quinquinquagintillion six hundred quattuorquinquagintillion",
                NumberStringUtility.numberStringToNumberPhrase("4000042339303065848045600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals("eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty eight octononagintillion nine hundred seventy septennonagintillion eight hundred forty five sexnonagintillion six hundred one quinnonagintillion one hundred twenty three quattuornonagintillion one hundred sixty nine trenonagintillion eight hundred forty duononagintillion five hundred sixty six unnonagintillion",
                NumberStringUtility.numberStringToNumberPhrase("84519974638970845601123169840566000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        
        //negative cases
        Assert.assertEquals("zero", NumberStringUtility.numberStringToNumberPhrase("-0"));
        Assert.assertEquals("negative two", NumberStringUtility.numberStringToNumberPhrase("-2"));
        Assert.assertEquals("negative four", NumberStringUtility.numberStringToNumberPhrase("-4"));
        Assert.assertEquals("negative seven", NumberStringUtility.numberStringToNumberPhrase("-7"));
        Assert.assertEquals("negative thirteen", NumberStringUtility.numberStringToNumberPhrase("-13"));
        Assert.assertEquals("negative fourteen", NumberStringUtility.numberStringToNumberPhrase("-14"));
        Assert.assertEquals("negative nineteen", NumberStringUtility.numberStringToNumberPhrase("-19"));
        Assert.assertEquals("negative forty", NumberStringUtility.numberStringToNumberPhrase("-40"));
        Assert.assertEquals("negative forty six", NumberStringUtility.numberStringToNumberPhrase("-46"));
        Assert.assertEquals("negative fifty two", NumberStringUtility.numberStringToNumberPhrase("-52"));
        Assert.assertEquals("negative seventy seven", NumberStringUtility.numberStringToNumberPhrase("-77"));
        Assert.assertEquals("negative eighty", NumberStringUtility.numberStringToNumberPhrase("-80"));
        Assert.assertEquals("negative ninety nine", NumberStringUtility.numberStringToNumberPhrase("-99"));
        Assert.assertEquals("negative two hundred nineteen", NumberStringUtility.numberStringToNumberPhrase("-219"));
        Assert.assertEquals("negative three hundred", NumberStringUtility.numberStringToNumberPhrase("-300"));
        Assert.assertEquals("negative five hundred ninety four", NumberStringUtility.numberStringToNumberPhrase("-594"));
        Assert.assertEquals("negative seven hundred seventy six", NumberStringUtility.numberStringToNumberPhrase("-776"));
        Assert.assertEquals("negative nine hundred", NumberStringUtility.numberStringToNumberPhrase("-900"));
        Assert.assertEquals("negative nine hundred ninety nine", NumberStringUtility.numberStringToNumberPhrase("-999"));
        Assert.assertEquals("negative six hundred forty three thousand eight hundred twenty two",
                NumberStringUtility.numberStringToNumberPhrase("-643822"));
        Assert.assertEquals("negative nine hundred forty six billion one hundred four million sixty seven thousand one",
                NumberStringUtility.numberStringToNumberPhrase("-946104067001"));
        Assert.assertEquals("negative one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one",
                NumberStringUtility.numberStringToNumberPhrase("-199486273416821"));
        Assert.assertEquals("negative one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one",
                NumberStringUtility.numberStringToNumberPhrase("-199486000000821"));
        Assert.assertEquals("negative three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion",
                NumberStringUtility.numberStringToNumberPhrase("-3.465874122e54"));
        Assert.assertEquals("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e108"));
        Assert.assertEquals("negative eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion",
                NumberStringUtility.numberStringToNumberPhrase("-8.451997463e307"));
        
        //decimal cases
        Assert.assertEquals("zero", NumberStringUtility.numberStringToNumberPhrase("0.0"));
        Assert.assertEquals("one tenth", NumberStringUtility.numberStringToNumberPhrase("0.1"));
        Assert.assertEquals("six tenths", NumberStringUtility.numberStringToNumberPhrase("0.6"));
        Assert.assertEquals("one hundredth", NumberStringUtility.numberStringToNumberPhrase("0.01"));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberStringToNumberPhrase("0.08"));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberStringToNumberPhrase("0.33"));
        Assert.assertEquals("nine tenths", NumberStringUtility.numberStringToNumberPhrase("0.90"));
        Assert.assertEquals("one thousandth", NumberStringUtility.numberStringToNumberPhrase("0.001"));
        Assert.assertEquals("seven thousandths", NumberStringUtility.numberStringToNumberPhrase("0.007"));
        Assert.assertEquals("seventy seven thousandths", NumberStringUtility.numberStringToNumberPhrase("0.077"));
        Assert.assertEquals("seven hundred seventy seven thousandths", NumberStringUtility.numberStringToNumberPhrase("0.777"));
        Assert.assertEquals("one hundred millionths", NumberStringUtility.numberStringToNumberPhrase("0.0001"));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberStringToNumberPhrase("0.1001"));
        Assert.assertEquals("two point one five four two", NumberStringUtility.numberStringToNumberPhrase("2.1542"));
        Assert.assertEquals("nineteen and eight thousandths", NumberStringUtility.numberStringToNumberPhrase("19.008"));
        Assert.assertEquals("forty and seventy four hundredths", NumberStringUtility.numberStringToNumberPhrase("40.74"));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberStringToNumberPhrase("300.9141"));
        Assert.assertEquals("five hundred ninety four", NumberStringUtility.numberStringToNumberPhrase("594.000"));
        Assert.assertEquals("seven hundred seventy six and forty one hundredths", NumberStringUtility.numberStringToNumberPhrase("776.410"));
        Assert.assertEquals("six hundred forty three thousand eight hundred twenty two point nine six four one",
                NumberStringUtility.numberStringToNumberPhrase("643822.9641"));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000123456789"));
        Assert.assertEquals("one hundred twenty three trillionths four hundred fifty six quadrillionths seven hundred eighty nine quintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.000000000123456789"));
        Assert.assertEquals("twelve trillionths three hundred forty five quadrillionths six hundred seventy eight quintillionths nine hundred sextillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.0000000000123456789"));
        Assert.assertEquals("one trillionth two hundred thirty four quadrillionths five hundred sixty seven quintillionths eight hundred ninety sextillionths",
                NumberStringUtility.numberStringToNumberPhrase("1.23456789E-12"));
        Assert.assertEquals("one hundred twenty three quintillionths four hundred fifty six sextillionths seven hundred eighty nine septillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.000000000123456789E-6"));
        Assert.assertEquals("eight hundred sixty five quadrillionths four hundred thirty two quintillionths one hundred fifteen sextillionths four hundred seventy septillionths",
                NumberStringUtility.numberStringToNumberPhrase("8.6543211547E-13"));
        Assert.assertEquals("fifteen and eight trillionths six hundred fifty four quadrillionths three hundred twenty one quintillionths one hundred fifty four sextillionths seven hundred septillionths",
                NumberStringUtility.numberStringToNumberPhrase("15.0000000000086543211547"));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths",
                NumberStringUtility.numberStringToNumberPhrase("-9875116.000000167"));
        
        //big decimal cases
        Assert.assertEquals("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine",
                NumberStringUtility.numberStringToNumberPhrase("5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine",
                NumberStringUtility.numberStringToNumberPhrase("-5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals("negative point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("fifty one viginmilliaquadringenseptentrigintillion two hundred thirty four viginmilliaquadringensextrigintillion six hundred forty one viginmilliaquadringenquintrigintillion two hundred thirty eight viginmilliaquadringenquattuortrigintillion seven hundred ninety four viginmilliaquadringentretrigintillion four hundred twenty one viginmilliaquadringenduotrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("5.1234641238794421E61315"));
        
        //extremely large cases
        Assert.assertEquals("one hundred duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingenoctodecillion",
                NumberStringUtility.numberStringToNumberPhrase("1E8456123459"));
        Assert.assertEquals("ten duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingennovemdecillionths",
                NumberStringUtility.numberStringToNumberPhrase("1E-8456123459"));
        Assert.assertEquals("eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillion four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaseptentrigintillion three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliasextrigintillion nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquintrigintillion three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquattuortrigintillion six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatretrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("8.45132198830763E40065423117"));
        Assert.assertEquals("eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase("8.45132198830763E-40065423117"));
        Assert.assertEquals("negative one hundred duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingenoctodecillion",
                NumberStringUtility.numberStringToNumberPhrase("-1E8456123459"));
        Assert.assertEquals("negative ten duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingennovemdecillionths",
                NumberStringUtility.numberStringToNumberPhrase("-1E-8456123459"));
        Assert.assertEquals("negative eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillion four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaseptentrigintillion three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliasextrigintillion nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquintrigintillion three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquattuortrigintillion six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatretrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("-8.45132198830763E40065423117"));
        Assert.assertEquals("negative eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase("-8.45132198830763E-40065423117"));
        Assert.assertEquals("one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion",
                NumberStringUtility.numberStringToNumberPhrase("1E9223372036854775806"));
        Assert.assertEquals("one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth",
                NumberStringUtility.numberStringToNumberPhrase("1E-9223372036854775806"));
        Assert.assertEquals("negative one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion",
                NumberStringUtility.numberStringToNumberPhrase("-1E9223372036854775806"));
        Assert.assertEquals("negative one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth",
                NumberStringUtility.numberStringToNumberPhrase("-1E-9223372036854775806"));
        Assert.assertEquals("nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescentillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingennovemnonagintillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenoctononagintillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenseptennonagintillion",
                NumberStringUtility.numberStringToNumberPhrase("9.999999999999E9223372036854775806"));
        Assert.assertEquals("nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenseptennonagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenoctononagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingennovemnonagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescentillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionths",
                NumberStringUtility.numberStringToNumberPhrase("9.999999999999E-9223372036854775794"));
        
        //exponential notation
        Assert.assertEquals("one hundred forty five billion",
                NumberStringUtility.numberStringToNumberPhrase("1.45e11"));
        Assert.assertEquals("fifty five quintillionths one hundred sixty three sextillionths two hundred twenty septillionths",
                NumberStringUtility.numberStringToNumberPhrase("5.516322e-17"));
        Assert.assertEquals("seventy one thousand five hundred forty six and eleven hundredths",
                NumberStringUtility.numberStringToNumberPhrase("715.4611e2"));
        Assert.assertEquals("seventy one point five four six one one",
                NumberStringUtility.numberStringToNumberPhrase("715.4611e-1"));
        Assert.assertEquals("negative point seven one five four six one one",
                NumberStringUtility.numberStringToNumberPhrase("-715.4611e-3"));
        Assert.assertEquals("negative seven million one hundred fifty four thousand six hundred eleven",
                NumberStringUtility.numberStringToNumberPhrase("-715.4611e4"));
        Assert.assertEquals("point zero zero seven one five four six one one",
                NumberStringUtility.numberStringToNumberPhrase("7.154611e-3"));
        Assert.assertEquals("seven trillion one hundred fifty four billion six hundred eleven million",
                NumberStringUtility.numberStringToNumberPhrase("715.4611e10"));
        Assert.assertEquals("negative seventy one billionths five hundred forty six trillionths one hundred ten quadrillionths",
                NumberStringUtility.numberStringToNumberPhrase("-715.4611e-10"));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberStringToNumberPhrase("0.0007154611e6"));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberStringToNumberPhrase("715461100000.00e-9"));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberStringToNumberPhrase("715.4611e0"));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberStringToNumberPhrase("715.4611e-0"));
        Assert.assertEquals("one septendecillion",
                NumberStringUtility.numberStringToNumberPhrase("1e54"));
        Assert.assertEquals("one septendecillionth",
                NumberStringUtility.numberStringToNumberPhrase("1e-54"));
        Assert.assertEquals("seven hundred sexdecillion",
                NumberStringUtility.numberStringToNumberPhrase("7e53"));
        Assert.assertEquals("seventy sexdecillion",
                NumberStringUtility.numberStringToNumberPhrase("7e52"));
        Assert.assertEquals("seven hundred forty five sexdecillion one hundred quindecillion",
                NumberStringUtility.numberStringToNumberPhrase("7.451e53"));
        Assert.assertEquals("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e108"));
        Assert.assertEquals("negative seventy four quintrigintillion six hundred eleven quattuortrigintillion two hundred thirty eight tretrigintillion seven hundred seventy duotrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e109"));
        Assert.assertEquals("negative seven hundred forty six quintrigintillion one hundred twelve quattuortrigintillion three hundred eighty seven tretrigintillion seven hundred duotrigintillion",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e110"));
        Assert.assertEquals("negative seven quintrigintillionths four hundred sixty one sextrigintillionths one hundred twenty three septentrigintillionths eight hundred seventy seven octotrigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e-108"));
        Assert.assertEquals("negative seven hundred forty six sextrigintillionths one hundred twelve septentrigintillionths three hundred eighty seven octotrigintillionths seven hundred novemtrigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e-109"));
        Assert.assertEquals("negative seventy four sextrigintillionths six hundred eleven septentrigintillionths two hundred thirty eight octotrigintillionths seven hundred seventy novemtrigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("-7.461123877e-110"));
        
        //precision
        Assert.assertEquals("one quadrillion",
                NumberStringUtility.numberStringToNumberPhrase("1000000000000000"));
        Assert.assertEquals("ten quadrillion",
                NumberStringUtility.numberStringToNumberPhrase("1E+16"));
        Assert.assertEquals("ten quadrillion one",
                NumberStringUtility.numberStringToNumberPhrase("10000000000000001"));
        Assert.assertEquals("fifty five quintillion",
                NumberStringUtility.numberStringToNumberPhrase("5.5E+19"));
        Assert.assertEquals("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty billion",
                NumberStringUtility.numberStringToNumberPhrase("5.586322916E+19"));
        Assert.assertEquals("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty one billion",
                NumberStringUtility.numberStringToNumberPhrase("55863229161000000000"));
        Assert.assertEquals("fifty quintillion one billion",
                NumberStringUtility.numberStringToNumberPhrase("50000000001000000000"));
        Assert.assertEquals("one quadrillionth",
                NumberStringUtility.numberStringToNumberPhrase("0.000000000000001"));
        Assert.assertEquals("one hundred quintillionths",
                NumberStringUtility.numberStringToNumberPhrase("1E-16"));
        Assert.assertEquals("one and one hundred quintillionths",
                NumberStringUtility.numberStringToNumberPhrase("1.0000000000000001"));
        Assert.assertEquals("five quadrillionths five hundred quintillionths",
                NumberStringUtility.numberStringToNumberPhrase("5.5E-15"));
        Assert.assertEquals("fifty five trillionths eight hundred sixty three quadrillionths two hundred twenty nine quintillionths one hundred sixty sextillionths",
                NumberStringUtility.numberStringToNumberPhrase("5.586322916E-11"));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero five five eight six three two two nine one six one",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000055863229161"));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero five zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000050000000001"));
        Assert.assertEquals("six vigintillion",
                NumberStringUtility.numberStringToNumberPhrase("6E+63"));
        Assert.assertEquals("sixty vigintillion",
                NumberStringUtility.numberStringToNumberPhrase("6E+64"));
        Assert.assertEquals("sixty vigintillion two billion",
                NumberStringUtility.numberStringToNumberPhrase("6.0000000000000000000000000000000000000000000000000000002E+64"));
        Assert.assertEquals("sixty vigintillion two",
                NumberStringUtility.numberStringToNumberPhrase("60000000000000000000000000000000000000000000000000000000000000002"));
        Assert.assertEquals("six vigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("6E-63"));
        Assert.assertEquals("six hundred unvigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("6E-64"));
        Assert.assertEquals("six tenths two hundred unvigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.6000000000000000000000000000000000000000000000000000000000000002"));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero six zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero two",
                NumberStringUtility.numberStringToNumberPhrase("0.000000000000000000000000000000060000000000000000000000000000002"));
        Assert.assertEquals("six decillionths two hundred unvigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("6.0000000000000000000000000000002E-33"));
        Assert.assertEquals("six decillionths twenty unvigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("6.00000000000000000000000000000002E-33"));
        Assert.assertEquals("six hundred undecillionths two hundred duovigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("6.000000000000000000000000000000002E-34"));
        Assert.assertEquals("nine trecenquadragintillion",
                NumberStringUtility.numberStringToNumberPhrase("9E+1023"));
        Assert.assertEquals("nine trecenquadragintillion one",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("ninety trecenquadragintillion one",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("ninety trecenquadragintillion ten",
                NumberStringUtility.numberStringToNumberPhrase("9.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001E+1024"));
        Assert.assertEquals("nine trecentrequadragintillion eight hundred thirty four million six hundred eighteen thousand ninety two",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine trecentrequadragintillion one billion eight hundred thirty four million six hundred eighteen thousand ninety two",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine trecenquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase("9E-1023"));
        Assert.assertEquals("nine tenths one hundred trecenunquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine tenths one hundred trecenunquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine tenths eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("nine tenths one hundred eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase
        Assert.assertEquals("thirty five trecentrequadragintillion six hundred eighty four trecenduoquadragintillion five hundred forty four trecenunquadragintillion seventy five trecenquadragintillion seven trecennovemtrigintillion eight hundred eighty nine trecenoctotrigintillion three hundred fifty two trecenseptentrigintillion eight hundred twelve trecensextrigintillion seven hundred thirty seven trecenquintrigintillion three hundred ninety nine trecenquattuortrigintillion five hundred eleven trecentretrigintillion nine hundred nine trecenduotrigintillion one hundred fifteen trecenuntrigintillion three hundred thirty three trecentrigintillion one hundred two trecennovemvigintillion three hundred eighty six trecenoctovigintillion three hundred twenty six trecenseptenvigintillion eight hundred ninety four trecensexvigintillion seven hundred twenty trecenquinvigintillion six hundred thirty trecenquattuorvigintillion five hundred thirty four trecentrevigintillion four hundred ninety eight trecenduovigintillion three hundred twenty trecenunvigintillion eight hundred eighty two trecenvigintillion one hundred fifteen trecennovemdecillion five hundred eighty six trecenoctodecillion one hundred eighty six trecenseptendecillion two hundred fifty trecensexdecillion eight hundred fifty two trecenquindecillion one hundred six trecenquattuordecillion two hundred twenty nine trecentredecillion five hundred seventy eight trecenduodecillion eight hundred forty two trecenundecillion eight hundred forty seven trecendecillion seven hundred ninety one trecennovemtillion three hundred twenty six trecenoctotillion one hundred seventy two trecensextillion four hundred sixty two trecenquintillion one hundred fifty two trecenquattuortillion two hundred thirty seven trecentretillion three trecenduotillion nine hundred forty one trecenuntillion six hundred thirty six trecentillion seven hundred seventy seven duocennovemnonagintillion one hundred sixty two duocenoctononagintillion seven hundred forty seven duocenseptennonagintillion nine hundred ninety seven duocensexnonagintillion eight hundred seventy seven duocenquinnonagintillion six hundred forty two duocenquattuornonagintillion two hundred sixty two duocentrenonagintillion three hundred eleven duocenduononagintillion two hundred eight duocenunnonagintillion nine hundred nineteen duocennonagintillion one hundred nineteen duocennovemoctogintillion five hundred thirteen duocenoctooctogintillion three hundred eighty three duocenseptenoctogintillion five hundred forty one duocensexoctogintillion one hundred fifty two duocenquinoctogintillion five hundred fifty seven duocenquattuoroctogintillion one hundred fifty one duocentreoctogintillion two hundred three duocenduooctogintillion six hundred forty nine duocenunoctogintillion two hundred seven duocenoctogintillion one hundred fifty duocennovemseptuagintillion two hundred fifty one duocenoctoseptuagintillion four hundred sixty four duocenseptenseptuagintillion nine hundred ninety eight duocensexseptuagintillion four hundred twenty six duocenquinseptuagintillion sixty one duocenquattuorseptuagintillion six hundred ninety six duocentreseptuagintillion six hundred seventy four duocenduoseptuagintillion seven hundred seventy eight duocenunseptuagintillion three hundred seventy duocenseptuagintillion sixty one duocennovemsexagintillion seven hundred thirty five duocenoctosexagintillion one duocenseptensexagintillion two hundred thirty three duocensexsexagintillion four hundred eighty seven duocenquinsexagintillion three hundred forty five duocenquattuorsexagintillion nine hundred forty six duocentresexagintillion two hundred fifty seven duocenduosexagintillion eight hundred sixteen duocenunsexagintillion seven hundred sixty one duocensexagintillion eight hundred seventy nine duocennovemquinquagintillion seven hundred twenty one duocenoctoquinquagintillion seven hundred forty three duocenseptenquinquagintillion five hundred twenty two duocensexquinquagintillion five hundred seventy seven duocenquinquinquagintillion nine hundred fifty five duocenquattuorquinquagintillion nine hundred sixty two duocentrequinquagintillion six hundred fifteen duocenduoquinquagintillion two hundred fifty duocenunquinquagintillion one hundred one duocenquinquagintillion two hundred sixteen duocennovemquadragintillion one hundred seventy eight duocenoctoquadragintillion three hundred seventeen duocenseptenquadragintillion four hundred seventy three duocensexquadragintillion twenty six duocenquinquadragintillion eight hundred sixty seven duocenquattuorquadragintillion three hundred sixty two duocentrequadragintillion two hundred three duocenduoquadragintillion two hundred forty nine duocenunquadragintillion three hundred forty six duocenquadragintillion seven hundred seventy duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion two hundred sixteen duocenseptentrigintillion seven hundred thirty two duocensextrigintillion eight hundred ten duocenquintrigintillion three hundred eighty five duocenquattuortrigintillion four hundred eighty five duocentretrigintillion one hundred eighty duocenduotrigintillion four hundred ninety three duocenuntrigintillion three hundred eight duocentrigintillion seven hundred forty duocennovemvigintillion four hundred seventy seven duocenoctovigintillion three hundred eighty two duocenseptenvigintillion six hundred sixteen duocensexvigintillion four hundred sixty duocenquinvigintillion sixty two duocenquattuorvigintillion five hundred seventy eight duocentrevigintillion six hundred seventy six duocenduovigintillion five hundred thirty nine duocenunvigintillion three hundred twenty one duocenvigintillion thirty six duocennovemdecillion nine hundred five duocenoctodecillion five hundred twenty five duocenseptendecillion five hundred thirteen duocensexdecillion three hundred thirty six duocenquindecillion two hundred ninety four duocenquattuordecillion seven hundred eighty nine duocentredecillion two hundred ninety three duocenduodecillion two hundred thirty six duocenundecillion two hundred twenty eight duocendecillion three hundred sixty one duocennovemtillion thirty four duocenoctotillion one hundred eighty three duocenseptentillion eight hundred ninety three duocensextillion nine hundred thirty four duocenquintillion six hundred fifty duocenquattuortillion five hundred ninety duocentretillion five hundred sixty three duocenduotillion two hundred eighty duocenuntillion six hundred fourteen duocentillion nine hundred twenty eight cennovemnonagintillion eight hundred twenty eight cenoctononagintillion one hundred ninety nine censeptennonagintillion thirty seven censexnonagintillion seven cenquinnonagintillion seven hundred fifty eight cenquattuornonagintillion seven hundred twenty six centrenonagintillion nine hundred eighty cenduononagintillion three hundred eighty six cenunnonagintillion seven hundred seventeen cennonagintillion forty cennovemoctogintillion one hundred sixty nine cenoctooctogintillion nine hundred twenty eight censeptenoctogintillion seventy eight censexoctogintillion seven hundred fifty one cenquinoctogintillion nine hundred fifty nine cenquattuoroctogintillion one hundred fifteen centreoctogintillion four hundred eight cenduooctogintillion eight hundred thirty three cenunoctogintillion twenty five cenoctogintillion four hundred ninety cennovemseptuagintillion five hundred forty nine cenoctoseptuagintillion four hundred eighty two censeptenseptuagintillion seven hundred nine censexseptuagintillion one hundred ninety three cenquinseptuagintillion two hundred ninety eight cenquattuorseptuagintillion four hundred eleven centreseptuagintillion four hundred ninety two cenduoseptuagintillion one hundred one cenunseptuagintillion five hundred twenty one censeptuagintillion six hundred cennovemsexagintillion two hundred twenty two cenoctosexagintillion five hundred thirty nine censeptensexagintillion six hundred seven censexsexagintillion nine hundred sixteen cenquinsexagintillion seven hundred eleven cenquattuorsexagintillion seven hundred forty seven centresexagintillion four hundred sixty five cenduosexagintillion two hundred fifty eight cenunsexagintillion one hundred eighty nine censexagintillion three hundred sixty one cennovemquinquagintillion one hundred sixty four cenoctoquinquagintillion nine hundred seventy three censeptenquinquagintillion six hundred forty one censexquinquagintillion four hundred ninety four cenquinquinquagintillion eight hundred cenquattuorquinquagintillion three hundred sixty five centrequinquagintillion sixty five cenduoquinquagintillion four hundred eighteen cenunquinquagintillion eight hundred fifty eight cenquinquagintillion one hundred seventy eight cennovemquadragintillion three hundred ninety nine cenoctoquadragintillion eight hundred fifty seven censeptenquadragintillion eight hundred ninety three censexquadragintillion three hundred forty three cenquinquadragintillion three hundred eight cenquattuorquadragintillion six hundred seventy four centrequadragintillion eighty one cenduoquadragintillion six hundred eighty five cenunquadragintillion five hundred fifty one cenquadragintillion five hundred ninety seven cennovemtrigintillion seven hundred twenty six cenoctotrigintillion five hundred seventy four censeptentrigintillion four hundred forty one censextrigintillion three hundred forty eight cenquintrigintillion seven hundred fifty five cenquattuortrigintillion six hundred seventy three centretrigintillion three hundred forty five cenduotrigintillion eight hundred seventy one cenuntrigintillion one hundred sixty three centrigintillion five hundred fifty five cennovemvigintillion eight hundred forty nine cenoctovigintillion eight hundred twenty five censeptenvigintillion four hundred forty four censexvigintillion seven hundred twenty cenquinvigintillion five hundred ten cenquattuorvigintillion one hundred two centrevigintillion eight hundred thirteen cenduovigintillion two hundred fifteen cenunvigintillion five hundred twenty eight cenvigintillion seven hundred sixty nine cennovemdecillion seven hundred fifty six cenoctodecillion eleven censeptendecillion four hundred thirty eight censexdecillion four hundred twelve cenquindecillion fifty cenquattuordecillion nine hundred three centredecillion nine hundred thirty four cenduodecillion two hundred eighty six cenundecillion eight hundred twenty three cendecillion seven hundred nine cennovemtillion one cenoctotillion seven hundred sixty three censeptentillion nine hundred forty four censextillion nine hundred ninety cenquintillion nine hundred sixty five cenquattuortillion six hundred thirty nine centretillion nine hundred ninety one cenduotillion three hundred sixty three cenuntillion five hundred nine centillion five hundred thirty two novemnonagintillion six hundred forty three octononagintillion sixty one septennonagintillion six hundred forty sexnonagintillion eight hundred seventy five quinnonagintillion four hundred twenty one quattuornonagintillion sixty two trenonagintillion six hundred thirty duononagintillion six hundred eighty four unnonagintillion eight hundred fifty one nonagintillion seven hundred eighty novemoctogintillion eight hundred nine octooctogintillion eight hundred twenty two septenoctogintillion five hundred nineteen sexoctogintillion six hundred fifty three quinoctogintillion four hundred ninety four quattuoroctogintillion seventy six treoctogintillion six hundred seventy eight duooctogintillion nine hundred seven unoctogintillion eight hundred octogintillion four hundred thirty seven novemseptuagintillion two hundred eighty five octoseptuagintillion four hundred seventy four septenseptuagintillion four hundred sexseptuagintillion eight hundred twenty eight quinseptuagintillion eight hundred seventy seven quattuorseptuagintillion three hundred eighty two treseptuagintillion four hundred sixty one duoseptuagintillion seventy one unseptuagintillion seven hundred forty four septuagintillion one hundred ninety nine novemsexagintillion two hundred twenty five octosexagintillion seven hundred thirty one septensexagintillion eight hundred eighty nine sexsexagintillion one hundred eighty nine quinsexagintillion two hundred seventy two quattuorsexagintillion five hundred sixty three tresexagintillion two hundred eighty one duosexagintillion four hundred ninety three unsexagintillion fifty four sexagintillion one hundred eight novemquinquagintillion nine hundred twenty six octoquinquagintillion five hundred five septenquinquagintillion two hundred seventy seven sexquinquagintillion nine hundred forty three quinquinquagintillion six hundred twenty six quattuorquinquagintillion seven hundred thirty three trequinquagintillion four hundred fifty six duoquinquagintillion one hundred sixty nine unquinquagintillion four hundred eighty six quinquagintillion six hundred nine novemquadragintillion seven hundred ninety four octoquadragintillion two hundred fifty four septenquadragintillion six hundred sixty eight sexquadragintillion four hundred eighteen quinquadragintillion nine hundred twenty six quattuorquadragintillion eight hundred forty six trequadragintillion seven hundred sixty six duoquadragintillion five hundred sixty five unquadragintillion thirty eight quadragintillion two hundred sixteen novemtrigintillion five hundred eighty two octotrigintillion one hundred twenty six septentrigintillion eight hundred ninety sextrigintillion five hundred fifty six quintrigintillion eight hundred forty four quattuortrigintillion one hundred eighty six tretrigintillion twenty one duotrigintillion six hundred ninety untrigintillion eight hundred forty six trigintillion eight hundred fifty novemvigintillion eight hundred ninety seven octovigintillion six hundred seventeen septenvigintillion seven hundred thirty four sexvigintillion five hundred fifty seven quinvigintillion three hundred seventy quattuorvigintillion nine hundred forty five trevigintillion two hundred seventy duovigintillion nine hundred eighty seven unvigintillion five hundred sixteen vigintillion one hundred thirty one novemdecillion two hundred seventy six octodecillion eight hundred forty one septendecillion sixteen sexdecillion four hundred eighty five quindecillion six hundred eighty eight quattuordecillion one hundred twenty nine tredecillion nine hundred sixty eight duodecillion twenty four undecillion six hundred forty seven decillion one hundred forty seven nonillion four hundred forty octillion twelve septillion nine hundred nineteen sextillion nine hundred fifty five quintillion fifty seven quadrillion eight hundred ninety one trillion eight hundred eighteen billion four hundred nineteen million three hundred eighty four thousand six hundred one",
                NumberStringUtility.numberStringToNumberPhrase("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("thirty five thousand six hundred eighty four point five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("35684.544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("three point five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("three duocenunnonagintillion five hundred sixty eight duocennonagintillion four hundred fifty four duocennovemoctogintillion four hundred seven duocenoctooctogintillion five hundred duocenseptenoctogintillion seven hundred eighty eight duocensexoctogintillion nine hundred thirty five duocenquinoctogintillion two hundred eighty one duocenquattuoroctogintillion two hundred seventy three duocentreoctogintillion seven hundred thirty nine duocenduooctogintillion nine hundred fifty one duocenunoctogintillion one hundred ninety duocenoctogintillion nine hundred eleven duocennovemseptuagintillion five hundred thirty three duocenoctoseptuagintillion three hundred ten duocenseptenseptuagintillion two hundred thirty eight duocensexseptuagintillion six hundred thirty two duocenquinseptuagintillion six hundred eighty nine duocenquattuorseptuagintillion four hundred seventy two duocentreseptuagintillion sixty three duocenduoseptuagintillion fifty three duocenunseptuagintillion four hundred forty nine duocenseptuagintillion eight hundred thirty two duocennovemsexagintillion eighty eight duocenoctosexagintillion two hundred eleven duocenseptensexagintillion five hundred fifty eight duocensexsexagintillion six hundred eighteen duocenquinsexagintillion six hundred twenty five duocenquattuorsexagintillion eighty five duocentresexagintillion two hundred ten duocenduosexagintillion six hundred twenty two duocenunsexagintillion nine hundred fifty seven duocensexagintillion eight hundred eighty four duocennovemquinquagintillion two hundred eighty four duocenoctoquinquagintillion seven hundred seventy nine duocenseptenquinquagintillion one hundred thirty two duocensexquinquagintillion six hundred duocenquinquinquagintillion seventeen duocenquattuorquinquagintillion two hundred forty six duocentrequinquagintillion two hundred fifteen duocenduoquinquagintillion two hundred twenty three duocenunquinquagintillion seven hundred duocenquinquagintillion three hundred ninety four duocennovemquadragintillion one hundred sixty three duocenoctoquadragintillion six hundred seventy seven duocenseptenquadragintillion seven hundred sixteen duocensexquadragintillion two hundred seventy four duocenquinquadragintillion seven hundred ninety nine duocenquattuorquadragintillion seven hundred eighty seven duocentrequadragintillion seven hundred sixty four duocenduoquadragintillion two hundred twenty six duocenunquadragintillion two hundred thirty one duocenquadragintillion one hundred twenty duocennovemtrigintillion eight hundred ninety one duocenoctotrigintillion nine hundred eleven duocenseptentrigintillion nine hundred fifty one duocensextrigintillion three hundred thirty eight duocenquintrigintillion three hundred fifty four duocenquattuortrigintillion one hundred fifteen duocentretrigintillion two hundred fifty five duocenduotrigintillion seven hundred fifteen duocenuntrigintillion one hundred twenty duocentrigintillion three hundred sixty four duocennovemvigintillion nine hundred twenty duocenoctovigintillion seven hundred fifteen duocenseptenvigintillion twenty five duocensexvigintillion one hundred forty six duocenquinvigintillion four hundred ninety nine duocenquattuorvigintillion eight hundred forty two duocentrevigintillion six hundred six duocenduovigintillion one hundred sixty nine duocenunvigintillion six hundred sixty seven duocenvigintillion four hundred seventy seven duocennovemdecillion eight hundred thirty seven duocenoctodecillion six duocenseptendecillion one hundred seventy three duocensexdecillion five hundred duocenquindecillion one hundred twenty three duocenquattuordecillion three hundred forty eight duocentredecillion seven hundred thirty four duocenduodecillion five hundred ninety four duocenundecillion six hundred twenty five duocendecillion seven hundred eighty one duocennovemtillion six hundred seventy six duocenoctotillion one hundred eighty seven duocenseptentillion nine hundred seventy two duocensextillion one hundred seventy four duocenquintillion three hundred fifty two duocenquattuortillion two hundred fifty seven duocentretillion seven hundred ninety five duocenduotillion five hundred ninety six duocenuntillion two hundred sixty one duocentillion five hundred twenty five cennovemnonagintillion ten cenoctononagintillion one hundred twenty one censeptennonagintillion six hundred seventeen censexnonagintillion eight hundred thirty one cenquinnonagintillion seven hundred forty seven cenquattuornonagintillion three hundred two centrenonagintillion six hundred eighty six cenduononagintillion seven hundred thirty six cenunnonagintillion two hundred twenty cennonagintillion three hundred twenty four cennovemoctogintillion nine hundred thirty four cenoctooctogintillion six hundred seventy seven censeptenoctogintillion thirty two censexoctogintillion four hundred twenty one cenquinoctogintillion six hundred seventy three cenquattuoroctogintillion two hundred eighty one centreoctogintillion thirty eight cenduooctogintillion five hundred forty eight cenunoctogintillion five hundred eighteen cenoctogintillion forty nine cennovemseptuagintillion three hundred thirty cenoctoseptuagintillion eight hundred seventy four censeptenseptuagintillion forty seven censexseptuagintillion seven hundred thirty eight cenquinseptuagintillion two hundred sixty one cenquattuorseptuagintillion six hundred forty six centreseptuagintillion six cenduoseptuagintillion two hundred fifty seven cenunseptuagintillion eight hundred sixty seven censeptuagintillion six hundred fifty three cennovemsexagintillion nine hundred thirty two cenoctosexagintillion one hundred three censeptensexagintillion six hundred ninety censexsexagintillion five hundred fifty two cenquinsexagintillion five hundred fifty one cenquattuorsexagintillion three hundred thirty three centresexagintillion six hundred twenty nine cenduosexagintillion four hundred seventy eight cenunsexagintillion nine hundred twenty nine censexagintillion three hundred twenty three cennovemquinquagintillion six hundred twenty two cenoctoquinquagintillion eight hundred thirty six censeptenquinquagintillion one hundred three censexquinquagintillion four hundred eighteen cenquinquinquagintillion three hundred eighty nine cenquattuorquinquagintillion three hundred ninety three centrequinquagintillion four hundred sixty five cenduoquinquagintillion fifty nine cenunquinquagintillion fifty six cenquinquagintillion three hundred twenty eight cennovemquadragintillion sixty one cenoctoquadragintillion four hundred ninety two censeptenquadragintillion eight hundred eighty two censexquadragintillion eight hundred nineteen cenquinquadragintillion nine hundred three cenquattuorquadragintillion seven hundred centrequadragintillion seven hundred seventy five cenduoquadragintillion eight hundred seventy two cenunquadragintillion six hundred ninety eight cenquadragintillion thirty eight cennovemtrigintillion six hundred seventy one cenoctotrigintillion seven hundred four censeptentrigintillion sixteen censextrigintillion nine hundred ninety two cenquintrigintillion eight hundred seven cenquattuortrigintillion eight hundred seventy five centretrigintillion one hundred ninety five cenduotrigintillion nine hundred eleven cenuntrigintillion five hundred forty centrigintillion eight hundred eighty three cennovemvigintillion three hundred two cenoctovigintillion five hundred forty nine censeptenvigintillion fifty four censexvigintillion nine hundred forty eight cenquinvigintillion two hundred seventy cenquattuorvigintillion nine hundred nineteen centrevigintillion three hundred twenty nine cenduovigintillion eight hundred forty one cenunvigintillion one hundred forty nine cenvigintillion two hundred ten cennovemdecillion one hundred fifty two cenoctodecillion one hundred sixty censeptendecillion twenty two censexdecillion two hundred fifty three cenquindecillion nine hundred sixty cenquattuordecillion seven hundred ninety one centredecillion six hundred seventy one cenduodecillion one hundred seventy four cenundecillion seven hundred forty six cendecillion five hundred twenty five cennovemtillion eight hundred eighteen cenoctotillion nine hundred thirty six censeptentillion one hundred sixteen censextillion four hundred ninety seven cenquintillion three hundred sixty four cenquattuortillion one hundred forty nine centretillion four hundred eighty cenduotillion thirty six cenuntillion five hundred six centillion five hundred forty one novemnonagintillion eight hundred eighty five octononagintillion eight hundred seventeen septennonagintillion eight hundred thirty nine sexnonagintillion nine hundred eighty five quinnonagintillion seven hundred eighty nine quattuornonagintillion three hundred thirty four trenonagintillion three hundred thirty duononagintillion eight hundred sixty seven unnonagintillion four hundred eight nonagintillion one hundred sixty eight novemoctogintillion five hundred fifty five octooctogintillion one hundred fifty nine septenoctogintillion seven hundred seventy two sexoctogintillion six hundred fifty seven quinoctogintillion four hundred forty four quattuoroctogintillion one hundred thirty four treoctogintillion eight hundred seventy five duooctogintillion five hundred sixty seven unoctogintillion three hundred thirty four octogintillion five hundred eighty seven novemseptuagintillion one hundred sixteen octoseptuagintillion three hundred fifty five septenseptuagintillion five hundred eighty four sexseptuagintillion nine hundred eighty two quinseptuagintillion five hundred forty four quattuorseptuagintillion four hundred seventy two treseptuagintillion fifty one duoseptuagintillion ten unseptuagintillion two hundred eighty one septuagintillion three hundred twenty one novemsexagintillion five hundred fifty two octosexagintillion eight hundred seventy six septensexagintillion nine hundred seventy five sexsexagintillion six hundred one quinsexagintillion one hundred forty three quattuorsexagintillion eight hundred forty one tresexagintillion two hundred five duosexagintillion ninety unsexagintillion three hundred ninety three sexagintillion four hundred twenty eight novemquinquagintillion six hundred eighty two octoquinquagintillion three hundred seventy septenquinquagintillion nine hundred sexquinquagintillion one hundred seventy six quinquinquagintillion three hundred ninety four quattuorquinquagintillion four hundred ninety nine trequinquagintillion ninety six duoquinquagintillion five hundred sixty three unquinquagintillion nine hundred ninety nine quinquagintillion one hundred thirty six novemquadragintillion three hundred fifty octoquadragintillion nine hundred fifty three septenquadragintillion two hundred sixty four sexquadragintillion three hundred six quinquadragintillion one hundred sixty four quattuorquadragintillion eighty seven trequadragintillion five hundred forty two duoquadragintillion one hundred six unquadragintillion two hundred sixty three quadragintillion sixty eight novemtrigintillion four hundred eighty five octotrigintillion one hundred seventy eight septentrigintillion eighty sextrigintillion nine hundred eighty two quintrigintillion two hundred fifty one quattuortrigintillion nine hundred sixty five tretrigintillion three hundred forty nine duotrigintillion four hundred seven untrigintillion six hundred sixty seven trigintillion eight hundred ninety novemvigintillion seven hundred eighty octovigintillion forty three septenvigintillion seven hundred twenty eight sexvigintillion five hundred forty seven quinvigintillion four hundred forty quattuorvigintillion eighty two trevigintillion eight hundred eighty seven duovigintillion seven hundred thirty eight unvigintillion two hundred forty six vigintillion one hundred seven novemdecillion one hundred seventy four octodecillion four hundred nineteen septendecillion nine hundred twenty two sexdecillion five hundred seventy three quindecillion one hundred eighty eight quattuordecillion nine hundred eighteen tredecillion nine hundred twenty seven duodecillion two hundred fifty six undecillion three hundred twenty eight decillion one hundred forty nine nonillion three hundred five octillion four hundred ten septillion eight hundred ninety two sextillion six hundred fifty quintillion five hundred twenty seven quadrillion seven hundred ninety four trillion three hundred sixty two billion six hundred seventy three million three hundred forty five thousand six hundred sixteen point nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.9486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("three trecenquadragintillion five hundred sixty eight trecennovemtrigintillion four hundred fifty four trecenoctotrigintillion four hundred seven trecenseptentrigintillion five hundred trecensextrigintillion seven hundred eighty eight trecenquintrigintillion nine hundred thirty five trecenquattuortrigintillion two hundred eighty one trecentretrigintillion two hundred seventy three trecenduotrigintillion seven hundred thirty nine trecenuntrigintillion nine hundred fifty one trecentrigintillion one hundred ninety trecennovemvigintillion nine hundred eleven trecenoctovigintillion five hundred thirty three trecenseptenvigintillion three hundred ten trecensexvigintillion two hundred thirty eight trecenquinvigintillion six hundred thirty two trecenquattuorvigintillion six hundred eighty nine trecentrevigintillion four hundred seventy two trecenduovigintillion sixty three trecenunvigintillion fifty three trecenvigintillion four hundred forty nine trecennovemdecillion eight hundred thirty two trecenoctodecillion eighty eight trecenseptendecillion two hundred eleven trecensexdecillion five hundred fifty eight trecenquindecillion six hundred eighteen trecenquattuordecillion six hundred twenty five trecentredecillion eighty five trecenduodecillion two hundred ten trecenundecillion six hundred twenty two trecendecillion nine hundred fifty seven trecennovemtillion eight hundred eighty four trecenoctotillion two hundred eighty four trecenseptentillion seven hundred seventy nine trecensextillion one hundred thirty two trecenquintillion six hundred trecenquattuortillion seventeen trecentretillion two hundred forty six trecenduotillion two hundred fifteen trecenuntillion two hundred twenty three trecentillion seven hundred duocennovemnonagintillion three hundred ninety four duocenoctononagintillion one hundred sixty three duocenseptennonagintillion six hundred seventy seven duocensexnonagintillion seven hundred sixteen duocenquinnonagintillion two hundred seventy four duocenquattuornonagintillion seven hundred ninety nine duocentrenonagintillion seven hundred eighty seven duocenduononagintillion seven hundred sixty four duocenunnonagintillion two hundred twenty six duocennonagintillion two hundred thirty one duocennovemoctogintillion one hundred twenty duocenoctooctogintillion eight hundred ninety one duocenseptenoctogintillion nine hundred eleven duocensexoctogintillion nine hundred fifty one duocenquinoctogintillion three hundred thirty eight duocenquattuoroctogintillion three hundred fifty four duocentreoctogintillion one hundred fifteen duocenduooctogintillion two hundred fifty five duocenunoctogintillion seven hundred fifteen duocenoctogintillion one hundred twenty duocennovemseptuagintillion three hundred sixty four duocenoctoseptuagintillion nine hundred twenty duocenseptenseptuagintillion seven hundred fifteen duocensexseptuagintillion twenty five duocenquinseptuagintillion one hundred forty six duocenquattuorseptuagintillion four hundred ninety nine duocentreseptuagintillion eight hundred forty two duocenduoseptuagintillion six hundred six duocenunseptuagintillion one hundred sixty nine duocenseptuagintillion six hundred sixty seven duocennovemsexagintillion four hundred seventy seven duocenoctosexagintillion eight hundred thirty seven duocenseptensexagintillion six duocensexsexagintillion one hundred seventy three duocenquinsexagintillion five hundred duocenquattuorsexagintillion one hundred twenty three duocentresexagintillion three hundred forty eight duocenduosexagintillion seven hundred thirty four duocenunsexagintillion five hundred ninety four duocensexagintillion six hundred twenty five duocennovemquinquagintillion seven hundred eighty one duocenoctoquinquagintillion six hundred seventy six duocenseptenquinquagintillion one hundred eighty seven duocensexquinquagintillion nine hundred seventy two duocenquinquinquagintillion one hundred seventy four duocenquattuorquinquagintillion three hundred fifty two duocentrequinquagintillion two hundred fifty seven duocenduoquinquagintillion seven hundred ninety five duocenunquinquagintillion five hundred ninety six duocenquinquagintillion two hundred sixty one duocennovemquadragintillion five hundred twenty five duocenoctoquadragintillion ten duocenseptenquadragintillion one hundred twenty one duocensexquadragintillion six hundred seventeen duocenquinquadragintillion eight hundred thirty one duocenquattuorquadragintillion seven hundred forty seven duocentrequadragintillion three hundred two duocenduoquadragintillion six hundred eighty six duocenunquadragintillion seven hundred thirty six duocenquadragintillion two hundred twenty duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion nine hundred thirty four duocenseptentrigintillion six hundred seventy seven duocensextrigintillion thirty two duocenquintrigintillion four hundred twenty one duocenquattuortrigintillion six hundred seventy three duocentretrigintillion two hundred eighty one duocenduotrigintillion thirty eight duocenuntrigintillion five hundred forty eight duocentrigintillion five hundred eighteen duocennovemvigintillion forty nine duocenoctovigintillion three hundred thirty duocenseptenvigintillion eight hundred seventy four duocensexvigintillion forty seven duocenquinvigintillion seven hundred thirty eight duocenquattuorvigintillion two hundred sixty one duocentrevigintillion six hundred forty six duocenduovigintillion six duocenunvigintillion two hundred fifty seven duocenvigintillion eight hundred sixty seven duocennovemdecillion six hundred fifty three duocenoctodecillion nine hundred thirty two duocenseptendecillion one hundred three duocensexdecillion six hundred ninety duocenquindecillion five hundred fifty two duocenquattuordecillion five hundred fifty one duocentredecillion three hundred thirty three duocenduodecillion six hundred twenty nine duocenundecillion four hundred seventy eight duocendecillion nine hundred twenty nine duocennovemtillion three hundred twenty three duocenoctotillion six hundred twenty two duocenseptentillion eight hundred thirty six duocensextillion one hundred three duocenquintillion four hundred eighteen duocenquattuortillion three hundred eighty nine duocentretillion three hundred ninety three duocenduotillion four hundred sixty five duocenuntillion fifty nine duocentillion fifty six cennovemnonagintillion three hundred twenty eight cenoctononagintillion sixty one censeptennonagintillion four hundred ninety two censexnonagintillion eight hundred eighty two cenquinnonagintillion eight hundred nineteen cenquattuornonagintillion nine hundred three centrenonagintillion seven hundred cenduononagintillion seven hundred seventy five cenunnonagintillion eight hundred seventy two cennonagintillion six hundred ninety eight cennovemoctogintillion thirty eight cenoctooctogintillion six hundred seventy one censeptenoctogintillion seven hundred four censexoctogintillion sixteen cenquinoctogintillion nine hundred ninety two cenquattuoroctogintillion eight hundred seven centreoctogintillion eight hundred seventy five cenduooctogintillion one hundred ninety five cenunoctogintillion nine hundred eleven cenoctogintillion five hundred forty cennovemseptuagintillion eight hundred eighty three cenoctoseptuagintillion three hundred two censeptenseptuagintillion five hundred forty nine censexseptuagintillion fifty four cenquinseptuagintillion nine hundred forty eight cenquattuorseptuagintillion two hundred seventy centreseptuagintillion nine hundred nineteen cenduoseptuagintillion three hundred twenty nine cenunseptuagintillion eight hundred forty one censeptuagintillion one hundred forty nine cennovemsexagintillion two hundred ten cenoctosexagintillion one hundred fifty two censeptensexagintillion one hundred sixty censexsexagintillion twenty two cenquinsexagintillion two hundred fifty three cenquattuorsexagintillion nine hundred sixty centresexagintillion seven hundred ninety one cenduosexagintillion six hundred seventy one cenunsexagintillion one hundred seventy four censexagintillion seven hundred forty six cennovemquinquagintillion five hundred twenty five cenoctoquinquagintillion eight hundred eighteen censeptenquinquagintillion nine hundred thirty six censexquinquagintillion one hundred sixteen cenquinquinquagintillion four hundred ninety seven cenquattuorquinquagintillion three hundred sixty four centrequinquagintillion one hundred forty nine cenduoquinquagintillion four hundred eighty cenunquinquagintillion thirty six cenquinquagintillion five hundred six cennovemquadragintillion five hundred forty one cenoctoquadragintillion eight hundred eighty five censeptenquadragintillion eight hundred seventeen censexquadragintillion eight hundred thirty nine cenquinquadragintillion nine hundred eighty five cenquattuorquadragintillion seven hundred eighty nine centrequadragintillion three hundred thirty four cenduoquadragintillion three hundred thirty cenunquadragintillion eight hundred sixty seven cenquadragintillion four hundred eight cennovemtrigintillion one hundred sixty eight cenoctotrigintillion five hundred fifty five censeptentrigintillion one hundred fifty nine censextrigintillion seven hundred seventy two cenquintrigintillion six hundred fifty seven cenquattuortrigintillion four hundred forty four centretrigintillion one hundred thirty four cenduotrigintillion eight hundred seventy five cenuntrigintillion five hundred sixty seven centrigintillion three hundred thirty four cennovemvigintillion five hundred eighty seven cenoctovigintillion one hundred sixteen censeptenvigintillion three hundred fifty five censexvigintillion five hundred eighty four cenquinvigintillion nine hundred eighty two cenquattuorvigintillion five hundred forty four centrevigintillion four hundred seventy two cenduovigintillion fifty one cenunvigintillion ten cenvigintillion two hundred eighty one cennovemdecillion three hundred twenty one cenoctodecillion five hundred fifty two censeptendecillion eight hundred seventy six censexdecillion nine hundred seventy five cenquindecillion six hundred one cenquattuordecillion one hundred forty three centredecillion eight hundred forty one cenduodecillion two hundred five cenundecillion ninety cendecillion three hundred ninety three cennovemtillion four hundred twenty eight cenoctotillion six hundred eighty two censeptentillion three hundred seventy censextillion nine hundred cenquintillion one hundred seventy six cenquattuortillion three hundred ninety four centretillion four hundred ninety nine cenduotillion ninety six cenuntillion five hundred sixty three centillion nine hundred ninety nine novemnonagintillion one hundred thirty six octononagintillion three hundred fifty septennonagintillion nine hundred fifty three sexnonagintillion two hundred sixty four quinnonagintillion three hundred six quattuornonagintillion one hundred sixty four trenonagintillion eighty seven duononagintillion five hundred forty two unnonagintillion one hundred six nonagintillion two hundred sixty three novemoctogintillion sixty eight octooctogintillion four hundred eighty five septenoctogintillion one hundred seventy eight sexoctogintillion eighty quinoctogintillion nine hundred eighty two quattuoroctogintillion two hundred fifty one treoctogintillion nine hundred sixty five duooctogintillion three hundred forty nine unoctogintillion four hundred seven octogintillion six hundred sixty seven novemseptuagintillion eight hundred ninety octoseptuagintillion seven hundred eighty septenseptuagintillion forty three sexseptuagintillion seven hundred twenty eight quinseptuagintillion five hundred forty seven quattuorseptuagintillion four hundred forty treseptuagintillion eighty two duoseptuagintillion eight hundred eighty seven unseptuagintillion seven hundred thirty eight septuagintillion two hundred forty six novemsexagintillion one hundred seven octosexagintillion one hundred seventy four septensexagintillion four hundred nineteen sexsexagintillion nine hundred twenty two quinsexagintillion five hundred seventy three quattuorsexagintillion one hundred eighty eight tresexagintillion nine hundred eighteen duosexagintillion nine hundred twenty seven unsexagintillion two hundred fifty six sexagintillion three hundred twenty eight novemquinquagintillion one hundred forty nine octoquinquagintillion three hundred five septenquinquagintillion four hundred ten sexquinquagintillion eight hundred ninety two quinquinquagintillion six hundred fifty quattuorquinquagintillion five hundred twenty seven trequinquagintillion seven hundred ninety four duoquinquagintillion three hundred sixty two unquinquagintillion six hundred seventy three quinquagintillion three hundred forty five novemquadragintillion six hundred sixteen octoquadragintillion nine hundred forty eight septenquadragintillion six hundred sixty sexquadragintillion nine hundred seventy nine quinquadragintillion four hundred twenty five quattuorquadragintillion four hundred sixty six trequadragintillion eight hundred forty one duoquadragintillion eight hundred ninety two unquadragintillion six hundred eighty four quadragintillion six hundred seventy six novemtrigintillion six hundred fifty six octotrigintillion five hundred three septentrigintillion eight hundred twenty one sextrigintillion six hundred fifty eight quintrigintillion two hundred twelve quattuortrigintillion six hundred eighty nine tretrigintillion fifty five duotrigintillion six hundred eighty four untrigintillion four hundred eighteen trigintillion six hundred two novemvigintillion one hundred sixty nine octovigintillion eighty four septenvigintillion six hundred eighty five sexvigintillion eighty nine quinvigintillion seven hundred sixty one quattuorvigintillion seven hundred seventy three trevigintillion four hundred fifty five duovigintillion seven hundred thirty seven unvigintillion ninety four vigintillion five hundred twenty seven novemdecillion ninety eight octodecillion seven hundred fifty one septendecillion six hundred thirteen sexdecillion one hundred twenty seven quindecillion six hundred eighty four quattuordecillion one hundred one tredecillion six hundred forty eight duodecillion five hundred sixty eight undecillion eight hundred twelve decillion nine hundred ninety six nonillion eight hundred two octillion four hundred sixty four septillion seven hundred fourteen sextillion seven hundred forty four quintillion one quadrillion two hundred ninety one trillion nine hundred ninety five billion five hundred five million seven hundred eighty nine thousand one hundred eighty one point eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181.8419384601"));
        Assert.assertEquals("three hundred fifty six trecennovemtrigintillion eight hundred forty five trecenoctotrigintillion four hundred forty trecenseptentrigintillion seven hundred fifty trecensextrigintillion seventy eight trecenquintrigintillion eight hundred ninety three trecenquattuortrigintillion five hundred twenty eight trecentretrigintillion one hundred twenty seven trecenduotrigintillion three hundred seventy three trecenuntrigintillion nine hundred ninety five trecentrigintillion one hundred nineteen trecennovemvigintillion ninety one trecenoctovigintillion one hundred fifty three trecenseptenvigintillion three hundred thirty one trecensexvigintillion twenty three trecenquinvigintillion eight hundred sixty three trecenquattuorvigintillion two hundred sixty eight trecentrevigintillion nine hundred forty seven trecenduovigintillion two hundred six trecenunvigintillion three hundred five trecenvigintillion three hundred forty four trecennovemdecillion nine hundred eighty three trecenoctodecillion two hundred eight trecenseptendecillion eight hundred twenty one trecensexdecillion one hundred fifty five trecenquindecillion eight hundred sixty one trecenquattuordecillion eight hundred sixty two trecentredecillion five hundred eight trecenduodecillion five hundred twenty one trecenundecillion sixty two trecendecillion two hundred ninety five trecennovemtillion seven hundred eighty eight trecenoctotillion four hundred twenty eight trecenseptentillion four hundred seventy seven trecensextillion nine hundred thirteen trecenquintillion two hundred sixty trecenquattuortillion one trecentretillion seven hundred twenty four trecenduotillion six hundred twenty one trecenuntillion five hundred twenty two trecentillion three hundred seventy duocennovemnonagintillion thirty nine duocenoctononagintillion four hundred sixteen duocenseptennonagintillion three hundred sixty seven duocensexnonagintillion seven hundred seventy one duocenquinnonagintillion six hundred twenty seven duocenquattuornonagintillion four hundred seventy nine duocentrenonagintillion nine hundred seventy eight duocenduononagintillion seven hundred seventy six duocenunnonagintillion four hundred twenty two duocennonagintillion six hundred twenty three duocennovemoctogintillion one hundred twelve duocenoctooctogintillion eighty nine duocenseptenoctogintillion one hundred ninety one duocensexoctogintillion one hundred ninety five duocenquinoctogintillion one hundred thirty three duocenquattuoroctogintillion eight hundred thirty five duocentreoctogintillion four hundred eleven duocenduooctogintillion five hundred twenty five duocenunoctogintillion five hundred seventy one duocenoctogintillion five hundred twelve duocennovemseptuagintillion thirty six duocenoctoseptuagintillion four hundred ninety two duocenseptenseptuagintillion seventy one duocensexseptuagintillion five hundred two duocenquinseptuagintillion five hundred fourteen duocenquattuorseptuagintillion six hundred forty nine duocentreseptuagintillion nine hundred eighty four duocenduoseptuagintillion two hundred sixty duocenunseptuagintillion six hundred sixteen duocenseptuagintillion nine hundred sixty six duocennovemsexagintillion seven hundred forty seven duocenoctosexagintillion seven hundred eighty three duocenseptensexagintillion seven hundred duocensexsexagintillion six hundred seventeen duocenquinsexagintillion three hundred fifty duocenquattuorsexagintillion twelve duocentresexagintillion three hundred thirty four duocenduosexagintillion eight hundred seventy three duocenunsexagintillion four hundred fifty nine duocensexagintillion four hundred sixty two duocennovemquinquagintillion five hundred seventy eight duocenoctoquinquagintillion one hundred sixty seven duocenseptenquinquagintillion six hundred eighteen duocensexquinquagintillion seven hundred ninety seven duocenquinquinquagintillion two hundred seventeen duocenquattuorquinquagintillion four hundred thirty five duocentrequinquagintillion two hundred twenty five duocenduoquinquagintillion seven hundred seventy nine duocenunquinquagintillion five hundred fifty nine duocenquinquagintillion six hundred twenty six duocennovemquadragintillion one hundred fifty two duocenoctoquadragintillion five hundred one duocenseptenquadragintillion twelve duocensexquadragintillion one hundred sixty one duocenquinquadragintillion seven hundred eighty three duocenquattuorquadragintillion one hundred seventy four duocentrequadragintillion seven hundred thirty duocenduoquadragintillion two hundred sixty eight duocenunquadragintillion six hundred seventy three duocenquadragintillion six hundred twenty two duocennovemtrigintillion thirty two duocenoctotrigintillion four hundred ninety three duocenseptentrigintillion four hundred sixty seven duocensextrigintillion seven hundred three duocenquintrigintillion two hundred forty two duocenquattuortrigintillion one hundred sixty seven duocentretrigintillion three hundred twenty eight duocenduotrigintillion one hundred three duocenuntrigintillion eight hundred fifty four duocentrigintillion eight hundred fifty one duocennovemvigintillion eight hundred four duocenoctovigintillion nine hundred thirty three duocenseptenvigintillion eighty seven duocensexvigintillion four hundred four duocenquinvigintillion seven hundred seventy three duocenquattuorvigintillion eight hundred twenty six duocentrevigintillion one hundred sixty four duocenduovigintillion six hundred duocenunvigintillion six hundred twenty five duocenvigintillion seven hundred eighty six duocennovemdecillion seven hundred sixty five duocenoctodecillion three hundred ninety three duocenseptendecillion two hundred ten duocensexdecillion three hundred sixty nine duocenquindecillion fifty five duocenquattuordecillion two hundred fifty five duocentredecillion one hundred thirty three duocenduodecillion three hundred sixty two duocenundecillion nine hundred forty seven duocendecillion eight hundred ninety two duocennovemtillion nine hundred thirty two duocenoctotillion three hundred sixty two duocenseptentillion two hundred eighty three duocensextillion six hundred ten duocenquintillion three hundred forty one duocenquattuortillion eight hundred thirty eight duocentretillion nine hundred thirty nine duocenduotillion three hundred forty six duocenuntillion five hundred five duocentillion nine hundred five cennovemnonagintillion six hundred thirty two cenoctononagintillion eight hundred six censeptennonagintillion one hundred forty nine censexnonagintillion two hundred eighty eight cenquinnonagintillion two hundred eighty one cenquattuornonagintillion nine hundred ninety centrenonagintillion three hundred seventy cenduononagintillion seventy seven cenunnonagintillion five hundred eighty seven cennonagintillion two hundred sixty nine cennovemoctogintillion eight hundred three cenoctooctogintillion eight hundred sixty seven censeptenoctogintillion one hundred seventy censexoctogintillion four hundred one cenquinoctogintillion six hundred ninety nine cenquattuoroctogintillion two hundred eighty centreoctogintillion seven hundred eighty seven cenduooctogintillion five hundred nineteen cenunoctogintillion five hundred ninety one cenoctogintillion one hundred fifty four cennovemseptuagintillion eighty eight cenoctoseptuagintillion three hundred thirty censeptenseptuagintillion two hundred fifty four censexseptuagintillion nine hundred five cenquinseptuagintillion four hundred ninety four cenquattuorseptuagintillion eight hundred twenty seven centreseptuagintillion ninety one cenduoseptuagintillion nine hundred thirty two cenunseptuagintillion nine hundred eighty four censeptuagintillion one hundred fourteen cennovemsexagintillion nine hundred twenty one cenoctosexagintillion fifteen censeptensexagintillion two hundred sixteen censexsexagintillion two cenquinsexagintillion two hundred twenty five cenquattuorsexagintillion three hundred ninety six centresexagintillion seventy nine cenduosexagintillion one hundred sixty seven cenunsexagintillion one hundred seventeen censexagintillion four hundred seventy four cennovemquinquagintillion six hundred fifty two cenoctoquinquagintillion five hundred eighty one censeptenquinquagintillion eight hundred ninety three censexquinquagintillion six hundred eleven cenquinquinquagintillion six hundred forty nine cenquattuorquinquagintillion seven hundred thirty six centrequinquagintillion four hundred fourteen cenduoquinquagintillion nine hundred forty eight cenunquinquagintillion three cenquinquagintillion six hundred fifty cennovemquadragintillion six hundred fifty four cenoctoquadragintillion one hundred eighty eight censeptenquadragintillion five hundred eighty one censexquadragintillion seven hundred eighty three cenquinquadragintillion nine hundred ninety eight cenquattuorquadragintillion five hundred seventy eight centrequadragintillion nine hundred thirty three cenduoquadragintillion four hundred thirty three cenunquadragintillion eighty six cenquadragintillion seven hundred forty cennovemtrigintillion eight hundred sixteen cenoctotrigintillion eight hundred fifty five censeptentrigintillion five hundred fifteen censextrigintillion nine hundred seventy seven cenquintrigintillion two hundred sixty five cenquattuortrigintillion seven hundred forty four centretrigintillion four hundred thirteen cenduotrigintillion four hundred eighty seven cenuntrigintillion five hundred fifty six centrigintillion seven hundred thirty three cennovemvigintillion four hundred fifty eight cenoctovigintillion seven hundred eleven censeptenvigintillion six hundred thirty five censexvigintillion five hundred fifty eight cenquinvigintillion four hundred ninety eight cenquattuorvigintillion two hundred fifty four centrevigintillion four hundred forty seven cenduovigintillion two hundred five cenunvigintillion one hundred one cenvigintillion twenty eight cennovemdecillion one hundred thirty two cenoctodecillion one hundred fifty five censeptendecillion two hundred eighty seven censexdecillion six hundred ninety seven cenquindecillion five hundred sixty cenquattuordecillion one hundred fourteen centredecillion three hundred eighty four cenduodecillion one hundred twenty cenundecillion five hundred nine cendecillion thirty nine cennovemtillion three hundred forty two cenoctotillion eight hundred sixty eight censeptentillion two hundred thirty seven censextillion ninety cenquintillion seventeen cenquattuortillion six hundred thirty nine centretillion four hundred forty nine cenduotillion nine hundred nine cenuntillion six hundred fifty six centillion three hundred ninety nine novemnonagintillion nine hundred thirteen octononagintillion six hundred thirty five septennonagintillion ninety five sexnonagintillion three hundred twenty six quinnonagintillion four hundred thirty quattuornonagintillion six hundred sixteen trenonagintillion four hundred eight duononagintillion seven hundred fifty four unnonagintillion two hundred ten nonagintillion six hundred twenty six novemoctogintillion three hundred six octooctogintillion eight hundred forty eight septenoctogintillion five hundred seventeen sexoctogintillion eight hundred eight quinoctogintillion ninety eight quattuoroctogintillion two hundred twenty five treoctogintillion one hundred ninety six duooctogintillion five hundred thirty four unoctogintillion nine hundred forty octogintillion seven hundred sixty six novemseptuagintillion seven hundred eighty nine octoseptuagintillion seventy eight septenseptuagintillion four sexseptuagintillion three hundred seventy two quinseptuagintillion eight hundred fifty four quattuorseptuagintillion seven hundred forty four treseptuagintillion eight duoseptuagintillion two hundred eighty eight unseptuagintillion seven hundred seventy three septuagintillion eight hundred twenty four novemsexagintillion six hundred ten octosexagintillion seven hundred seventeen septensexagintillion four hundred forty one sexsexagintillion nine hundred ninety two quinsexagintillion two hundred fifty seven quattuorsexagintillion three hundred eighteen tresexagintillion eight hundred ninety one duosexagintillion eight hundred ninety two unsexagintillion seven hundred twenty five sexagintillion six hundred thirty two novemquinquagintillion eight hundred fourteen octoquinquagintillion nine hundred thirty septenquinquagintillion five hundred forty one sexquinquagintillion eighty nine quinquinquagintillion two hundred sixty five quattuorquinquagintillion fifty two trequinquagintillion seven hundred seventy nine duoquinquagintillion four hundred thirty six unquinquagintillion two hundred sixty seven quinquagintillion three hundred thirty four novemquadragintillion five hundred sixty one octoquadragintillion six hundred ninety four septenquadragintillion eight hundred sixty six sexquadragintillion ninety seven quinquadragintillion nine hundred forty two quattuorquadragintillion five hundred forty six trequadragintillion six hundred eighty four duoquadragintillion one hundred eighty nine unquadragintillion two hundred sixty eight quadragintillion four hundred sixty seven novemtrigintillion six hundred sixty five octotrigintillion six hundred fifty septentrigintillion three hundred eighty two sextrigintillion one hundred sixty five quintrigintillion eight hundred twenty one quattuortrigintillion two hundred sixty eight tretrigintillion nine hundred five duotrigintillion five hundred sixty eight untrigintillion four hundred forty one trigintillion eight hundred sixty novemvigintillion two hundred sixteen octovigintillion nine hundred eight septenvigintillion four hundred sixty eight sexvigintillion five hundred eight quinvigintillion nine hundred seventy six quattuorvigintillion one hundred seventy seven trevigintillion three hundred forty five duovigintillion five hundred seventy three unvigintillion seven hundred nine vigintillion four hundred fifty two novemdecillion seven hundred nine octodecillion eight hundred seventy five septendecillion one hundred sixty one sexdecillion three hundred twelve quindecillion seven hundred sixty eight quattuordecillion four hundred ten tredecillion one hundred sixty four duodecillion eight hundred fifty six undecillion eight hundred eighty one decillion two hundred ninety nine nonillion six hundred eighty octillion two hundred forty six septillion four hundred seventy one sextillion four hundred seventy four quintillion four hundred quadrillion one hundred twenty nine trillion one hundred ninety nine billion five hundred fifty million five hundred seventy eight thousand nine hundred eighteen point one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.18419384601"));
        Assert.assertEquals("thirty five trecenquadragintillion six hundred eighty four trecennovemtrigintillion five hundred forty four trecenoctotrigintillion seventy five trecenseptentrigintillion seven trecensextrigintillion eight hundred eighty nine trecenquintrigintillion three hundred fifty two trecenquattuortrigintillion eight hundred twelve trecentretrigintillion seven hundred thirty seven trecenduotrigintillion three hundred ninety nine trecenuntrigintillion five hundred eleven trecentrigintillion nine hundred nine trecennovemvigintillion one hundred fifteen trecenoctovigintillion three hundred thirty three trecenseptenvigintillion one hundred two trecensexvigintillion three hundred eighty six trecenquinvigintillion three hundred twenty six trecenquattuorvigintillion eight hundred ninety four trecentrevigintillion seven hundred twenty trecenduovigintillion six hundred thirty trecenunvigintillion five hundred thirty four trecenvigintillion four hundred ninety eight trecennovemdecillion three hundred twenty trecenoctodecillion eight hundred eighty two trecenseptendecillion one hundred fifteen trecensexdecillion five hundred eighty six trecenquindecillion one hundred eighty six trecenquattuordecillion two hundred fifty trecentredecillion eight hundred fifty two trecenduodecillion one hundred six trecenundecillion two hundred twenty nine trecendecillion five hundred seventy eight trecennovemtillion eight hundred forty two trecenoctotillion eight hundred forty seven trecenseptentillion seven hundred ninety one trecensextillion three hundred twenty six trecenquintillion one hundred seventy two trecentretillion four hundred sixty two trecenduotillion one hundred fifty two trecenuntillion two hundred thirty seven trecentillion three duocennovemnonagintillion nine hundred forty one duocenoctononagintillion six hundred thirty six duocenseptennonagintillion seven hundred seventy seven duocensexnonagintillion one hundred sixty two duocenquinnonagintillion seven hundred forty seven duocenquattuornonagintillion nine hundred ninety seven duocentrenonagintillion eight hundred seventy seven duocenduononagintillion six hundred forty two duocenunnonagintillion two hundred sixty two duocennonagintillion three hundred eleven duocennovemoctogintillion two hundred eight duocenoctooctogintillion nine hundred nineteen duocenseptenoctogintillion one hundred nineteen duocensexoctogintillion five hundred thirteen duocenquinoctogintillion three hundred eighty three duocenquattuoroctogintillion five hundred forty one duocentreoctogintillion one hundred fifty two duocenduooctogintillion five hundred fifty seven duocenunoctogintillion one hundred fifty one duocenoctogintillion two hundred three duocennovemseptuagintillion six hundred forty nine duocenoctoseptuagintillion two hundred seven duocenseptenseptuagintillion one hundred fifty duocensexseptuagintillion two hundred fifty one duocenquinseptuagintillion four hundred sixty four duocenquattuorseptuagintillion nine hundred ninety eight duocentreseptuagintillion four hundred twenty six duocenduoseptuagintillion sixty one duocenunseptuagintillion six hundred ninety six duocenseptuagintillion six hundred seventy four duocennovemsexagintillion seven hundred seventy eight duocenoctosexagintillion three hundred seventy duocenseptensexagintillion sixty one duocensexsexagintillion seven hundred thirty five duocenquinsexagintillion one duocenquattuorsexagintillion two hundred thirty three duocentresexagintillion four hundred eighty seven duocenduosexagintillion three hundred forty five duocenunsexagintillion nine hundred forty six duocensexagintillion two hundred fifty seven duocennovemquinquagintillion eight hundred sixteen duocenoctoquinquagintillion seven hundred sixty one duocenseptenquinquagintillion eight hundred seventy nine duocensexquinquagintillion seven hundred twenty one duocenquinquinquagintillion seven hundred forty three duocenquattuorquinquagintillion five hundred twenty two duocentrequinquagintillion five hundred seventy seven duocenduoquinquagintillion nine hundred fifty five duocenunquinquagintillion nine hundred sixty two duocenquinquagintillion six hundred fifteen duocennovemquadragintillion two hundred fifty duocenoctoquadragintillion one hundred one duocenseptenquadragintillion two hundred sixteen duocensexquadragintillion one hundred seventy eight duocenquinquadragintillion three hundred seventeen duocenquattuorquadragintillion four hundred seventy three duocentrequadragintillion twenty six duocenduoquadragintillion eight hundred sixty seven duocenunquadragintillion three hundred sixty two duocenquadragintillion two hundred three duocennovemtrigintillion two hundred forty nine duocenoctotrigintillion three hundred forty six duocenseptentrigintillion seven hundred seventy duocensextrigintillion three hundred twenty four duocenquintrigintillion two hundred sixteen duocenquattuortrigintillion seven hundred thirty two duocentretrigintillion eight hundred ten duocenduotrigintillion three hundred eighty five duocenuntrigintillion four hundred eighty five duocentrigintillion one hundred eighty duocennovemvigintillion four hundred ninety three duocenoctovigintillion three hundred eight duocenseptenvigintillion seven hundred forty duocensexvigintillion four hundred seventy seven duocenquinvigintillion three hundred eighty two duocenquattuorvigintillion six hundred sixteen duocentrevigintillion four hundred sixty duocenduovigintillion sixty two duocenunvigintillion five hundred seventy eight duocenvigintillion six hundred seventy six duocennovemdecillion five hundred thirty nine duocenoctodecillion three hundred twenty one duocenseptendecillion thirty six duocensexdecillion nine hundred five duocenquindecillion five hundred twenty five duocenquattuordecillion five hundred thirteen duocentredecillion three hundred thirty six duocenduodecillion two hundred ninety four duocenundecillion seven hundred eighty nine duocendecillion two hundred ninety three duocennovemtillion two hundred thirty six duocenoctotillion two hundred twenty eight duocenseptentillion three hundred sixty one duocensextillion thirty four duocenquintillion one hundred eighty three duocenquattuortillion eight hundred ninety three duocentretillion nine hundred thirty four duocenduotillion six hundred fifty duocenuntillion five hundred ninety duocentillion five hundred sixty three cennovemnonagintillion two hundred eighty cenoctononagintillion six hundred fourteen censeptennonagintillion nine hundred twenty eight censexnonagintillion eight hundred twenty eight cenquinnonagintillion one hundred ninety nine cenquattuornonagintillion thirty seven centrenonagintillion seven cenduononagintillion seven hundred fifty eight cenunnonagintillion seven hundred twenty six cennonagintillion nine hundred eighty cennovemoctogintillion three hundred eighty six cenoctooctogintillion seven hundred seventeen censeptenoctogintillion forty censexoctogintillion one hundred sixty nine cenquinoctogintillion nine hundred twenty eight cenquattuoroctogintillion seventy eight centreoctogintillion seven hundred fifty one cenduooctogintillion nine hundred fifty nine cenunoctogintillion one hundred fifteen cenoctogintillion four hundred eight cennovemseptuagintillion eight hundred thirty three cenoctoseptuagintillion twenty five censeptenseptuagintillion four hundred ninety censexseptuagintillion five hundred forty nine cenquinseptuagintillion four hundred eighty two cenquattuorseptuagintillion seven hundred nine centreseptuagintillion one hundred ninety three cenduoseptuagintillion two hundred ninety eight cenunseptuagintillion four hundred eleven censeptuagintillion four hundred ninety two cennovemsexagintillion one hundred one cenoctosexagintillion five hundred twenty one censeptensexagintillion six hundred censexsexagintillion two hundred twenty two cenquinsexagintillion five hundred thirty nine cenquattuorsexagintillion six hundred seven centresexagintillion nine hundred sixteen cenduosexagintillion seven hundred eleven cenunsexagintillion seven hundred forty seven censexagintillion four hundred sixty five cennovemquinquagintillion two hundred fifty eight cenoctoquinquagintillion one hundred eighty nine censeptenquinquagintillion three hundred sixty one censexquinquagintillion one hundred sixty four cenquinquinquagintillion nine hundred seventy three cenquattuorquinquagintillion six hundred forty one centrequinquagintillion four hundred ninety four cenduoquinquagintillion eight hundred cenunquinquagintillion three hundred sixty five cenquinquagintillion sixty five cennovemquadragintillion four hundred eighteen cenoctoquadragintillion eight hundred fifty eight censeptenquadragintillion one hundred seventy eight censexquadragintillion three hundred ninety nine cenquinquadragintillion eight hundred fifty seven cenquattuorquadragintillion eight hundred ninety three centrequadragintillion three hundred forty three cenduoquadragintillion three hundred eight cenunquadragintillion six hundred seventy four cenquadragintillion eighty one cennovemtrigintillion six hundred eighty five cenoctotrigintillion five hundred fifty one censeptentrigintillion five hundred ninety seven censextrigintillion seven hundred twenty six cenquintrigintillion five hundred seventy four cenquattuortrigintillion four hundred forty one centretrigintillion three hundred forty eight cenduotrigintillion seven hundred fifty five cenuntrigintillion six hundred seventy three centrigintillion three hundred forty five cennovemvigintillion eight hundred seventy one cenoctovigintillion one hundred sixty three censeptenvigintillion five hundred fifty five censexvigintillion eight hundred forty nine cenquinvigintillion eight hundred twenty five cenquattuorvigintillion four hundred forty four centrevigintillion seven hundred twenty cenduovigintillion five hundred ten cenunvigintillion one hundred two cenvigintillion eight hundred thirteen cennovemdecillion two hundred fifteen cenoctodecillion five hundred twenty eight censeptendecillion seven hundred sixty nine censexdecillion seven hundred fifty six cenquindecillion eleven cenquattuordecillion four hundred thirty eight centredecillion four hundred twelve cenduodecillion fifty cenundecillion nine hundred three cendecillion nine hundred thirty four cennovemtillion two hundred eighty six cenoctotillion eight hundred twenty three censeptentillion seven hundred nine censextillion one cenquintillion seven hundred sixty three cenquattuortillion nine hundred forty four centretillion nine hundred ninety cenduotillion nine hundred sixty five cenuntillion six hundred thirty nine centillion nine hundred ninety one novemnonagintillion three hundred sixty three octononagintillion five hundred nine septennonagintillion five hundred thirty two sexnonagintillion six hundred forty three quinnonagintillion sixty one quattuornonagintillion six hundred forty trenonagintillion eight hundred seventy five duononagintillion four hundred twenty one unnonagintillion sixty two nonagintillion six hundred thirty novemoctogintillion six hundred eighty four octooctogintillion eight hundred fifty one septenoctogintillion seven hundred eighty sexoctogintillion eight hundred nine quinoctogintillion eight hundred twenty two quattuoroctogintillion five hundred nineteen treoctogintillion six hundred fifty three duooctogintillion four hundred ninety four unoctogintillion seventy six octogintillion six hundred seventy eight novemseptuagintillion nine hundred seven octoseptuagintillion eight hundred septenseptuagintillion four hundred thirty seven sexseptuagintillion two hundred eighty five quinseptuagintillion four hundred seventy four quattuorseptuagintillion four hundred treseptuagintillion eight hundred twenty eight duoseptuagintillion eight hundred seventy seven unseptuagintillion three hundred eighty two septuagintillion four hundred sixty one novemsexagintillion seventy one octosexagintillion seven hundred forty four septensexagintillion one hundred ninety nine sexsexagintillion two hundred twenty five quinsexagintillion seven hundred thirty one quattuorsexagintillion eight hundred eighty nine tresexagintillion one hundred eighty nine duosexagintillion two hundred seventy two unsexagintillion five hundred sixty three sexagintillion two hundred eighty one novemquinquagintillion four hundred ninety three octoquinquagintillion fifty four septenquinquagintillion one hundred eight sexquinquagintillion nine hundred twenty six quinquinquagintillion five hundred five quattuorquinquagintillion two hundred seventy seven trequinquagintillion nine hundred forty three duoquinquagintillion six hundred twenty six unquinquagintillion seven hundred thirty three quinquagintillion four hundred fifty six novemquadragintillion one hundred sixty nine octoquadragintillion four hundred eighty six septenquadragintillion six hundred nine sexquadragintillion seven hundred ninety four quinquadragintillion two hundred fifty four quattuorquadragintillion six hundred sixty eight trequadragintillion four hundred eighteen duoquadragintillion nine hundred twenty six unquadragintillion eight hundred forty six quadragintillion seven hundred sixty six novemtrigintillion five hundred sixty five octotrigintillion thirty eight septentrigintillion two hundred sixteen sextrigintillion five hundred eighty two quintrigintillion one hundred twenty six quattuortrigintillion eight hundred ninety tretrigintillion five hundred fifty six duotrigintillion eight hundred forty four untrigintillion one hundred eighty six trigintillion twenty one novemvigintillion six hundred ninety octovigintillion eight hundred forty six septenvigintillion eight hundred fifty sexvigintillion eight hundred ninety seven quinvigintillion six hundred seventeen quattuorvigintillion seven hundred thirty four trevigintillion five hundred fifty seven duovigintillion three hundred seventy unvigintillion nine hundred forty five vigintillion two hundred seventy novemdecillion nine hundred eighty seven octodecillion five hundred sixteen septendecillion one hundred thirty one sexdecillion two hundred seventy six quindecillion eight hundred forty one quattuordecillion sixteen tredecillion four hundred eighty five duodecillion six hundred eighty eight undecillion one hundred twenty nine decillion nine hundred sixty eight nonillion twenty four octillion six hundred forty seven septillion one hundred forty seven sextillion four hundred forty quintillion twelve quadrillion nine hundred nineteen trillion nine hundred fifty five billion fifty seven million eight hundred ninety one thousand eight hundred eighteen point four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601"));
        Assert.assertEquals("point three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("point zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.00000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("three decillionths five hundred sixty eight undecillionths four hundred fifty four duodecillionths four hundred seven tredecillionths five hundred quattuordecillionths seven hundred eighty eight quindecillionths nine hundred thirty five sexdecillionths two hundred eighty one septendecillionths two hundred seventy three octodecillionths seven hundred thirty nine novemdecillionths nine hundred fifty one vigintillionths one hundred ninety unvigintillionths nine hundred eleven duovigintillionths five hundred thirty three trevigintillionths three hundred ten quattuorvigintillionths two hundred thirty eight quinvigintillionths six hundred thirty two sexvigintillionths six hundred eighty nine septenvigintillionths four hundred seventy two octovigintillionths sixty three novemvigintillionths fifty three trigintillionths four hundred forty nine untrigintillionths eight hundred thirty two duotrigintillionths eighty eight tretrigintillionths two hundred eleven quattuortrigintillionths five hundred fifty eight quintrigintillionths six hundred eighteen sextrigintillionths six hundred twenty five septentrigintillionths eighty five octotrigintillionths two hundred ten novemtrigintillionths six hundred twenty two quadragintillionths nine hundred fifty seven unquadragintillionths eight hundred eighty four duoquadragintillionths two hundred eighty four trequadragintillionths seven hundred seventy nine quattuorquadragintillionths one hundred thirty two quinquadragintillionths six hundred sexquadragintillionths seventeen septenquadragintillionths two hundred forty six octoquadragintillionths two hundred fifteen novemquadragintillionths two hundred twenty three quinquagintillionths seven hundred unquinquagintillionths three hundred ninety four duoquinquagintillionths one hundred sixty three trequinquagintillionths six hundred seventy seven quattuorquinquagintillionths seven hundred sixteen quinquinquagintillionths two hundred seventy four sexquinquagintillionths seven hundred ninety nine septenquinquagintillionths seven hundred eighty seven octoquinquagintillionths seven hundred sixty four novemquinquagintillionths two hundred twenty six sexagintillionths two hundred thirty one unsexagintillionths one hundred twenty duosexagintillionths eight hundred ninety one tresexagintillionths nine hundred eleven quattuorsexagintillionths nine hundred fifty one quinsexagintillionths three hundred thirty eight sexsexagintillionths three hundred fifty four septensexagintillionths one hundred fifteen octosexagintillionths two hundred fifty five novemsexagintillionths seven hundred fifteen septuagintillionths one hundred twenty unseptuagintillionths three hundred sixty four duoseptuagintillionths nine hundred twenty treseptuagintillionths seven hundred fifteen quattuorseptuagintillionths twenty five quinseptuagintillionths one hundred forty six sexseptuagintillionths four hundred ninety nine septenseptuagintillionths eight hundred forty two octoseptuagintillionths six hundred six novemseptuagintillionths one hundred sixty nine octogintillionths six hundred sixty seven unoctogintillionths four hundred seventy seven duooctogintillionths eight hundred thirty seven treoctogintillionths six quattuoroctogintillionths one hundred seventy three quinoctogintillionths five hundred sexoctogintillionths one hundred twenty three septenoctogintillionths three hundred forty eight octooctogintillionths seven hundred thirty four novemoctogintillionths five hundred ninety four nonagintillionths six hundred twenty five unnonagintillionths seven hundred eighty one duononagintillionths six hundred seventy six trenonagintillionths one hundred eighty seven quattuornonagintillionths nine hundred seventy two quinnonagintillionths one hundred seventy four sexnonagintillionths three hundred fifty two septennonagintillionths two hundred fifty seven octononagintillionths seven hundred ninety five novemnonagintillionths five hundred ninety six centillionths two hundred sixty one cenuntillionths five hundred twenty five cenduotillionths ten centretillionths one hundred twenty one cenquattuortillionths six hundred seventeen cenquintillionths eight hundred thirty one censextillionths seven hundred forty seven censeptentillionths three hundred two cenoctotillionths six hundred eighty six cennovemtillionths seven hundred thirty six cendecillionths two hundred twenty cenundecillionths three hundred twenty four cenduodecillionths nine hundred thirty four centredecillionths six hundred seventy seven cenquattuordecillionths thirty two cenquindecillionths four hundred twenty one censexdecillionths six hundred seventy three censeptendecillionths two hundred eighty one cenoctodecillionths thirty eight cennovemdecillionths five hundred forty eight cenvigintillionths five hundred eighteen cenunvigintillionths forty nine cenduovigintillionths three hundred thirty centrevigintillionths eight hundred seventy four cenquattuorvigintillionths forty seven cenquinvigintillionths seven hundred thirty eight censexvigintillionths two hundred sixty one censeptenvigintillionths six hundred forty six cenoctovigintillionths six cennovemvigintillionths two hundred fifty seven centrigintillionths eight hundred sixty seven cenuntrigintillionths six hundred fifty three cenduotrigintillionths nine hundred thirty two centretrigintillionths one hundred three cenquattuortrigintillionths six hundred ninety cenquintrigintillionths five hundred fifty two censextrigintillionths five hundred fifty one censeptentrigintillionths three hundred thirty three cenoctotrigintillionths six hundred twenty nine cennovemtrigintillionths four hundred seventy eight cenquadragintillionths nine hundred twenty nine cenunquadragintillionths three hundred twenty three cenduoquadragintillionths six hundred twenty two centrequadragintillionths eight hundred thirty six cenquattuorquadragintillionths one hundred three cenquinquadragintillionths four hundred eighteen censexquadragintillionths three hundred eighty nine censeptenquadragintillionths three hundred ninety three cenoctoquadragintillionths four hundred sixty five cennovemquadragintillionths fifty nine cenquinquagintillionths fifty six cenunquinquagintillionths three hundred twenty eight cenduoquinquagintillionths sixty one centrequinquagintillionths four hundred ninety two cenquattuorquinquagintillionths eight hundred eighty two cenquinquinquagintillionths eight hundred nineteen censexquinquagintillionths nine hundred three censeptenquinquagintillionths seven hundred cenoctoquinquagintillionths seven hundred seventy five cennovemquinquagintillionths eight hundred seventy two censexagintillionths six hundred ninety eight cenunsexagintillionths thirty eight cenduosexagintillionths six hundred seventy one centresexagintillionths seven hundred four cenquattuorsexagintillionths sixteen cenquinsexagintillionths nine hundred ninety two censexsexagintillionths eight hundred seven censeptensexagintillionths eight hundred seventy five cenoctosexagintillionths one hundred ninety five cennovemsexagintillionths nine hundred eleven censeptuagintillionths five hundred forty cenunseptuagintillionths eight hundred eighty three cenduoseptuagintillionths three hundred two centreseptuagintillionths five hundred forty nine cenquattuorseptuagintillionths fifty four cenquinseptuagintillionths nine hundred forty eight censexseptuagintillionths two hundred seventy censeptenseptuagintillionths nine hundred nineteen cenoctoseptuagintillionths three hundred twenty nine cennovemseptuagintillionths eight hundred forty one cenoctogintillionths one hundred forty nine cenunoctogintillionths two hundred ten cenduooctogintillionths one hundred fifty two centreoctogintillionths one hundred sixty cenquattuoroctogintillionths twenty two cenquinoctogintillionths two hundred fifty three censexoctogintillionths nine hundred sixty censeptenoctogintillionths seven hundred ninety one cenoctooctogintillionths six hundred seventy one cennovemoctogintillionths one hundred seventy four cennonagintillionths seven hundred forty six cenunnonagintillionths five hundred twenty five cenduononagintillionths eight hundred eighteen centrenonagintillionths nine hundred thirty six cenquattuornonagintillionths one hundred sixteen cenquinnonagintillionths four hundred ninety seven censexnonagintillionths three hundred sixty four censeptennonagintillionths one hundred forty nine cenoctononagintillionths four hundred eighty cennovemnonagintillionths thirty six duocentillionths five hundred six duocenuntillionths five hundred forty one duocenduotillionths eight hundred eighty five duocentretillionths eight hundred seventeen duocenquattuortillionths eight hundred thirty nine duocenquintillionths nine hundred eighty five duocensextillionths seven hundred eighty nine duocenseptentillionths three hundred thirty four duocenoctotillionths three hundred thirty duocennovemtillionths eight hundred sixty seven duocendecillionths four hundred eight duocenundecillionths one hundred sixty eight duocenduodecillionths five hundred fifty five duocentredecillionths one hundred fifty nine duocenquattuordecillionths seven hundred seventy two duocenquindecillionths six hundred fifty seven duocensexdecillionths four hundred forty four duocenseptendecillionths one hundred thirty four duocenoctodecillionths eight hundred seventy five duocennovemdecillionths five hundred sixty seven duocenvigintillionths three hundred thirty four duocenunvigintillionths five hundred eighty seven duocenduovigintillionths one hundred sixteen duocentrevigintillionths three hundred fifty five duocenquattuorvigintillionths five hundred eighty four duocenquinvigintillionths nine hundred eighty two duocensexvigintillionths five hundred forty four duocenseptenvigintillionths four hundred seventy two duocenoctovigintillionths fifty one duocennovemvigintillionths ten duocentrigintillionths two hundred eighty one duocenuntrigintillionths three hundred twenty one duocenduotrigintillionths five hundred fifty two duocentretrigintillionths eight hundred seventy six duocenquattuortrigintillionths nine hundred seventy five duocenquintrigintillionths six hundred one duocensextrigintillionths one hundred forty three duocenseptentrigintillionths eight hundred forty one duocenoctotrigintillionths two hundred five duocennovemtrigintillionths ninety duocenquadragintillionths three hundred ninety three duocenunquadragintillionths four hundred twenty eight duocenduoquadragintillionths six hundred eighty two duocentrequadragintillionths three hundred seventy duocenquattuorquadragintillionths nine hundred duocenquinquadragintillionths one hundred seventy six duocensexquadragintillionths three hundred ninety four duocenseptenquadragintillionths four hundred ninety nine duocenoctoquadragintillionths ninety six duocennovemquadragintillionths five hundred sixty three duocenquinquagintillionths nine hundred ninety nine duocenunquinquagintillionths one hundred thirty six duocenduoquinquagintillionths three hundred fifty duocentrequinquagintillionths nine hundred fifty three duocenquattuorquinquagintillionths two hundred sixty four duocenquinquinquagintillionths three hundred six duocensexquinquagintillionths one hundred sixty four duocenseptenquinquagintillionths eighty seven duocenoctoquinquagintillionths five hundred forty two duocennovemquinquagintillionths one hundred six duocensexagintillionths two hundred sixty three duocenunsexagintillionths sixty eight duocenduosexagintillionths four hundred eighty five duocentresexagintillionths one hundred seventy eight duocenquattuorsexagintillionths eighty duocenquinsexagintillionths nine hundred eighty two duocensexsexagintillionths two hundred fifty one duocenseptensexagintillionths nine hundred sixty five duocenoctosexagintillionths three hundred forty nine duocennovemsexagintillionths four hundred seven duocenseptuagintillionths six hundred sixty seven duocenunseptuagintillionths eight hundred ninety duocenduoseptuagintillionths seven hundred eighty duocentreseptuagintillionths forty three duocenquattuorseptuagintillionths seven hundred twenty eight duocenquinseptuagintillionths five hundred forty seven duocensexseptuagintillionths four hundred forty duocenseptenseptuagintillionths eighty two duocenoctoseptuagintillionths eight hundred eighty seven duocennovemseptuagintillionths seven hundred thirty eight duocenoctogintillionths two hundred forty six duocenunoctogintillionths one hundred seven duocenduooctogintillionths one hundred seventy four duocentreoctogintillionths four hundred nineteen duocenquattuoroctogintillionths nine hundred twenty two duocenquinoctogintillionths five hundred seventy three duocensexoctogintillionths one hundred eighty eight duocenseptenoctogintillionths nine hundred eighteen duocenoctooctogintillionths nine hundred twenty seven duocennovemoctogintillionths two hundred fifty six duocennonagintillionths three hundred twenty eight duocenunnonagintillionths one hundred forty nine duocenduononagintillionths three hundred five duocentrenonagintillionths four hundred ten duocenquattuornonagintillionths eight hundred ninety two duocenquinnonagintillionths six hundred fifty duocensexnonagintillionths five hundred twenty seven duocenseptennonagintillionths seven hundred ninety four duocenoctononagintillionths three hundred sixty two duocennovemnonagintillionths six hundred seventy three trecentillionths three hundred forty five trecenuntillionths six hundred sixteen trecenduotillionths nine hundred forty eight trecentretillionths six hundred sixty trecenquattuortillionths nine hundred seventy nine trecenquintillionths four hundred twenty five trecensextillionths four hundred sixty six trecenseptentillionths eight hundred forty one trecenoctotillionths eight hundred ninety two trecennovemtillionths six hundred eighty four trecendecillionths six hundred seventy six trecenundecillionths six hundred fifty six trecenduodecillionths five hundred three trecentredecillionths eight hundred twenty one trecenquattuordecillionths six hundred fifty eight trecenquindecillionths two hundred twelve trecensexdecillionths six hundred eighty nine trecenseptendecillionths fifty five trecenoctodecillionths six hundred eighty four trecennovemdecillionths four hundred eighteen trecenvigintillionths six hundred two trecenunvigintillionths one hundred sixty nine trecenduovigintillionths eighty four trecentrevigintillionths six hundred eighty five trecenquattuorvigintillionths eighty nine trecenquinvigintillionths seven hundred sixty one trecensexvigintillionths seven hundred seventy three trecenseptenvigintillionths four hundred fifty five trecenoctovigintillionths seven hundred thirty seven trecennovemvigintillionths ninety four trecentrigintillionths five hundred twenty seven trecenuntrigintillionths ninety eight trecenduotrigintillionths seven hundred fifty one trecentretrigintillionths six hundred thirteen trecenquattuortrigintillionths one hundred twenty seven trecenquintrigintillionths six hundred eighty four trecensextrigintillionths one hundred one trecenseptentrigintillionths six hundred forty eight trecenoctotrigintillionths five hundred sixty eight trecennovemtrigintillionths eight hundred twelve trecenquadragintillionths nine hundred ninety six trecenunquadragintillionths eight hundred two trecenduoquadragintillionths four hundred sixty four trecentrequadragintillionths seven hundred fourteen trecenquattuorquadragintillionths seven hundred forty four trecenquinquadragintillionths one trecensexquadragintillionth two hundred ninety one trecenseptenquadragintillionths nine hundred ninety five trecenoctoquadragintillionths five hundred five trecennovemquadragintillionths seven hundred eighty nine trecenquinquagintillionths one hundred eighty one trecenunquinquagintillionths eight hundred forty one trecenduoquinquagintillionths nine hundred thirty eight trecentrequinquagintillionths four hundred sixty trecenquattuorquinquagintillionths one hundred trecenquinquinquagintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.0000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"));
        Assert.assertEquals("thirty five octovigintillion six hundred eighty four septenvigintillion five hundred forty four sexvigintillion seventy five quinvigintillion seven quattuorvigintillion eight hundred eighty nine trevigintillion three hundred fifty two duovigintillion eight hundred twelve unvigintillion seven hundred thirty seven vigintillion three hundred ninety nine novemdecillion five hundred eleven octodecillion nine hundred nine septendecillion one hundred fifteen sexdecillion three hundred thirty three quindecillion one hundred two quattuordecillion three hundred eighty six tredecillion three hundred twenty six duodecillion eight hundred ninety four undecillion seven hundred twenty decillion six hundred thirty nonillion five hundred thirty four octillion four hundred ninety eight septillion three hundred twenty sextillion eight hundred eighty two quintillion one hundred fifteen quadrillion five hundred eighty six trillion one hundred eighty six billion two hundred fifty million eight hundred fifty two thousand one hundred six point two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E+88"));
        Assert.assertEquals("three hundred fifty six quattuorquinquagintillionths eight hundred forty five quinquinquagintillionths four hundred forty sexquinquagintillionths seven hundred fifty septenquinquagintillionths seventy eight octoquinquagintillionths eight hundred ninety three novemquinquagintillionths five hundred twenty eight sexagintillionths one hundred twenty seven unsexagintillionths three hundred seventy three duosexagintillionths nine hundred ninety five tresexagintillionths one hundred nineteen quattuorsexagintillionths ninety one quinsexagintillionths one hundred fifty three sexsexagintillionths three hundred thirty one septensexagintillionths twenty three octosexagintillionths eight hundred sixty three novemsexagintillionths two hundred sixty eight septuagintillionths nine hundred forty seven unseptuagintillionths two hundred six duoseptuagintillionths three hundred five treseptuagintillionths three hundred forty four quattuorseptuagintillionths nine hundred eighty three quinseptuagintillionths two hundred eight sexseptuagintillionths eight hundred twenty one septenseptuagintillionths one hundred fifty five octoseptuagintillionths eight hundred sixty one novemseptuagintillionths eight hundred sixty two octogintillionths five hundred eight unoctogintillionths five hundred twenty one duooctogintillionths sixty two treoctogintillionths two hundred ninety five quattuoroctogintillionths seven hundred eighty eight quinoctogintillionths four hundred twenty eight sexoctogintillionths four hundred seventy seven septenoctogintillionths nine hundred thirteen octooctogintillionths two hundred sixty novemoctogintillionths one nonagintillionth seven hundred twenty four unnonagintillionths six hundred twenty one duononagintillionths five hundred twenty two trenonagintillionths three hundred seventy quattuornonagintillionths thirty nine quinnonagintillionths four hundred sixteen sexnonagintillionths three hundred sixty seven septennonagintillionths seven hundred seventy one octononagintillionths six hundred twenty seven novemnonagintillionths four hundred seventy nine centillionths nine hundred seventy eight cenuntillionths seven hundred seventy six cenduotillionths four hundred twenty two centretillionths six hundred twenty three cenquattuortillionths one hundred twelve cenquintillionths eighty nine censextillionths one hundred ninety one censeptentillionths one hundred ninety five cenoctotillionths one hundred thirty three cennovemtillionths eight hundred thirty five cendecillionths four hundred eleven cenundecillionths five hundred twenty five cenduodecillionths five hundred seventy one centredecillionths five hundred twelve cenquattuordecillionths thirty six cenquindecillionths four hundred ninety two censexdecillionths seventy one censeptendecillionths five hundred two cenoctodecillionths five hundred fourteen cennovemdecillionths six hundred forty nine cenvigintillionths nine hundred eighty four cenunvigintillionths two hundred sixty cenduovigintillionths six hundred sixteen centrevigintillionths nine hundred sixty six cenquattuorvigintillionths seven hundred forty seven cenquinvigintillionths seven hundred eighty three censexvigintillionths seven hundred censeptenvigintillionths six hundred seventeen cenoctovigintillionths three hundred fifty cennovemvigintillionths twelve centrigintillionths three hundred thirty four cenuntrigintillionths eight hundred seventy three cenduotrigintillionths four hundred fifty nine centretrigintillionths four hundred sixty two cenquattuortrigintillionths five hundred seventy eight cenquintrigintillionths one hundred sixty seven censextrigintillionths six hundred eighteen censeptentrigintillionths seven hundred ninety seven cenoctotrigintillionths two hundred seventeen cennovemtrigintillionths four hundred thirty five cenquadragintillionths two hundred twenty five cenunquadragintillionths seven hundred seventy nine cenduoquadragintillionths five hundred fifty nine centrequadragintillionths six hundred twenty six cenquattuorquadragintillionths one hundred fifty two cenquinquadragintillionths five hundred one censexquadragintillionths twelve censeptenquadragintillionths one hundred sixty one cenoctoquadragintillionths seven hundred eighty three cennovemquadragintillionths one hundred seventy four cenquinquagintillionths seven hundred thirty cenunquinquagintillionths two hundred sixty eight cenduoquinquagintillionths six hundred seventy three centrequinquagintillionths six hundred twenty two cenquattuorquinquagintillionths thirty two cenquinquinquagintillionths four hundred ninety three censexquinquagintillionths four hundred sixty seven censeptenquinquagintillionths seven hundred three cenoctoquinquagintillionths two hundred forty two cennovemquinquagintillionths one hundred sixty seven censexagintillionths three hundred twenty eight cenunsexagintillionths one hundred three cenduosexagintillionths eight hundred fifty four centresexagintillionths eight hundred fifty one cenquattuorsexagintillionths eight hundred four cenquinsexagintillionths nine hundred thirty three censexsexagintillionths eighty seven censeptensexagintillionths four hundred four cenoctosexagintillionths seven hundred seventy three cennovemsexagintillionths eight hundred twenty six censeptuagintillionths one hundred sixty four cenunseptuagintillionths six hundred cenduoseptuagintillionths six hundred twenty five centreseptuagintillionths seven hundred eighty six cenquattuorseptuagintillionths seven hundred sixty five cenquinseptuagintillionths three hundred ninety three censexseptuagintillionths two hundred ten censeptenseptuagintillionths three hundred sixty nine cenoctoseptuagintillionths fifty five cennovemseptuagintillionths two hundred fifty five cenoctogintillionths one hundred thirty three cenunoctogintillionths three hundred sixty two cenduooctogintillionths nine hundred forty seven centreoctogintillionths eight hundred ninety two cenquattuoroctogintillionths nine hundred thirty two cenquinoctogintillionths three hundred sixty two censexoctogintillionths two hundred eighty three censeptenoctogintillionths six hundred ten cenoctooctogintillionths three hundred forty one cennovemoctogintillionths eight hundred thirty eight cennonagintillionths nine hundred thirty nine cenunnonagintillionths three hundred forty six cenduononagintillionths five hundred five centrenonagintillionths nine hundred five cenquattuornonagintillionths six hundred thirty two cenquinnonagintillionths eight hundred six censexnonagintillionths one hundred forty nine censeptennonagintillionths two hundred eighty eight cenoctononagintillionths two hundred eighty one cennovemnonagintillionths nine hundred ninety duocentillionths three hundred seventy duocenuntillionths seventy seven duocenduotillionths five hundred eighty seven duocentretillionths two hundred sixty nine duocenquattuortillionths eight hundred three duocenquintillionths eight hundred sixty seven duocensextillionths one hundred seventy duocenseptentillionths four hundred one duocenoctotillionths six hundred ninety nine duocennovemtillionths two hundred eighty duocendecillionths seven hundred eighty seven duocenundecillionths five hundred nineteen duocenduodecillionths five hundred ninety one duocentredecillionths one hundred fifty four duocenquattuordecillionths eighty eight duocenquindecillionths three hundred thirty duocensexdecillionths two hundred fifty four duocenseptendecillionths nine hundred five duocenoctodecillionths four hundred ninety four duocennovemdecillionths eight hundred twenty seven duocenvigintillionths ninety one duocenunvigintillionths nine hundred thirty two duocenduovigintillionths nine hundred eighty four duocentrevigintillionths one hundred fourteen duocenquattuorvigintillionths nine hundred twenty one duocenquinvigintillionths fifteen duocensexvigintillionths two hundred sixteen duocenseptenvigintillionths two duocenoctovigintillionths two hundred twenty five duocennovemvigintillionths three hundred ninety six duocentrigintillionths seventy nine duocenuntrigintillionths one hundred sixty seven duocenduotrigintillionths one hundred seventeen duocentretrigintillionths four hundred seventy four duocenquattuortrigintillionths six hundred fifty two duocenquintrigintillionths five hundred eighty one duocensextrigintillionths eight hundred ninety three duocenseptentrigintillionths six hundred eleven duocenoctotrigintillionths six hundred forty nine duocennovemtrigintillionths seven hundred thirty six duocenquadragintillionths four hundred fourteen duocenunquadragintillionths nine hundred forty eight duocenduoquadragintillionths three duocentrequadragintillionths six hundred fifty duocenquattuorquadragintillionths six hundred fifty four duocenquinquadragintillionths one hundred eighty eight duocensexquadragintillionths five hundred eighty one duocenseptenquadragintillionths seven hundred eighty three duocenoctoquadragintillionths nine hundred ninety eight duocennovemquadragintillionths five hundred seventy eight duocenquinquagintillionths nine hundred thirty three duocenunquinquagintillionths four hundred thirty three duocenduoquinquagintillionths eighty six duocentrequinquagintillionths seven hundred forty duocenquattuorquinquagintillionths eight hundred sixteen duocenquinquinquagintillionths eight hundred fifty five duocensexquinquagintillionths five hundred fifteen duocenseptenquinquagintillionths nine hundred seventy seven duocenoctoquinquagintillionths two hundred sixty five duocennovemquinquagintillionths seven hundred forty four duocensexagintillionths four hundred thirteen duocenunsexagintillionths four hundred eighty seven duocenduosexagintillionths five hundred fifty six duocentresexagintillionths seven hundred thirty three duocenquattuorsexagintillionths four hundred fifty eight duocenquinsexagintillionths seven hundred eleven duocensexsexagintillionths six hundred thirty five duocenseptensexagintillionths five hundred fifty eight duocenoctosexagintillionths four hundred ninety eight duocennovemsexagintillionths two hundred fifty four duocenseptuagintillionths four hundred forty seven duocenunseptuagintillionths two hundred five duocenduoseptuagintillionths one hundred one duocentreseptuagintillionths twenty eight duocenquattuorseptuagintillionths one hundred thirty two duocenquinseptuagintillionths one hundred fifty five duocensexseptuagintillionths two hundred eighty seven duocenseptenseptuagintillionths six hundred ninety seven duocenoctoseptuagintillionths five hundred sixty duocennovemseptuagintillionths one hundred fourteen duocenoctogintillionths three hundred eighty four duocenunoctogintillionths one hundred twenty duocenduooctogintillionths five hundred nine duocentreoctogintillionths thirty nine duocenquattuoroctogintillionths three hundred forty two duocenquinoctogintillionths eight hundred sixty eight duocensexoctogintillionths two hundred thirty seven duocenseptenoctogintillionths ninety duocenoctooctogintillionths seventeen duocennovemoctogintillionths six hundred thirty nine duocennonagintillionths four hundred forty nine duocenunnonagintillionths nine hundred nine duocenduononagintillionths six hundred fifty six duocentrenonagintillionths three hundred ninety nine duocenquattuornonagintillionths nine hundred thirteen duocenquinnonagintillionths six hundred thirty five duocensexnonagintillionths ninety five duocenseptennonagintillionths three hundred twenty six duocenoctononagintillionths four hundred thirty duocennovemnonagintillionths six hundred sixteen trecentillionths four hundred eight trecenuntillionths seven hundred fifty four trecenduotillionths two hundred ten trecentretillionths six hundred twenty six trecenquattuortillionths three hundred six trecenquintillionths eight hundred forty eight trecensextillionths five hundred seventeen trecenseptentillionths eight hundred eight trecenoctotillionths ninety eight trecennovemtillionths two hundred twenty five trecendecillionths one hundred ninety six trecenundecillionths five hundred thirty four trecenduodecillionths nine hundred forty trecentredecillionths seven hundred sixty six trecenquattuordecillionths seven hundred eighty nine trecenquindecillionths seventy eight trecensexdecillionths four trecenseptendecillionths three hundred seventy two trecenoctodecillionths eight hundred fifty four trecennovemdecillionths seven hundred forty four trecenvigintillionths eight trecenunvigintillionths two hundred eighty eight trecenduovigintillionths seven hundred seventy three trecentrevigintillionths eight hundred twenty four trecenquattuorvigintillionths six hundred ten trecenquinvigintillionths seven hundred seventeen trecensexvigintillionths four hundred forty one trecenseptenvigintillionths nine hundred ninety two trecenoctovigintillionths two hundred fifty seven trecennovemvigintillionths three hundred eighteen trecentrigintillionths eight hundred ninety one trecenuntrigintillionths eight hundred ninety two trecenduotrigintillionths seven hundred twenty five trecentretrigintillionths six hundred thirty two trecenquattuortrigintillionths eight hundred fourteen trecenquintrigintillionths nine hundred thirty trecensextrigintillionths five hundred forty one trecenseptentrigintillionths eighty nine trecenoctotrigintillionths two hundred sixty five trecennovemtrigintillionths fifty two trecenquadragintillionths seven hundred seventy nine trecenunquadragintillionths four hundred thirty six trecenduoquadragintillionths two hundred sixty seven trecentrequadragintillionths three hundred thirty four trecenquattuorquadragintillionths five hundred sixty one trecenquinquadragintillionths six hundred ninety four trecensexquadragintillionths eight hundred sixty six trecenseptenquadragintillionths ninety seven trecenoctoquadragintillionths nine hundred forty two trecennovemquadragintillionths five hundred forty six trecenquinquagintillionths six hundred eighty four trecenunquinquagintillionths one hundred eighty nine trecenduoquinquagintillionths two hundred sixty eight trecentrequinquagintillionths four hundred sixty seven trecenquattuorquinquagintillionths six hundred sixty five trecenquinquinquagintillionths six hundred fifty trecensexquinquagintillionths three hundred eighty two trecenseptenquinquagintillionths one hundred sixty five trecenoctoquinquagintillionths eight hundred twenty one trecennovemquinquagintillionths two hundred sixty eight trecensexagintillionths nine hundred five trecenunsexagintillionths five hundred sixty eight trecenduosexagintillionths four hundred forty one trecentresexagintillionths eight hundred sixty trecenquattuorsexagintillionths two hundred sixteen trecenquinsexagintillionths nine hundred eight trecensexsexagintillionths four hundred sixty eight trecenseptensexagintillionths five hundred eight trecenoctosexagintillionths nine hundred seventy six trecennovemsexagintillionths one hundred seventy seven trecenseptuagintillionths three hundred forty five trecenunseptuagintillionths five hundred seventy three trecenduoseptuagintillionths seven hundred nine trecentreseptuagintillionths four hundred fifty two trecenquattuorseptuagintillionths seven hundred nine trecenquinseptuagintillionths eight hundred seventy five trecensexseptuagintillionths one hundred sixty one trecenseptenseptuagintillionths three hundred twelve trecenoctoseptuagintillionths seven hundred sixty eight trecennovemseptuagintillionths four hundred ten trecenoctogintillionths one hundred sixty four trecenunoctogintillionths eight hundred fifty six trecenduooctogintillionths eight hundred eighty one trecentreoctogintillionths two hundred ninety nine trecenquattuoroctogintillionths six hundred eighty trecenquinoctogintillionths two hundred forty six trecensexoctogintillionths four hundred seventy one trecenseptenoctogintillionths four hundred seventy four trecenoctooctogintillionths four hundred trecennovemoctogintillionths one hundred twenty nine trecennonagintillionths one hundred ninety nine trecenunnonagintillionths five hundred fifty trecenduononagintillionths five hundred seventy eight trecentrenonagintillionths nine hundred eighteen trecenquattuornonagintillionths one hundred eighty four trecenquinnonagintillionths one hundred ninety three trecensexnonagintillionths eight hundred forty six trecenseptennonagintillionths ten trecenoctononagintillionths",
                NumberStringUtility.numberStringToNumberPhrase("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163"));
        
        //overflow
        Assert.assertEquals("one times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("1E9223372036854775807"));
        Assert.assertEquals("one times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("1E-9223372036854775807"));
        Assert.assertEquals("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("9.999999999999E9223372036854775807"));
        Assert.assertEquals("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand seven hundred ninety five",
                NumberStringUtility.numberStringToNumberPhrase("9.999999999999E-9223372036854775795"));
        Assert.assertEquals("nine point nine nine nine nine nine nine nine nine nine nine nine nine nine times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand seven hundred ninety five",
                NumberStringUtility.numberStringToNumberPhrase("99.999999999999E-9223372036854775796"));
        Assert.assertEquals("one point two five four six five four eight seven times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("1.25465487E9223372036854775807"));
        Assert.assertEquals("one point two five four six five four eight seven times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight",
                NumberStringUtility.numberStringToNumberPhrase("1.25465487E-9223372036854775808"));
        Assert.assertEquals("one times ten to the nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("1E999223372036854775807"));
        Assert.assertEquals("one times ten to the negative nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("1E-999223372036854775807"));
        Assert.assertEquals("negative one times ten to the nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("-1E999223372036854775807"));
        Assert.assertEquals("negative one times ten to the negative nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("-1E-999223372036854775807"));
        Assert.assertEquals("eight point four six eight nine two six one zero eight seven four four times ten to the sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("8.468926108744E16999223372036854775807"));
        Assert.assertEquals("eight point four six eight nine two six one zero eight seven four four times ten to the negative sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("8.468926108744E-16999223372036854775807"));
        Assert.assertEquals("negative eight point four six eight nine two six one zero eight seven four four times ten to the sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("-8.468926108744E16999223372036854775807"));
        Assert.assertEquals("negative eight point four six eight nine two six one zero eight seven four four times ten to the negative sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven",
                NumberStringUtility.numberStringToNumberPhrase("-8.468926108744E-16999223372036854775807"));
        
        //fraction mode
        Assert.assertEquals("one tenth", NumberStringUtility.numberStringToNumberPhrase("0.1", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point one", NumberStringUtility.numberStringToNumberPhrase("0.1", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one tenth", NumberStringUtility.numberStringToNumberPhrase("0.1", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberStringToNumberPhrase("0.08", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero eight", NumberStringUtility.numberStringToNumberPhrase("0.08", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberStringToNumberPhrase("0.08", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberStringToNumberPhrase("0.33", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point three three", NumberStringUtility.numberStringToNumberPhrase("0.33", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberStringToNumberPhrase("0.33", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberStringToNumberPhrase("0.1001", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberStringToNumberPhrase("0.1001", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one tenth one hundred millionths", NumberStringUtility.numberStringToNumberPhrase("0.1001", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberStringToNumberPhrase("300.9141", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberStringToNumberPhrase("300.9141", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("three hundred and nine hundred fourteen thousandths one hundred millionths", NumberStringUtility.numberStringToNumberPhrase("300.9141", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000123456789", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000123456789", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one billionth two hundred thirty four trillionths five hundred sixty seven quadrillionths eight hundred ninety quintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.00000000123456789", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths",
                NumberStringUtility.numberStringToNumberPhrase("-9875116.000000167", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero zero zero zero zero one six seven",
                NumberStringUtility.numberStringToNumberPhrase("-9875116.000000167", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths",
                NumberStringUtility.numberStringToNumberPhrase("-9875116.000000167", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("five hundred forty nine thousandths fifty four millionths nine hundred eighty four billionths eight hundred ninety one trillionths five hundred sixty four quadrillionths six hundred fifty four quintillionths ninety four sextillionths nine hundred eighty nine nonillionths seven hundred fifty three decillionths five hundred nine undecillionths one hundred ninety three duodecillionths nine hundred sixty eight tredecillionths two hundred forty quattuordecillionths eight hundred seventeen quindecillionths three hundred one sexdecillionths five hundred fifty septendecillionths six hundred sixty eight octodecillionths ninety four novemdecillionths eight hundred eighty three vigintillionths five hundred ninety five unvigintillionths nine hundred sixty six duovigintillionths five hundred fifty seven trevigintillionths ten untrigintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001", NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberStringToNumberPhraseumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point nine zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberStringToNumberPhraseumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberStringToNumberPhraseumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberStringToNumberPhrase("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("three millionths five hundred sixty eight billionths four hundred fifty four trillionths four hundred seven quadrillionths five hundred quintillionths seven hundred eighty eight sextillionths nine hundred thirty five septillionths two hundred eighty one octillionths two hundred seventy three nonillionths seven hundred thirty nine decillionths nine hundred fifty one undecillionths one hundred ninety duodecillionths nine hundred eleven tredecillionths five hundred thirty three quattuordecillionths three hundred ten quindecillionths two hundred thirty eight sexdecillionths six hundred thirty two septendecillionths six hundred eighty nine octodecillionths four hundred seventy two novemdecillionths sixty three vigintillionths fifty three unvigintillionths four hundred forty nine duovigintillionths eight hundred thirty two trevigintillionths eighty eight quattuorvigintillionths two hundred eleven quinvigintillionths five hundred fifty eight sexvigintillionths six hundred eighteen septenvigintillionths six hundred twenty five octovigintillionths eighty five novemvigintillionths two hundred ten trigintillionths six hundred twenty two untrigintillionths nine hundred fifty seven duotrigintillionths eight hundred eighty four tretrigintillionths two hundred eighty four quattuortrigintillionths seven hundred seventy nine quintrigintillionths one hundred thirty two sextrigintillionths six hundred septentrigintillionths seventeen octotrigintillionths two hundred forty six novemtrigintillionths two hundred fifteen quadragintillionths two hundred twenty three unquadragintillionths seven hundred duoquadragintillionths three hundred ninety four trequadragintillionths one hundred sixty three quattuorquadragintillionths six hundred seventy seven quinquadragintillionths seven hundred sixteen sexquadragintillionths two hundred seventy four septenquadragintillionths seven hundred ninety nine octoquadragintillionths seven hundred eighty seven novemquadragintillionths seven hundred sixty four quinquagintillionths two hundred twenty six unquinquagintillionths two hundred thirty one duoquinquagintillionths one hundred twenty trequinquagintillionths eight hundred ninety one quattuorquinquagintillionths nine hundred eleven quinquinquagintillionths nine hundred fifty one sexquinquagintillionths three hundred thirty eight septenquinquagintillionths three hundred fifty four octoquinquagintillionths one hundred fifteen novemquinquagintillionths two hundred fifty five sexagintillionths seven hundred fifteen unsexagintillionths one hundred twenty duosexagintillionths three hundred sixty four tresexagintillionths nine hundred twenty quattuorsexagintillionths seven hundred fifteen quinsexagintillionths twenty five sexsexagintillionths one hundred forty six septensexagintillionths four hundred ninety nine octosexagintillionths eight hundred forty two novemsexagintillionths six hundred six septuagintillionths one hundred sixty nine unseptuagintillionths six hundred sixty seven duoseptuagintillionths four hundred seventy seven treseptuagintillionths eight hundred thirty seven quattuorseptuagintillionths six quinseptuagintillionths one hundred seventy three sexseptuagintillionths five hundred septenseptuagintillionths one hundred twenty three octoseptuagintillionths three hundred forty eight novemseptuagintillionths seven hundred thirty four octogintillionths five hundred ninety four unoctogintillionths six hundred twenty five duooctogintillionths seven hundred eighty one treoctogintillionths six hundred seventy six quattuoroctogintillionths one hundred eighty seven quinoctogintillionths nine hundred seventy two sexoctogintillionths one hundred seventy four septenoctogintillionths three hundred fifty two octooctogintillionths two hundred fifty seven novemoctogintillionths seven hundred ninety five nonagintillionths five hundred ninety six unnonagintillionths two hundred sixty one duononagintillionths five hundred twenty five trenonagintillionths ten quattuornonagintillionths one hundred twenty one quinnonagintillionths six hundred seventeen sexnonagintillionths eight hundred thirty one septennonagintillionths seven hundred forty seven octononagintillionths three hundred two novemnonagintillionths six hundred eighty six centillionths seven hundred thirty six cenuntillionths two hundred twenty cenduotillionths three hundred twenty four centretillionths nine hundred thirty four cenquattuortillionths six hundred seventy seven cenquintillionths thirty two censextillionths four hundred twenty one censeptentillionths six hundred seventy three cenoctotillionths two hundred eighty one cennovemtillionths thirty eight cendecillionths five hundred forty eight cenundecillionths five hundred eighteen cenduodecillionths forty nine centredecillionths three hundred thirty cenquattuordecillionths eight hundred seventy four cenquindecillionths forty seven censexdecillionths seven hundred thirty eight censeptendecillionths two hundred sixty one cenoctodecillionths six hundred forty six cennovemdecillionths six cenvigintillionths two hundred fifty seven cenunvigintillionths eight hundred sixty seven cenduovigintillionths six hundred fifty three centrevigintillionths nine hundred thirty two cenquattuorvigintillionths one hundred three cenquinvigintillionths six hundred ninety censexvigintillionths five hundred fifty two censeptenvigintillionths five hundred fifty one cenoctovigintillionths three hundred thirty three cennovemvigintillionths six hundred twenty nine centrigintillionths four hundred seventy eight cenuntrigintillionths nine hundred twenty nine cenduotrigintillionths three hundred twenty three centretrigintillionths six hundred twenty two cenquattuortrigintillionths eight hundred thirty six cenquintrigintillionths one hundred three censextrigintillionths four hundred eighteen censeptentrigintillionths three hundred eighty nine cenoctotrigintillionths three hundred ninety three cennovemtrigintillionths four hundred sixty five cenquadragintillionths fifty nine cenunquadragintillionths fifty six cenduoquadragintillionths three hundred twenty eight centrequadragintillionths sixty one cenquattuorquadragintillionths four hundred ninety two cenquinquadragintillionths eight hundred eighty two censexquadragintillionths eight hundred nineteen censeptenquadragintillionths nine hundred three cenoctoquadragintillionths seven hundred cennovemquadragintillionths seven hundred seventy five cenquinquagintillionths eight hundred seventy two cenunquinquagintillionths six hundred ninety eight cenduoquinquagintillionths thirty eight centrequinquagintillionths six hundred seventy one cenquattuorquinquagintillionths seven hundred four cenquinquinquagintillionths sixteen censexquinquagintillionths nine hundred ninety two censeptenquinquagintillionths eight hundred seven cenoctoquinquagintillionths eight hundred seventy five cennovemquinquagintillionths one hundred ninety five censexagintillionths nine hundred eleven cenunsexagintillionths five hundred forty cenduosexagintillionths eight hundred eighty three centresexagintillionths three hundred two cenquattuorsexagintillionths five hundred forty nine cenquinsexagintillionths fifty four censexsexagintillionths nine hundred forty eight censeptensexagintillionths two hundred seventy cenoctosexagintillionths nine hundred nineteen cennovemsexagintillionths three hundred twenty nine censeptuagintillionths eight hundred forty one cenunseptuagintillionths one hundred forty nine cenduoseptuagintillionths two hundred ten centreseptuagintillionths one hundred fifty two cenquattuorseptuagintillionths one hundred sixty cenquinseptuagintillionths twenty two censexseptuagintillionths two hundred fifty three censeptenseptuagintillionths nine hundred sixty cenoctoseptuagintillionths seven hundred ninety one cennovemseptuagintillionths six hundred seventy one cenoctogintillionths one hundred seventy four cenunoctogintillionths seven hundred forty six cenduooctogintillionths five hundred twenty five centreoctogintillionths eight hundred eighteen cenquattuoroctogintillionths nine hundred thirty six cenquinoctogintillionths one hundred sixteen censexoctogintillionths four hundred ninety seven censeptenoctogintillionths three hundred sixty four cenoctooctogintillionths one hundred forty nine cennovemoctogintillionths four hundred eighty cennonagintillionths thirty six cenunnonagintillionths five hundred six cenduononagintillionths five hundred forty one centrenonagintillionths eight hundred eighty five cenquattuornonagintillionths eight hundred seventeen cenquinnonagintillionths eight hundred thirty nine censexnonagintillionths nine hundred eighty five censeptennonagintillionths seven hundred eighty nine cenoctononagintillionths three hundred thirty four cennovemnonagintillionths three hundred thirty duocentillionths eight hundred sixty seven duocenuntillionths four hundred eight duocenduotillionths one hundred sixty eight duocentretillionths five hundred fifty five duocenquattuortillionths one hundred fifty nine duocenquintillionths seven hundred seventy two duocensextillionths six hundred fifty seven duocenseptentillionths four hundred forty four duocenoctotillionths one hundred thirty four duocennovemtillionths eight hundred seventy five duocendecillionths five hundred sixty seven duocenundecillionths three hundred thirty four duocenduodecillionths five hundred eighty seven duocentredecillionths one hundred sixteen duocenquattuordecillionths three hundred fifty five duocenquindecillionths five hundred eighty four duocensexdecillionths nine hundred eighty two duocenseptendecillionths five hundred forty four duocenoctodecillionths four hundred seventy two duocennovemdecillionths fifty one duocenvigintillionths ten duocenunvigintillionths two hundred eighty one duocenduovigintillionths three hundred twenty one duocentrevigintillionths five hundred fifty two duocenquattuorvigintillionths eight hundred seventy six duocenquinvigintillionths nine hundred seventy five duocensexvigintillionths six hundred one duocenseptenvigintillionths one hundred forty three duocenoctovigintillionths eight hundred forty one duocennovemvigintillionths two hundred five duocentrigintillionths ninety duocenuntrigintillionths three hundred ninety three duocenduotrigintillionths four hundred twenty eight duocentretrigintillionths six hundred eighty two duocenquattuortrigintillionths three hundred seventy duocenquintrigintillionths nine hundred duocensextrigintillionths one hundred seventy six duocenseptentrigintillionths three hundred ninety four duocenoctotrigintillionths four hundred ninety nine duocennovemtrigintillionths ninety six duocenquadragintillionths five hundred sixty three duocenunquadragintillionths nine hundred ninety nine duocenduoquadragintillionths one hundred thirty six duocentrequadragintillionths three hundred fifty duocenquattuorquadragintillionths nine hundred fifty three duocenquinquadragintillionths two hundred sixty four duocensexquadragintillionths three hundred six duocenseptenquadragintillionths one hundred sixty four duocenoctoquadragintillionths eighty seven duocennovemquadragintillionths five hundred forty two duocenquinquagintillionths one hundred six duocenunquinquagintillionths two hundred sixty three duocenduoquinquagintillionths sixty eight duocentrequinquagintillionths four hundred eighty five duocenquattuorquinquagintillionths one hundred seventy eight duocenquinquinquagintillionths eighty duocensexquinquagintillionths nine hundred eighty two duocenseptenquinquagintillionths two hundred fifty one duocenoctoquinquagintillionths nine hundred sixty five duocennovemquinquagintillionths three hundred forty nine duocensexagintillionths four hundred seven duocenunsexagintillionths six hundred sixty seven duocenduosexagintillionths eight hundred ninety duocentresexagintillionths seven hundred eighty duocenquattuorsexagintillionths forty three duocenquinsexagintillionths seven hundred twenty eight duocensexsexagintillionths five hundred forty seven duocenseptensexagintillionths four hundred forty duocenoctosexagintillionths eighty two duocennovemsexagintillionths eight hundred eighty seven duocenseptuagintillionths seven hundred thirty eight duocenunseptuagintillionths two hundred forty six duocenduoseptuagintillionths one hundred seven duocentreseptuagintillionths one hundred seventy four duocenquattuorseptuagintillionths four hundred nineteen duocenquinseptuagintillionths nine hundred twenty two duocensexseptuagintillionths five hundred seventy three duocenseptenseptuagintillionths one hundred eighty eight duocenoctoseptuagintillionths nine hundred eighteen duocennovemseptuagintillionths nine hundred twenty seven duocenoctogintillionths two hundred fifty six duocenunoctogintillionths three hundred twenty eight duocenduooctogintillionths one hundred forty nine duocentreoctogintillionths three hundred five duocenquattuoroctogintillionths four hundred ten duocenquinoctogintillionths eight hundred ninety two duocensexoctogintillionths six hundred fifty duocenseptenoctogintillionths five hundred twenty seven duocenoctooctogintillionths seven hundred ninety four duocennovemoctogintillionths three hundred sixty two duocennonagintillionths six hundred seventy three duocenunnonagintillionths three hundred forty five duocenduononagintillionths six hundred sixteen duocentrenonagintillionths nine hundred forty eight duocenquattuornonagintillionths six hundred sixty duocenquinnonagintillionths nine hundred seventy nine duocensexnonagintillionths four hundred twenty five duocenseptennonagintillionths four hundred sixty six duocenoctononagintillionths eight hundred forty one duocennovemnonagintillionths eight hundred ninety two trecentillionths six hundred eighty four trecenuntillionths six hundred seventy six trecenduotillionths six hundred fifty six trecentretillionths five hundred three trecenquattuortillionths eight hundred twenty one trecenquintillionths six hundred fifty eight trecensextillionths two hundred twelve trecenseptentillionths six hundred eighty nine trecenoctotillionths fifty five trecennovemtillionths six hundred eighty four trecendecillionths four hundred eighteen trecenundecillionths six hundred two trecenduodecillionths one hundred sixty nine trecentredecillionths eighty four trecenquattuordecillionths six hundred eighty five trecenquindecillionths eighty nine trecensexdecillionths seven hundred sixty one trecenseptendecillionths seven hundred seventy three trecenoctodecillionths four hundred fifty five trecennovemdecillionths seven hundred thirty seven trecenvigintillionths ninety four trecenunvigintillionths five hundred twenty seven trecenduovigintillionths ninety eight trecentrevigintillionths seven hundred fifty one trecenquattuorvigintillionths six hundred thirteen trecenquinvigintillionths one hundred twenty seven trecensexvigintillionths six hundred eighty four trecenseptenvigintillionths one hundred one trecenoctovigintillionths six hundred forty eight trecennovemvigintillionths five hundred sixty eight trecentrigintillionths eight hundred twelve trecenuntrigintillionths nine hundred ninety six trecenduotrigintillionths eight hundred two trecentretrigintillionths four hundred sixty four trecenquattuortrigintillionths seven hundred fourteen trecenquintrigintillionths seven hundred forty four trecensextrigintillionths one trecenseptentrigintillionth two hundred ninety one trecenoctotrigintillionths nine hundred ninety five trecennovemtrigintillionths five hundred five trecenquadragintillionths seven hundred eighty nine trecenunquadragintillionths one hundred eighty one trecenduoquadragintillionths eight hundred forty one trecentrequadragintillionths nine hundred thirty eight trecenquattuorquadragintillionths four hundred sixty trecenquinquadragintillionths one hundred trecensexquadragintillionths",
                NumberStringUtility.numberStringToNumberPhrase("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601", NumberStringUtility.FractionMode.FANCY));
        
        //invalid
        Assert.assertEquals("zero",
                NumberStringUtility.numberStringToNumberPhrase(""));
        TestUtils.assertException(NumberFormatException.class, "The string: 'three' does not represent a number", () ->
                NumberStringUtility.numberStringToNumberPhrase("three"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'test' does not represent a number", () ->
                NumberStringUtility.numberStringToNumberPhrase("test"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberStringToNumberPhrase(null));
    }
    
    /**
     * JUnit test of numberToNumberPhrase.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberToNumberPhrase(Number, NumberStringUtility.FractionMode)
     * @see NumberStringUtility#numberToNumberPhrase(Number)
     */
    @Test
    public void testNumberToNumberPhrase() throws Exception {
        //simple cases
        Assert.assertEquals("zero", NumberStringUtility.numberToNumberPhrase(0));
        Assert.assertEquals("one", NumberStringUtility.numberToNumberPhrase(1));
        Assert.assertEquals("two", NumberStringUtility.numberToNumberPhrase(2));
        Assert.assertEquals("three", NumberStringUtility.numberToNumberPhrase(3));
        Assert.assertEquals("four", NumberStringUtility.numberToNumberPhrase(4));
        Assert.assertEquals("five", NumberStringUtility.numberToNumberPhrase(5));
        Assert.assertEquals("six", NumberStringUtility.numberToNumberPhrase(6));
        Assert.assertEquals("seven", NumberStringUtility.numberToNumberPhrase(7));
        Assert.assertEquals("eight", NumberStringUtility.numberToNumberPhrase(8));
        Assert.assertEquals("nine", NumberStringUtility.numberToNumberPhrase(9));
        Assert.assertEquals("ten", NumberStringUtility.numberToNumberPhrase(10));
        Assert.assertEquals("eleven", NumberStringUtility.numberToNumberPhrase(11));
        Assert.assertEquals("twelve", NumberStringUtility.numberToNumberPhrase(12));
        Assert.assertEquals("thirteen", NumberStringUtility.numberToNumberPhrase(13));
        Assert.assertEquals("fourteen", NumberStringUtility.numberToNumberPhrase(14));
        Assert.assertEquals("fifteen", NumberStringUtility.numberToNumberPhrase(15));
        Assert.assertEquals("sixteen", NumberStringUtility.numberToNumberPhrase(16));
        Assert.assertEquals("seventeen", NumberStringUtility.numberToNumberPhrase(17));
        Assert.assertEquals("eighteen", NumberStringUtility.numberToNumberPhrase(18));
        Assert.assertEquals("nineteen", NumberStringUtility.numberToNumberPhrase(19));
        
        //two digit cases
        Assert.assertEquals("twenty", NumberStringUtility.numberToNumberPhrase(20));
        Assert.assertEquals("twenty five", NumberStringUtility.numberToNumberPhrase(25));
        Assert.assertEquals("thirty", NumberStringUtility.numberToNumberPhrase(30));
        Assert.assertEquals("thirty one", NumberStringUtility.numberToNumberPhrase(31));
        Assert.assertEquals("forty", NumberStringUtility.numberToNumberPhrase(40));
        Assert.assertEquals("forty six", NumberStringUtility.numberToNumberPhrase(46));
        Assert.assertEquals("fifty", NumberStringUtility.numberToNumberPhrase(50));
        Assert.assertEquals("fifty two", NumberStringUtility.numberToNumberPhrase(52));
        Assert.assertEquals("sixty", NumberStringUtility.numberToNumberPhrase(60));
        Assert.assertEquals("sixty eight", NumberStringUtility.numberToNumberPhrase(68));
        Assert.assertEquals("seventy", NumberStringUtility.numberToNumberPhrase(70));
        Assert.assertEquals("seventy seven", NumberStringUtility.numberToNumberPhrase(77));
        Assert.assertEquals("eighty", NumberStringUtility.numberToNumberPhrase(80));
        Assert.assertEquals("eighty three", NumberStringUtility.numberToNumberPhrase(83));
        Assert.assertEquals("ninety", NumberStringUtility.numberToNumberPhrase(90));
        Assert.assertEquals("ninety four", NumberStringUtility.numberToNumberPhrase(94));
        Assert.assertEquals("ninety nine", NumberStringUtility.numberToNumberPhrase(99));
        
        //three digit cases
        Assert.assertEquals("one hundred", NumberStringUtility.numberToNumberPhrase(100));
        Assert.assertEquals("one hundred fifty four", NumberStringUtility.numberToNumberPhrase(154));
        Assert.assertEquals("two hundred", NumberStringUtility.numberToNumberPhrase(200));
        Assert.assertEquals("two hundred nineteen", NumberStringUtility.numberToNumberPhrase(219));
        Assert.assertEquals("three hundred", NumberStringUtility.numberToNumberPhrase(300));
        Assert.assertEquals("three hundred seventy seven", NumberStringUtility.numberToNumberPhrase(377));
        Assert.assertEquals("four hundred", NumberStringUtility.numberToNumberPhrase(400));
        Assert.assertEquals("four hundred sixty eight", NumberStringUtility.numberToNumberPhrase(468));
        Assert.assertEquals("five hundred", NumberStringUtility.numberToNumberPhrase(500));
        Assert.assertEquals("five hundred ninety four", NumberStringUtility.numberToNumberPhrase(594));
        Assert.assertEquals("six hundred", NumberStringUtility.numberToNumberPhrase(600));
        Assert.assertEquals("six hundred eight", NumberStringUtility.numberToNumberPhrase(608));
        Assert.assertEquals("seven hundred", NumberStringUtility.numberToNumberPhrase(700));
        Assert.assertEquals("seven hundred seventy six", NumberStringUtility.numberToNumberPhrase(776));
        Assert.assertEquals("eight hundred", NumberStringUtility.numberToNumberPhrase(800));
        Assert.assertEquals("eight hundred forty two", NumberStringUtility.numberToNumberPhrase(842));
        Assert.assertEquals("nine hundred", NumberStringUtility.numberToNumberPhrase(900));
        Assert.assertEquals("nine hundred ninety nine", NumberStringUtility.numberToNumberPhrase(999));
        
        //larger cases
        Assert.assertEquals("one thousand",
                NumberStringUtility.numberToNumberPhrase(1000));
        Assert.assertEquals("six hundred forty three thousand eight hundred twenty two",
                NumberStringUtility.numberToNumberPhrase(643822));
        Assert.assertEquals("fifteen million six hundred twenty one thousand nine hundred seven",
                NumberStringUtility.numberToNumberPhrase(15621907));
        Assert.assertEquals("nine hundred forty six billion one hundred four million sixty seven thousand one",
                NumberStringUtility.numberToNumberPhrase(946104067001L));
        Assert.assertEquals("one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one",
                NumberStringUtility.numberToNumberPhrase(199486273416821L));
        Assert.assertEquals("one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one",
                NumberStringUtility.numberToNumberPhrase(199486000000821L));
        Assert.assertEquals("one quintillion nine hundred ninety four quadrillion eight hundred sixty trillion eight hundred twenty one million fifty four",
                NumberStringUtility.numberToNumberPhrase(1994860000821000054L));
        Assert.assertEquals("one quadrillion",
                NumberStringUtility.numberToNumberPhrase(1000000000000000L));
        Assert.assertEquals("one quintillion",
                NumberStringUtility.numberToNumberPhrase(1000000000000000000L));
        Assert.assertEquals("one quintillion",
                NumberStringUtility.numberToNumberPhrase(1E+18));
        
        //very large cases
        Assert.assertEquals("three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion four hundred ninety eight tredecillion four hundred six duodecillion four hundred undecillion",
                NumberStringUtility.numberToNumberPhrase(3.465874122498406416540464e54));
        Assert.assertEquals("ninety five septendecillion six hundred sixty one sexdecillion one hundred fifty six quindecillion four hundred sixty nine quattuordecillion eight hundred seventy tredecillion eight hundred ninety duodecillion",
                NumberStringUtility.numberToNumberPhrase(9.5661156469870891866575e55));
        Assert.assertEquals("one hundred eighty seven septendecillion four hundred forty two sexdecillion ninety quindecillion five hundred eight quattuordecillion nine hundred forty seven tredecillion nine hundred duodecillion",
                NumberStringUtility.numberToNumberPhrase(1.87442090508947896211611e56));
        Assert.assertEquals("two octodecillion ninety seven septendecillion seven hundred fifty one sexdecillion two hundred seventy four quindecillion six hundred fifty four quattuordecillion two hundred thirty nine tredecillion",
                NumberStringUtility.numberToNumberPhrase(2.097751274654238845697e57));
        Assert.assertEquals("seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion nine hundred eighty untrigintillion four hundred eighty nine trigintillion",
                NumberStringUtility.numberToNumberPhrase(7.46112387798048946516245e108));
        Assert.assertEquals("four duosexagintillion forty two sexagintillion three hundred thirty nine novemquinquagintillion three hundred three octoquinquagintillion sixty six septenquinquagintillion",
                NumberStringUtility.numberToNumberPhrase(4.0000423393030658480456e189));
        Assert.assertEquals("eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty eight octononagintillion nine hundred seventy septennonagintillion eight hundred fifty sexnonagintillion",
                NumberStringUtility.numberToNumberPhrase(8.4519974638970845601123169840566e307));
        
        //negative cases
        Assert.assertEquals("zero", NumberStringUtility.numberToNumberPhrase(-0));
        Assert.assertEquals("negative two", NumberStringUtility.numberToNumberPhrase(-2));
        Assert.assertEquals("negative four", NumberStringUtility.numberToNumberPhrase(-4));
        Assert.assertEquals("negative seven", NumberStringUtility.numberToNumberPhrase(-7));
        Assert.assertEquals("negative thirteen", NumberStringUtility.numberToNumberPhrase(-13));
        Assert.assertEquals("negative fourteen", NumberStringUtility.numberToNumberPhrase(-14));
        Assert.assertEquals("negative nineteen", NumberStringUtility.numberToNumberPhrase(-19));
        Assert.assertEquals("negative forty", NumberStringUtility.numberToNumberPhrase(-40));
        Assert.assertEquals("negative forty six", NumberStringUtility.numberToNumberPhrase(-46));
        Assert.assertEquals("negative fifty two", NumberStringUtility.numberToNumberPhrase(-52));
        Assert.assertEquals("negative seventy seven", NumberStringUtility.numberToNumberPhrase(-77));
        Assert.assertEquals("negative eighty", NumberStringUtility.numberToNumberPhrase(-80));
        Assert.assertEquals("negative ninety nine", NumberStringUtility.numberToNumberPhrase(-99));
        Assert.assertEquals("negative two hundred nineteen", NumberStringUtility.numberToNumberPhrase(-219));
        Assert.assertEquals("negative three hundred", NumberStringUtility.numberToNumberPhrase(-300));
        Assert.assertEquals("negative five hundred ninety four", NumberStringUtility.numberToNumberPhrase(-594));
        Assert.assertEquals("negative seven hundred seventy six", NumberStringUtility.numberToNumberPhrase(-776));
        Assert.assertEquals("negative nine hundred", NumberStringUtility.numberToNumberPhrase(-900));
        Assert.assertEquals("negative nine hundred ninety nine", NumberStringUtility.numberToNumberPhrase(-999));
        Assert.assertEquals("negative six hundred forty three thousand eight hundred twenty two",
                NumberStringUtility.numberToNumberPhrase(-643822));
        Assert.assertEquals("negative nine hundred forty six billion one hundred four million sixty seven thousand one",
                NumberStringUtility.numberToNumberPhrase(-946104067001L));
        Assert.assertEquals("negative one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one",
                NumberStringUtility.numberToNumberPhrase(-199486273416821L));
        Assert.assertEquals("negative one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one",
                NumberStringUtility.numberToNumberPhrase(-199486000000821L));
        Assert.assertEquals("negative three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion",
                NumberStringUtility.numberToNumberPhrase(-3.465874122e54));
        Assert.assertEquals("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e108));
        Assert.assertEquals("negative eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion",
                NumberStringUtility.numberToNumberPhrase(-8.451997463e307));
        
        //decimal cases
        Assert.assertEquals("zero", NumberStringUtility.numberToNumberPhrase(0.0));
        Assert.assertEquals("one tenth", NumberStringUtility.numberToNumberPhrase(0.1));
        Assert.assertEquals("six tenths", NumberStringUtility.numberToNumberPhrase(0.6));
        Assert.assertEquals("one hundredth", NumberStringUtility.numberToNumberPhrase(0.01));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberToNumberPhrase(0.08));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberToNumberPhrase(0.33));
        Assert.assertEquals("nine tenths", NumberStringUtility.numberToNumberPhrase(0.90));
        Assert.assertEquals("one thousandth", NumberStringUtility.numberToNumberPhrase(0.001));
        Assert.assertEquals("seven thousandths", NumberStringUtility.numberToNumberPhrase(0.007));
        Assert.assertEquals("seventy seven thousandths", NumberStringUtility.numberToNumberPhrase(0.077));
        Assert.assertEquals("seven hundred seventy seven thousandths", NumberStringUtility.numberToNumberPhrase(0.777));
        Assert.assertEquals("one hundred millionths", NumberStringUtility.numberToNumberPhrase(0.0001));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberToNumberPhrase(0.1001));
        Assert.assertEquals("two point one five four two", NumberStringUtility.numberToNumberPhrase(2.1542));
        Assert.assertEquals("nineteen and eight thousandths", NumberStringUtility.numberToNumberPhrase(19.008));
        Assert.assertEquals("forty and seventy four hundredths", NumberStringUtility.numberToNumberPhrase(40.74));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberToNumberPhrase(300.9141));
        Assert.assertEquals("five hundred ninety four", NumberStringUtility.numberToNumberPhrase(594.000));
        Assert.assertEquals("seven hundred seventy six and forty one hundredths", NumberStringUtility.numberToNumberPhrase(776.410));
        Assert.assertEquals("six hundred forty three thousand eight hundred twenty two point nine six four one",
                NumberStringUtility.numberToNumberPhrase(643822.9641));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberToNumberPhrase(0.00000000123456789));
        Assert.assertEquals("one hundred twenty three trillionths four hundred fifty six quadrillionths seven hundred eighty nine quintillionths",
                NumberStringUtility.numberToNumberPhrase(1.23456789E-10));
        Assert.assertEquals("twelve trillionths three hundred forty five quadrillionths six hundred seventy eight quintillionths nine hundred sextillionths",
                NumberStringUtility.numberToNumberPhrase(1.23456789E-11));
        Assert.assertEquals("one trillionth two hundred thirty four quadrillionths five hundred sixty seven quintillionths eight hundred ninety sextillionths",
                NumberStringUtility.numberToNumberPhrase(1.23456789E-12));
        Assert.assertEquals("one hundred twenty three quintillionths four hundred fifty six sextillionths seven hundred eighty nine septillionths",
                NumberStringUtility.numberToNumberPhrase(0.000000000123456789E-6));
        Assert.assertEquals("eight hundred sixty five quadrillionths four hundred thirty two quintillionths one hundred fifteen sextillionths four hundred seventy septillionths",
                NumberStringUtility.numberToNumberPhrase(8.6543211547E-13));
        Assert.assertEquals("fifteen and eight trillionths six hundred fifty four quadrillionths",
                NumberStringUtility.numberToNumberPhrase(15.0000000000086543211547));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty eight billionths",
                NumberStringUtility.numberToNumberPhrase(-9875116.000000167));
        
        //big decimal cases
        Assert.assertEquals("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("negative point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("fifty one viginmilliaquadringenseptentrigintillion two hundred thirty four viginmilliaquadringensextrigintillion six hundred forty one viginmilliaquadringenquintrigintillion two hundred thirty eight viginmilliaquadringenquattuortrigintillion seven hundred ninety four viginmilliaquadringentretrigintillion four hundred twenty one viginmilliaquadringenduotrigintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5.1234641238794421E61315")));
        
        //extremely large cases
        Assert.assertEquals("one hundred duocenunoctoginmilliamilliaoctingenseptuaginmilliaseptingenoctogintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E845612345")));
        Assert.assertEquals("ten duocenunoctoginmilliamilliaoctingenseptuaginmilliaseptingenunoctogintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E-845612345")));
        Assert.assertEquals("eighty four centretriginmilliamilliaquingenunquinquaginmilliaquadringennovemtillion five hundred thirteen centretriginmilliamilliaquingenunquinquaginmilliaquadringenoctotillion two hundred nineteen centretriginmilliamilliaquingenunquinquaginmilliaquadringenseptentillion eight hundred eighty three centretriginmilliamilliaquingenunquinquaginmilliaquadringensextillion seventy six centretriginmilliamilliaquingenunquinquaginmilliaquadringenquintillion three hundred centretriginmilliamilliaquingenunquinquaginmilliaquadringenquattuortillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("8.45132198830763E400654231")));
        Assert.assertEquals("eight hundred forty five centretriginmilliamilliaquingenunquinquaginmilliaquadringendecillionths one hundred thirty two centretriginmilliamilliaquingenunquinquaginmilliaquadringenundecillionths one hundred ninety eight centretriginmilliamilliaquingenunquinquaginmilliaquadringenduodecillionths eight hundred thirty centretriginmilliamilliaquingenunquinquaginmilliaquadringentredecillionths seven hundred sixty three centretriginmilliamilliaquingenunquinquaginmilliaquadringenquattuordecillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("8.45132198830763E-400654231")));
        Assert.assertEquals("negative one hundred duocenunoctoginmilliamilliaoctingenseptuaginmilliaseptingenoctogintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-1E845612345")));
        Assert.assertEquals("negative ten duocenunoctoginmilliamilliaoctingenseptuaginmilliaseptingenunoctogintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-1E-845612345")));
        Assert.assertEquals("negative eighty four centretriginmilliamilliaquingenunquinquaginmilliaquadringennovemtillion five hundred thirteen centretriginmilliamilliaquingenunquinquaginmilliaquadringenoctotillion two hundred nineteen centretriginmilliamilliaquingenunquinquaginmilliaquadringenseptentillion eight hundred eighty three centretriginmilliamilliaquingenunquinquaginmilliaquadringensextillion seventy six centretriginmilliamilliaquingenunquinquaginmilliaquadringenquintillion three hundred centretriginmilliamilliaquingenunquinquaginmilliaquadringenquattuortillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-8.45132198830763E400654231")));
        Assert.assertEquals("negative eight hundred forty five centretriginmilliamilliaquingenunquinquaginmilliaquadringendecillionths one hundred thirty two centretriginmilliamilliaquingenunquinquaginmilliaquadringenundecillionths one hundred ninety eight centretriginmilliamilliaquingenunquinquaginmilliaquadringenduodecillionths eight hundred thirty centretriginmilliamilliaquingenunquinquaginmilliaquadringentredecillionths seven hundred sixty three centretriginmilliamilliaquingenunquinquaginmilliaquadringenquattuordecillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-8.45132198830763E-400654231")));
        
        //exponential notation
        Assert.assertEquals("one hundred forty five billion",
                NumberStringUtility.numberToNumberPhrase(1.45e11));
        Assert.assertEquals("fifty five quintillionths one hundred sixty three sextillionths two hundred twenty septillionths",
                NumberStringUtility.numberToNumberPhrase(5.516322e-17));
        Assert.assertEquals("seventy one thousand five hundred forty six and eleven hundredths",
                NumberStringUtility.numberToNumberPhrase(715.4611e2));
        Assert.assertEquals("seventy one point five four six one one",
                NumberStringUtility.numberToNumberPhrase(715.4611e-1));
        Assert.assertEquals("negative point seven one five four six one one",
                NumberStringUtility.numberToNumberPhrase(-715.4611e-3));
        Assert.assertEquals("negative seven million one hundred fifty four thousand six hundred eleven",
                NumberStringUtility.numberToNumberPhrase(-715.4611e4));
        Assert.assertEquals("point zero zero seven one five four six one one",
                NumberStringUtility.numberToNumberPhrase(7.154611e-3));
        Assert.assertEquals("seven trillion one hundred fifty four billion six hundred eleven million",
                NumberStringUtility.numberToNumberPhrase(715.4611e10));
        Assert.assertEquals("negative seventy one billionths five hundred forty six trillionths one hundred ten quadrillionths",
                NumberStringUtility.numberToNumberPhrase(-715.4611e-10));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberToNumberPhrase(0.0007154611e6));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberToNumberPhrase(715461100000.00e-9));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberToNumberPhrase(715.4611e0));
        Assert.assertEquals("seven hundred fifteen point four six one one",
                NumberStringUtility.numberToNumberPhrase(715.4611e-0));
        Assert.assertEquals("one septendecillion",
                NumberStringUtility.numberToNumberPhrase(1e54));
        Assert.assertEquals("one septendecillionth",
                NumberStringUtility.numberToNumberPhrase(1e-54));
        Assert.assertEquals("seven hundred sexdecillion",
                NumberStringUtility.numberToNumberPhrase(7e53));
        Assert.assertEquals("seventy sexdecillion",
                NumberStringUtility.numberToNumberPhrase(7e52));
        Assert.assertEquals("seven hundred forty five sexdecillion one hundred quindecillion",
                NumberStringUtility.numberToNumberPhrase(7.451e53));
        Assert.assertEquals("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e108));
        Assert.assertEquals("negative seventy four quintrigintillion six hundred eleven quattuortrigintillion two hundred thirty eight tretrigintillion seven hundred seventy duotrigintillion",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e109));
        Assert.assertEquals("negative seven hundred forty six quintrigintillion one hundred twelve quattuortrigintillion three hundred eighty seven tretrigintillion seven hundred duotrigintillion",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e110));
        Assert.assertEquals("negative seven quintrigintillionths four hundred sixty one sextrigintillionths one hundred twenty three septentrigintillionths eight hundred seventy seven octotrigintillionths",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e-108));
        Assert.assertEquals("negative seven hundred forty six sextrigintillionths one hundred twelve septentrigintillionths three hundred eighty seven octotrigintillionths seven hundred novemtrigintillionths",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e-109));
        Assert.assertEquals("negative seventy four sextrigintillionths six hundred eleven septentrigintillionths two hundred thirty eight octotrigintillionths seven hundred seventy novemtrigintillionths",
                NumberStringUtility.numberToNumberPhrase(-7.461123877e-110));
        
        //precision
        Assert.assertEquals("one quadrillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1000000000000000")));
        Assert.assertEquals("ten quadrillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E+16")));
        Assert.assertEquals("ten quadrillion one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("10000000000000001")));
        Assert.assertEquals("fifty five quintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5.5E+19")));
        Assert.assertEquals("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty billion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5.586322916E+19")));
        Assert.assertEquals("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty one billion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("55863229161000000000")));
        Assert.assertEquals("fifty quintillion one billion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("50000000001000000000")));
        Assert.assertEquals("one quadrillionth",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.000000000000001")));
        Assert.assertEquals("one hundred quintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E-16")));
        Assert.assertEquals("one and one hundred quintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1.0000000000000001")));
        Assert.assertEquals("five quadrillionths five hundred quintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5.5E-15")));
        Assert.assertEquals("fifty five trillionths eight hundred sixty three quadrillionths two hundred twenty nine quintillionths one hundred sixty sextillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("5.586322916E-11")));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero five five eight six three two two nine one six one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000000055863229161")));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero five zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000000050000000001")));
        Assert.assertEquals("six vigintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6E+63")));
        Assert.assertEquals("sixty vigintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6E+64")));
        Assert.assertEquals("sixty vigintillion two billion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6.0000000000000000000000000000000000000000000000000000002E+64")));
        Assert.assertEquals("sixty vigintillion two",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("60000000000000000000000000000000000000000000000000000000000000002")));
        Assert.assertEquals("six vigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6E-63")));
        Assert.assertEquals("six hundred unvigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6E-64")));
        Assert.assertEquals("six tenths two hundred unvigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.6000000000000000000000000000000000000000000000000000000000000002")));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero six zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero two",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.000000000000000000000000000000060000000000000000000000000000002")));
        Assert.assertEquals("six decillionths two hundred unvigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6.0000000000000000000000000000002E-33")));
        Assert.assertEquals("six decillionths twenty unvigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6.00000000000000000000000000000002E-33")));
        Assert.assertEquals("six hundred undecillionths two hundred duovigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("6.000000000000000000000000000000002E-34")));
        Assert.assertEquals("nine trecenquadragintillion",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("9E+1023")));
        Assert.assertEquals("nine trecenquadragintillion one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("ninety trecenquadragintillion one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("ninety trecenquadragintillion ten",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine trecentrequadragintillion eight hundred thirty four million six hundred eighteen thousand ninety two",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine trecentrequadragintillion one billion eight hundred thirty four million six hundred eighteen thousand ninety two",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine trecenquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("9E-1023")));
        Assert.assertEquals("nine tenths one hundred trecenunquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine tenths one hundred trecenunquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("nine tenths eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000834618092")));
        Assert.assertEquals("nine tenths one hundred eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal
        Assert.assertEquals("thirty five trecentrequadragintillion six hundred eighty four trecenduoquadragintillion five hundred forty four trecenunquadragintillion seventy five trecenquadragintillion seven trecennovemtrigintillion eight hundred eighty nine trecenoctotrigintillion three hundred fifty two trecenseptentrigintillion eight hundred twelve trecensextrigintillion seven hundred thirty seven trecenquintrigintillion three hundred ninety nine trecenquattuortrigintillion five hundred eleven trecentretrigintillion nine hundred nine trecenduotrigintillion one hundred fifteen trecenuntrigintillion three hundred thirty three trecentrigintillion one hundred two trecennovemvigintillion three hundred eighty six trecenoctovigintillion three hundred twenty six trecenseptenvigintillion eight hundred ninety four trecensexvigintillion seven hundred twenty trecenquinvigintillion six hundred thirty trecenquattuorvigintillion five hundred thirty four trecentrevigintillion four hundred ninety eight trecenduovigintillion three hundred twenty trecenunvigintillion eight hundred eighty two trecenvigintillion one hundred fifteen trecennovemdecillion five hundred eighty six trecenoctodecillion one hundred eighty six trecenseptendecillion two hundred fifty trecensexdecillion eight hundred fifty two trecenquindecillion one hundred six trecenquattuordecillion two hundred twenty nine trecentredecillion five hundred seventy eight trecenduodecillion eight hundred forty two trecenundecillion eight hundred forty seven trecendecillion seven hundred ninety one trecennovemtillion three hundred twenty six trecenoctotillion one hundred seventy two trecensextillion four hundred sixty two trecenquintillion one hundred fifty two trecenquattuortillion two hundred thirty seven trecentretillion three trecenduotillion nine hundred forty one trecenuntillion six hundred thirty six trecentillion seven hundred seventy seven duocennovemnonagintillion one hundred sixty two duocenoctononagintillion seven hundred forty seven duocenseptennonagintillion nine hundred ninety seven duocensexnonagintillion eight hundred seventy seven duocenquinnonagintillion six hundred forty two duocenquattuornonagintillion two hundred sixty two duocentrenonagintillion three hundred eleven duocenduononagintillion two hundred eight duocenunnonagintillion nine hundred nineteen duocennonagintillion one hundred nineteen duocennovemoctogintillion five hundred thirteen duocenoctooctogintillion three hundred eighty three duocenseptenoctogintillion five hundred forty one duocensexoctogintillion one hundred fifty two duocenquinoctogintillion five hundred fifty seven duocenquattuoroctogintillion one hundred fifty one duocentreoctogintillion two hundred three duocenduooctogintillion six hundred forty nine duocenunoctogintillion two hundred seven duocenoctogintillion one hundred fifty duocennovemseptuagintillion two hundred fifty one duocenoctoseptuagintillion four hundred sixty four duocenseptenseptuagintillion nine hundred ninety eight duocensexseptuagintillion four hundred twenty six duocenquinseptuagintillion sixty one duocenquattuorseptuagintillion six hundred ninety six duocentreseptuagintillion six hundred seventy four duocenduoseptuagintillion seven hundred seventy eight duocenunseptuagintillion three hundred seventy duocenseptuagintillion sixty one duocennovemsexagintillion seven hundred thirty five duocenoctosexagintillion one duocenseptensexagintillion two hundred thirty three duocensexsexagintillion four hundred eighty seven duocenquinsexagintillion three hundred forty five duocenquattuorsexagintillion nine hundred forty six duocentresexagintillion two hundred fifty seven duocenduosexagintillion eight hundred sixteen duocenunsexagintillion seven hundred sixty one duocensexagintillion eight hundred seventy nine duocennovemquinquagintillion seven hundred twenty one duocenoctoquinquagintillion seven hundred forty three duocenseptenquinquagintillion five hundred twenty two duocensexquinquagintillion five hundred seventy seven duocenquinquinquagintillion nine hundred fifty five duocenquattuorquinquagintillion nine hundred sixty two duocentrequinquagintillion six hundred fifteen duocenduoquinquagintillion two hundred fifty duocenunquinquagintillion one hundred one duocenquinquagintillion two hundred sixteen duocennovemquadragintillion one hundred seventy eight duocenoctoquadragintillion three hundred seventeen duocenseptenquadragintillion four hundred seventy three duocensexquadragintillion twenty six duocenquinquadragintillion eight hundred sixty seven duocenquattuorquadragintillion three hundred sixty two duocentrequadragintillion two hundred three duocenduoquadragintillion two hundred forty nine duocenunquadragintillion three hundred forty six duocenquadragintillion seven hundred seventy duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion two hundred sixteen duocenseptentrigintillion seven hundred thirty two duocensextrigintillion eight hundred ten duocenquintrigintillion three hundred eighty five duocenquattuortrigintillion four hundred eighty five duocentretrigintillion one hundred eighty duocenduotrigintillion four hundred ninety three duocenuntrigintillion three hundred eight duocentrigintillion seven hundred forty duocennovemvigintillion four hundred seventy seven duocenoctovigintillion three hundred eighty two duocenseptenvigintillion six hundred sixteen duocensexvigintillion four hundred sixty duocenquinvigintillion sixty two duocenquattuorvigintillion five hundred seventy eight duocentrevigintillion six hundred seventy six duocenduovigintillion five hundred thirty nine duocenunvigintillion three hundred twenty one duocenvigintillion thirty six duocennovemdecillion nine hundred five duocenoctodecillion five hundred twenty five duocenseptendecillion five hundred thirteen duocensexdecillion three hundred thirty six duocenquindecillion two hundred ninety four duocenquattuordecillion seven hundred eighty nine duocentredecillion two hundred ninety three duocenduodecillion two hundred thirty six duocenundecillion two hundred twenty eight duocendecillion three hundred sixty one duocennovemtillion thirty four duocenoctotillion one hundred eighty three duocenseptentillion eight hundred ninety three duocensextillion nine hundred thirty four duocenquintillion six hundred fifty duocenquattuortillion five hundred ninety duocentretillion five hundred sixty three duocenduotillion two hundred eighty duocenuntillion six hundred fourteen duocentillion nine hundred twenty eight cennovemnonagintillion eight hundred twenty eight cenoctononagintillion one hundred ninety nine censeptennonagintillion thirty seven censexnonagintillion seven cenquinnonagintillion seven hundred fifty eight cenquattuornonagintillion seven hundred twenty six centrenonagintillion nine hundred eighty cenduononagintillion three hundred eighty six cenunnonagintillion seven hundred seventeen cennonagintillion forty cennovemoctogintillion one hundred sixty nine cenoctooctogintillion nine hundred twenty eight censeptenoctogintillion seventy eight censexoctogintillion seven hundred fifty one cenquinoctogintillion nine hundred fifty nine cenquattuoroctogintillion one hundred fifteen centreoctogintillion four hundred eight cenduooctogintillion eight hundred thirty three cenunoctogintillion twenty five cenoctogintillion four hundred ninety cennovemseptuagintillion five hundred forty nine cenoctoseptuagintillion four hundred eighty two censeptenseptuagintillion seven hundred nine censexseptuagintillion one hundred ninety three cenquinseptuagintillion two hundred ninety eight cenquattuorseptuagintillion four hundred eleven centreseptuagintillion four hundred ninety two cenduoseptuagintillion one hundred one cenunseptuagintillion five hundred twenty one censeptuagintillion six hundred cennovemsexagintillion two hundred twenty two cenoctosexagintillion five hundred thirty nine censeptensexagintillion six hundred seven censexsexagintillion nine hundred sixteen cenquinsexagintillion seven hundred eleven cenquattuorsexagintillion seven hundred forty seven centresexagintillion four hundred sixty five cenduosexagintillion two hundred fifty eight cenunsexagintillion one hundred eighty nine censexagintillion three hundred sixty one cennovemquinquagintillion one hundred sixty four cenoctoquinquagintillion nine hundred seventy three censeptenquinquagintillion six hundred forty one censexquinquagintillion four hundred ninety four cenquinquinquagintillion eight hundred cenquattuorquinquagintillion three hundred sixty five centrequinquagintillion sixty five cenduoquinquagintillion four hundred eighteen cenunquinquagintillion eight hundred fifty eight cenquinquagintillion one hundred seventy eight cennovemquadragintillion three hundred ninety nine cenoctoquadragintillion eight hundred fifty seven censeptenquadragintillion eight hundred ninety three censexquadragintillion three hundred forty three cenquinquadragintillion three hundred eight cenquattuorquadragintillion six hundred seventy four centrequadragintillion eighty one cenduoquadragintillion six hundred eighty five cenunquadragintillion five hundred fifty one cenquadragintillion five hundred ninety seven cennovemtrigintillion seven hundred twenty six cenoctotrigintillion five hundred seventy four censeptentrigintillion four hundred forty one censextrigintillion three hundred forty eight cenquintrigintillion seven hundred fifty five cenquattuortrigintillion six hundred seventy three centretrigintillion three hundred forty five cenduotrigintillion eight hundred seventy one cenuntrigintillion one hundred sixty three centrigintillion five hundred fifty five cennovemvigintillion eight hundred forty nine cenoctovigintillion eight hundred twenty five censeptenvigintillion four hundred forty four censexvigintillion seven hundred twenty cenquinvigintillion five hundred ten cenquattuorvigintillion one hundred two centrevigintillion eight hundred thirteen cenduovigintillion two hundred fifteen cenunvigintillion five hundred twenty eight cenvigintillion seven hundred sixty nine cennovemdecillion seven hundred fifty six cenoctodecillion eleven censeptendecillion four hundred thirty eight censexdecillion four hundred twelve cenquindecillion fifty cenquattuordecillion nine hundred three centredecillion nine hundred thirty four cenduodecillion two hundred eighty six cenundecillion eight hundred twenty three cendecillion seven hundred nine cennovemtillion one cenoctotillion seven hundred sixty three censeptentillion nine hundred forty four censextillion nine hundred ninety cenquintillion nine hundred sixty five cenquattuortillion six hundred thirty nine centretillion nine hundred ninety one cenduotillion three hundred sixty three cenuntillion five hundred nine centillion five hundred thirty two novemnonagintillion six hundred forty three octononagintillion sixty one septennonagintillion six hundred forty sexnonagintillion eight hundred seventy five quinnonagintillion four hundred twenty one quattuornonagintillion sixty two trenonagintillion six hundred thirty duononagintillion six hundred eighty four unnonagintillion eight hundred fifty one nonagintillion seven hundred eighty novemoctogintillion eight hundred nine octooctogintillion eight hundred twenty two septenoctogintillion five hundred nineteen sexoctogintillion six hundred fifty three quinoctogintillion four hundred ninety four quattuoroctogintillion seventy six treoctogintillion six hundred seventy eight duooctogintillion nine hundred seven unoctogintillion eight hundred octogintillion four hundred thirty seven novemseptuagintillion two hundred eighty five octoseptuagintillion four hundred seventy four septenseptuagintillion four hundred sexseptuagintillion eight hundred twenty eight quinseptuagintillion eight hundred seventy seven quattuorseptuagintillion three hundred eighty two treseptuagintillion four hundred sixty one duoseptuagintillion seventy one unseptuagintillion seven hundred forty four septuagintillion one hundred ninety nine novemsexagintillion two hundred twenty five octosexagintillion seven hundred thirty one septensexagintillion eight hundred eighty nine sexsexagintillion one hundred eighty nine quinsexagintillion two hundred seventy two quattuorsexagintillion five hundred sixty three tresexagintillion two hundred eighty one duosexagintillion four hundred ninety three unsexagintillion fifty four sexagintillion one hundred eight novemquinquagintillion nine hundred twenty six octoquinquagintillion five hundred five septenquinquagintillion two hundred seventy seven sexquinquagintillion nine hundred forty three quinquinquagintillion six hundred twenty six quattuorquinquagintillion seven hundred thirty three trequinquagintillion four hundred fifty six duoquinquagintillion one hundred sixty nine unquinquagintillion four hundred eighty six quinquagintillion six hundred nine novemquadragintillion seven hundred ninety four octoquadragintillion two hundred fifty four septenquadragintillion six hundred sixty eight sexquadragintillion four hundred eighteen quinquadragintillion nine hundred twenty six quattuorquadragintillion eight hundred forty six trequadragintillion seven hundred sixty six duoquadragintillion five hundred sixty five unquadragintillion thirty eight quadragintillion two hundred sixteen novemtrigintillion five hundred eighty two octotrigintillion one hundred twenty six septentrigintillion eight hundred ninety sextrigintillion five hundred fifty six quintrigintillion eight hundred forty four quattuortrigintillion one hundred eighty six tretrigintillion twenty one duotrigintillion six hundred ninety untrigintillion eight hundred forty six trigintillion eight hundred fifty novemvigintillion eight hundred ninety seven octovigintillion six hundred seventeen septenvigintillion seven hundred thirty four sexvigintillion five hundred fifty seven quinvigintillion three hundred seventy quattuorvigintillion nine hundred forty five trevigintillion two hundred seventy duovigintillion nine hundred eighty seven unvigintillion five hundred sixteen vigintillion one hundred thirty one novemdecillion two hundred seventy six octodecillion eight hundred forty one septendecillion sixteen sexdecillion four hundred eighty five quindecillion six hundred eighty eight quattuordecillion one hundred twenty nine tredecillion nine hundred sixty eight duodecillion twenty four undecillion six hundred forty seven decillion one hundred forty seven nonillion four hundred forty octillion twelve septillion nine hundred nineteen sextillion nine hundred fifty five quintillion fifty seven quadrillion eight hundred ninety one trillion eight hundred eighteen billion four hundred nineteen million three hundred eighty four thousand six hundred one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("thirty five thousand six hundred eighty four point five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("35684.544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("three point five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("three duocenunnonagintillion five hundred sixty eight duocennonagintillion four hundred fifty four duocennovemoctogintillion four hundred seven duocenoctooctogintillion five hundred duocenseptenoctogintillion seven hundred eighty eight duocensexoctogintillion nine hundred thirty five duocenquinoctogintillion two hundred eighty one duocenquattuoroctogintillion two hundred seventy three duocentreoctogintillion seven hundred thirty nine duocenduooctogintillion nine hundred fifty one duocenunoctogintillion one hundred ninety duocenoctogintillion nine hundred eleven duocennovemseptuagintillion five hundred thirty three duocenoctoseptuagintillion three hundred ten duocenseptenseptuagintillion two hundred thirty eight duocensexseptuagintillion six hundred thirty two duocenquinseptuagintillion six hundred eighty nine duocenquattuorseptuagintillion four hundred seventy two duocentreseptuagintillion sixty three duocenduoseptuagintillion fifty three duocenunseptuagintillion four hundred forty nine duocenseptuagintillion eight hundred thirty two duocennovemsexagintillion eighty eight duocenoctosexagintillion two hundred eleven duocenseptensexagintillion five hundred fifty eight duocensexsexagintillion six hundred eighteen duocenquinsexagintillion six hundred twenty five duocenquattuorsexagintillion eighty five duocentresexagintillion two hundred ten duocenduosexagintillion six hundred twenty two duocenunsexagintillion nine hundred fifty seven duocensexagintillion eight hundred eighty four duocennovemquinquagintillion two hundred eighty four duocenoctoquinquagintillion seven hundred seventy nine duocenseptenquinquagintillion one hundred thirty two duocensexquinquagintillion six hundred duocenquinquinquagintillion seventeen duocenquattuorquinquagintillion two hundred forty six duocentrequinquagintillion two hundred fifteen duocenduoquinquagintillion two hundred twenty three duocenunquinquagintillion seven hundred duocenquinquagintillion three hundred ninety four duocennovemquadragintillion one hundred sixty three duocenoctoquadragintillion six hundred seventy seven duocenseptenquadragintillion seven hundred sixteen duocensexquadragintillion two hundred seventy four duocenquinquadragintillion seven hundred ninety nine duocenquattuorquadragintillion seven hundred eighty seven duocentrequadragintillion seven hundred sixty four duocenduoquadragintillion two hundred twenty six duocenunquadragintillion two hundred thirty one duocenquadragintillion one hundred twenty duocennovemtrigintillion eight hundred ninety one duocenoctotrigintillion nine hundred eleven duocenseptentrigintillion nine hundred fifty one duocensextrigintillion three hundred thirty eight duocenquintrigintillion three hundred fifty four duocenquattuortrigintillion one hundred fifteen duocentretrigintillion two hundred fifty five duocenduotrigintillion seven hundred fifteen duocenuntrigintillion one hundred twenty duocentrigintillion three hundred sixty four duocennovemvigintillion nine hundred twenty duocenoctovigintillion seven hundred fifteen duocenseptenvigintillion twenty five duocensexvigintillion one hundred forty six duocenquinvigintillion four hundred ninety nine duocenquattuorvigintillion eight hundred forty two duocentrevigintillion six hundred six duocenduovigintillion one hundred sixty nine duocenunvigintillion six hundred sixty seven duocenvigintillion four hundred seventy seven duocennovemdecillion eight hundred thirty seven duocenoctodecillion six duocenseptendecillion one hundred seventy three duocensexdecillion five hundred duocenquindecillion one hundred twenty three duocenquattuordecillion three hundred forty eight duocentredecillion seven hundred thirty four duocenduodecillion five hundred ninety four duocenundecillion six hundred twenty five duocendecillion seven hundred eighty one duocennovemtillion six hundred seventy six duocenoctotillion one hundred eighty seven duocenseptentillion nine hundred seventy two duocensextillion one hundred seventy four duocenquintillion three hundred fifty two duocenquattuortillion two hundred fifty seven duocentretillion seven hundred ninety five duocenduotillion five hundred ninety six duocenuntillion two hundred sixty one duocentillion five hundred twenty five cennovemnonagintillion ten cenoctononagintillion one hundred twenty one censeptennonagintillion six hundred seventeen censexnonagintillion eight hundred thirty one cenquinnonagintillion seven hundred forty seven cenquattuornonagintillion three hundred two centrenonagintillion six hundred eighty six cenduononagintillion seven hundred thirty six cenunnonagintillion two hundred twenty cennonagintillion three hundred twenty four cennovemoctogintillion nine hundred thirty four cenoctooctogintillion six hundred seventy seven censeptenoctogintillion thirty two censexoctogintillion four hundred twenty one cenquinoctogintillion six hundred seventy three cenquattuoroctogintillion two hundred eighty one centreoctogintillion thirty eight cenduooctogintillion five hundred forty eight cenunoctogintillion five hundred eighteen cenoctogintillion forty nine cennovemseptuagintillion three hundred thirty cenoctoseptuagintillion eight hundred seventy four censeptenseptuagintillion forty seven censexseptuagintillion seven hundred thirty eight cenquinseptuagintillion two hundred sixty one cenquattuorseptuagintillion six hundred forty six centreseptuagintillion six cenduoseptuagintillion two hundred fifty seven cenunseptuagintillion eight hundred sixty seven censeptuagintillion six hundred fifty three cennovemsexagintillion nine hundred thirty two cenoctosexagintillion one hundred three censeptensexagintillion six hundred ninety censexsexagintillion five hundred fifty two cenquinsexagintillion five hundred fifty one cenquattuorsexagintillion three hundred thirty three centresexagintillion six hundred twenty nine cenduosexagintillion four hundred seventy eight cenunsexagintillion nine hundred twenty nine censexagintillion three hundred twenty three cennovemquinquagintillion six hundred twenty two cenoctoquinquagintillion eight hundred thirty six censeptenquinquagintillion one hundred three censexquinquagintillion four hundred eighteen cenquinquinquagintillion three hundred eighty nine cenquattuorquinquagintillion three hundred ninety three centrequinquagintillion four hundred sixty five cenduoquinquagintillion fifty nine cenunquinquagintillion fifty six cenquinquagintillion three hundred twenty eight cennovemquadragintillion sixty one cenoctoquadragintillion four hundred ninety two censeptenquadragintillion eight hundred eighty two censexquadragintillion eight hundred nineteen cenquinquadragintillion nine hundred three cenquattuorquadragintillion seven hundred centrequadragintillion seven hundred seventy five cenduoquadragintillion eight hundred seventy two cenunquadragintillion six hundred ninety eight cenquadragintillion thirty eight cennovemtrigintillion six hundred seventy one cenoctotrigintillion seven hundred four censeptentrigintillion sixteen censextrigintillion nine hundred ninety two cenquintrigintillion eight hundred seven cenquattuortrigintillion eight hundred seventy five centretrigintillion one hundred ninety five cenduotrigintillion nine hundred eleven cenuntrigintillion five hundred forty centrigintillion eight hundred eighty three cennovemvigintillion three hundred two cenoctovigintillion five hundred forty nine censeptenvigintillion fifty four censexvigintillion nine hundred forty eight cenquinvigintillion two hundred seventy cenquattuorvigintillion nine hundred nineteen centrevigintillion three hundred twenty nine cenduovigintillion eight hundred forty one cenunvigintillion one hundred forty nine cenvigintillion two hundred ten cennovemdecillion one hundred fifty two cenoctodecillion one hundred sixty censeptendecillion twenty two censexdecillion two hundred fifty three cenquindecillion nine hundred sixty cenquattuordecillion seven hundred ninety one centredecillion six hundred seventy one cenduodecillion one hundred seventy four cenundecillion seven hundred forty six cendecillion five hundred twenty five cennovemtillion eight hundred eighteen cenoctotillion nine hundred thirty six censeptentillion one hundred sixteen censextillion four hundred ninety seven cenquintillion three hundred sixty four cenquattuortillion one hundred forty nine centretillion four hundred eighty cenduotillion thirty six cenuntillion five hundred six centillion five hundred forty one novemnonagintillion eight hundred eighty five octononagintillion eight hundred seventeen septennonagintillion eight hundred thirty nine sexnonagintillion nine hundred eighty five quinnonagintillion seven hundred eighty nine quattuornonagintillion three hundred thirty four trenonagintillion three hundred thirty duononagintillion eight hundred sixty seven unnonagintillion four hundred eight nonagintillion one hundred sixty eight novemoctogintillion five hundred fifty five octooctogintillion one hundred fifty nine septenoctogintillion seven hundred seventy two sexoctogintillion six hundred fifty seven quinoctogintillion four hundred forty four quattuoroctogintillion one hundred thirty four treoctogintillion eight hundred seventy five duooctogintillion five hundred sixty seven unoctogintillion three hundred thirty four octogintillion five hundred eighty seven novemseptuagintillion one hundred sixteen octoseptuagintillion three hundred fifty five septenseptuagintillion five hundred eighty four sexseptuagintillion nine hundred eighty two quinseptuagintillion five hundred forty four quattuorseptuagintillion four hundred seventy two treseptuagintillion fifty one duoseptuagintillion ten unseptuagintillion two hundred eighty one septuagintillion three hundred twenty one novemsexagintillion five hundred fifty two octosexagintillion eight hundred seventy six septensexagintillion nine hundred seventy five sexsexagintillion six hundred one quinsexagintillion one hundred forty three quattuorsexagintillion eight hundred forty one tresexagintillion two hundred five duosexagintillion ninety unsexagintillion three hundred ninety three sexagintillion four hundred twenty eight novemquinquagintillion six hundred eighty two octoquinquagintillion three hundred seventy septenquinquagintillion nine hundred sexquinquagintillion one hundred seventy six quinquinquagintillion three hundred ninety four quattuorquinquagintillion four hundred ninety nine trequinquagintillion ninety six duoquinquagintillion five hundred sixty three unquinquagintillion nine hundred ninety nine quinquagintillion one hundred thirty six novemquadragintillion three hundred fifty octoquadragintillion nine hundred fifty three septenquadragintillion two hundred sixty four sexquadragintillion three hundred six quinquadragintillion one hundred sixty four quattuorquadragintillion eighty seven trequadragintillion five hundred forty two duoquadragintillion one hundred six unquadragintillion two hundred sixty three quadragintillion sixty eight novemtrigintillion four hundred eighty five octotrigintillion one hundred seventy eight septentrigintillion eighty sextrigintillion nine hundred eighty two quintrigintillion two hundred fifty one quattuortrigintillion nine hundred sixty five tretrigintillion three hundred forty nine duotrigintillion four hundred seven untrigintillion six hundred sixty seven trigintillion eight hundred ninety novemvigintillion seven hundred eighty octovigintillion forty three septenvigintillion seven hundred twenty eight sexvigintillion five hundred forty seven quinvigintillion four hundred forty quattuorvigintillion eighty two trevigintillion eight hundred eighty seven duovigintillion seven hundred thirty eight unvigintillion two hundred forty six vigintillion one hundred seven novemdecillion one hundred seventy four octodecillion four hundred nineteen septendecillion nine hundred twenty two sexdecillion five hundred seventy three quindecillion one hundred eighty eight quattuordecillion nine hundred eighteen tredecillion nine hundred twenty seven duodecillion two hundred fifty six undecillion three hundred twenty eight decillion one hundred forty nine nonillion three hundred five octillion four hundred ten septillion eight hundred ninety two sextillion six hundred fifty quintillion five hundred twenty seven quadrillion seven hundred ninety four trillion three hundred sixty two billion six hundred seventy three million three hundred forty five thousand six hundred sixteen point nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.9486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("three trecenquadragintillion five hundred sixty eight trecennovemtrigintillion four hundred fifty four trecenoctotrigintillion four hundred seven trecenseptentrigintillion five hundred trecensextrigintillion seven hundred eighty eight trecenquintrigintillion nine hundred thirty five trecenquattuortrigintillion two hundred eighty one trecentretrigintillion two hundred seventy three trecenduotrigintillion seven hundred thirty nine trecenuntrigintillion nine hundred fifty one trecentrigintillion one hundred ninety trecennovemvigintillion nine hundred eleven trecenoctovigintillion five hundred thirty three trecenseptenvigintillion three hundred ten trecensexvigintillion two hundred thirty eight trecenquinvigintillion six hundred thirty two trecenquattuorvigintillion six hundred eighty nine trecentrevigintillion four hundred seventy two trecenduovigintillion sixty three trecenunvigintillion fifty three trecenvigintillion four hundred forty nine trecennovemdecillion eight hundred thirty two trecenoctodecillion eighty eight trecenseptendecillion two hundred eleven trecensexdecillion five hundred fifty eight trecenquindecillion six hundred eighteen trecenquattuordecillion six hundred twenty five trecentredecillion eighty five trecenduodecillion two hundred ten trecenundecillion six hundred twenty two trecendecillion nine hundred fifty seven trecennovemtillion eight hundred eighty four trecenoctotillion two hundred eighty four trecenseptentillion seven hundred seventy nine trecensextillion one hundred thirty two trecenquintillion six hundred trecenquattuortillion seventeen trecentretillion two hundred forty six trecenduotillion two hundred fifteen trecenuntillion two hundred twenty three trecentillion seven hundred duocennovemnonagintillion three hundred ninety four duocenoctononagintillion one hundred sixty three duocenseptennonagintillion six hundred seventy seven duocensexnonagintillion seven hundred sixteen duocenquinnonagintillion two hundred seventy four duocenquattuornonagintillion seven hundred ninety nine duocentrenonagintillion seven hundred eighty seven duocenduononagintillion seven hundred sixty four duocenunnonagintillion two hundred twenty six duocennonagintillion two hundred thirty one duocennovemoctogintillion one hundred twenty duocenoctooctogintillion eight hundred ninety one duocenseptenoctogintillion nine hundred eleven duocensexoctogintillion nine hundred fifty one duocenquinoctogintillion three hundred thirty eight duocenquattuoroctogintillion three hundred fifty four duocentreoctogintillion one hundred fifteen duocenduooctogintillion two hundred fifty five duocenunoctogintillion seven hundred fifteen duocenoctogintillion one hundred twenty duocennovemseptuagintillion three hundred sixty four duocenoctoseptuagintillion nine hundred twenty duocenseptenseptuagintillion seven hundred fifteen duocensexseptuagintillion twenty five duocenquinseptuagintillion one hundred forty six duocenquattuorseptuagintillion four hundred ninety nine duocentreseptuagintillion eight hundred forty two duocenduoseptuagintillion six hundred six duocenunseptuagintillion one hundred sixty nine duocenseptuagintillion six hundred sixty seven duocennovemsexagintillion four hundred seventy seven duocenoctosexagintillion eight hundred thirty seven duocenseptensexagintillion six duocensexsexagintillion one hundred seventy three duocenquinsexagintillion five hundred duocenquattuorsexagintillion one hundred twenty three duocentresexagintillion three hundred forty eight duocenduosexagintillion seven hundred thirty four duocenunsexagintillion five hundred ninety four duocensexagintillion six hundred twenty five duocennovemquinquagintillion seven hundred eighty one duocenoctoquinquagintillion six hundred seventy six duocenseptenquinquagintillion one hundred eighty seven duocensexquinquagintillion nine hundred seventy two duocenquinquinquagintillion one hundred seventy four duocenquattuorquinquagintillion three hundred fifty two duocentrequinquagintillion two hundred fifty seven duocenduoquinquagintillion seven hundred ninety five duocenunquinquagintillion five hundred ninety six duocenquinquagintillion two hundred sixty one duocennovemquadragintillion five hundred twenty five duocenoctoquadragintillion ten duocenseptenquadragintillion one hundred twenty one duocensexquadragintillion six hundred seventeen duocenquinquadragintillion eight hundred thirty one duocenquattuorquadragintillion seven hundred forty seven duocentrequadragintillion three hundred two duocenduoquadragintillion six hundred eighty six duocenunquadragintillion seven hundred thirty six duocenquadragintillion two hundred twenty duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion nine hundred thirty four duocenseptentrigintillion six hundred seventy seven duocensextrigintillion thirty two duocenquintrigintillion four hundred twenty one duocenquattuortrigintillion six hundred seventy three duocentretrigintillion two hundred eighty one duocenduotrigintillion thirty eight duocenuntrigintillion five hundred forty eight duocentrigintillion five hundred eighteen duocennovemvigintillion forty nine duocenoctovigintillion three hundred thirty duocenseptenvigintillion eight hundred seventy four duocensexvigintillion forty seven duocenquinvigintillion seven hundred thirty eight duocenquattuorvigintillion two hundred sixty one duocentrevigintillion six hundred forty six duocenduovigintillion six duocenunvigintillion two hundred fifty seven duocenvigintillion eight hundred sixty seven duocennovemdecillion six hundred fifty three duocenoctodecillion nine hundred thirty two duocenseptendecillion one hundred three duocensexdecillion six hundred ninety duocenquindecillion five hundred fifty two duocenquattuordecillion five hundred fifty one duocentredecillion three hundred thirty three duocenduodecillion six hundred twenty nine duocenundecillion four hundred seventy eight duocendecillion nine hundred twenty nine duocennovemtillion three hundred twenty three duocenoctotillion six hundred twenty two duocenseptentillion eight hundred thirty six duocensextillion one hundred three duocenquintillion four hundred eighteen duocenquattuortillion three hundred eighty nine duocentretillion three hundred ninety three duocenduotillion four hundred sixty five duocenuntillion fifty nine duocentillion fifty six cennovemnonagintillion three hundred twenty eight cenoctononagintillion sixty one censeptennonagintillion four hundred ninety two censexnonagintillion eight hundred eighty two cenquinnonagintillion eight hundred nineteen cenquattuornonagintillion nine hundred three centrenonagintillion seven hundred cenduononagintillion seven hundred seventy five cenunnonagintillion eight hundred seventy two cennonagintillion six hundred ninety eight cennovemoctogintillion thirty eight cenoctooctogintillion six hundred seventy one censeptenoctogintillion seven hundred four censexoctogintillion sixteen cenquinoctogintillion nine hundred ninety two cenquattuoroctogintillion eight hundred seven centreoctogintillion eight hundred seventy five cenduooctogintillion one hundred ninety five cenunoctogintillion nine hundred eleven cenoctogintillion five hundred forty cennovemseptuagintillion eight hundred eighty three cenoctoseptuagintillion three hundred two censeptenseptuagintillion five hundred forty nine censexseptuagintillion fifty four cenquinseptuagintillion nine hundred forty eight cenquattuorseptuagintillion two hundred seventy centreseptuagintillion nine hundred nineteen cenduoseptuagintillion three hundred twenty nine cenunseptuagintillion eight hundred forty one censeptuagintillion one hundred forty nine cennovemsexagintillion two hundred ten cenoctosexagintillion one hundred fifty two censeptensexagintillion one hundred sixty censexsexagintillion twenty two cenquinsexagintillion two hundred fifty three cenquattuorsexagintillion nine hundred sixty centresexagintillion seven hundred ninety one cenduosexagintillion six hundred seventy one cenunsexagintillion one hundred seventy four censexagintillion seven hundred forty six cennovemquinquagintillion five hundred twenty five cenoctoquinquagintillion eight hundred eighteen censeptenquinquagintillion nine hundred thirty six censexquinquagintillion one hundred sixteen cenquinquinquagintillion four hundred ninety seven cenquattuorquinquagintillion three hundred sixty four centrequinquagintillion one hundred forty nine cenduoquinquagintillion four hundred eighty cenunquinquagintillion thirty six cenquinquagintillion five hundred six cennovemquadragintillion five hundred forty one cenoctoquadragintillion eight hundred eighty five censeptenquadragintillion eight hundred seventeen censexquadragintillion eight hundred thirty nine cenquinquadragintillion nine hundred eighty five cenquattuorquadragintillion seven hundred eighty nine centrequadragintillion three hundred thirty four cenduoquadragintillion three hundred thirty cenunquadragintillion eight hundred sixty seven cenquadragintillion four hundred eight cennovemtrigintillion one hundred sixty eight cenoctotrigintillion five hundred fifty five censeptentrigintillion one hundred fifty nine censextrigintillion seven hundred seventy two cenquintrigintillion six hundred fifty seven cenquattuortrigintillion four hundred forty four centretrigintillion one hundred thirty four cenduotrigintillion eight hundred seventy five cenuntrigintillion five hundred sixty seven centrigintillion three hundred thirty four cennovemvigintillion five hundred eighty seven cenoctovigintillion one hundred sixteen censeptenvigintillion three hundred fifty five censexvigintillion five hundred eighty four cenquinvigintillion nine hundred eighty two cenquattuorvigintillion five hundred forty four centrevigintillion four hundred seventy two cenduovigintillion fifty one cenunvigintillion ten cenvigintillion two hundred eighty one cennovemdecillion three hundred twenty one cenoctodecillion five hundred fifty two censeptendecillion eight hundred seventy six censexdecillion nine hundred seventy five cenquindecillion six hundred one cenquattuordecillion one hundred forty three centredecillion eight hundred forty one cenduodecillion two hundred five cenundecillion ninety cendecillion three hundred ninety three cennovemtillion four hundred twenty eight cenoctotillion six hundred eighty two censeptentillion three hundred seventy censextillion nine hundred cenquintillion one hundred seventy six cenquattuortillion three hundred ninety four centretillion four hundred ninety nine cenduotillion ninety six cenuntillion five hundred sixty three centillion nine hundred ninety nine novemnonagintillion one hundred thirty six octononagintillion three hundred fifty septennonagintillion nine hundred fifty three sexnonagintillion two hundred sixty four quinnonagintillion three hundred six quattuornonagintillion one hundred sixty four trenonagintillion eighty seven duononagintillion five hundred forty two unnonagintillion one hundred six nonagintillion two hundred sixty three novemoctogintillion sixty eight octooctogintillion four hundred eighty five septenoctogintillion one hundred seventy eight sexoctogintillion eighty quinoctogintillion nine hundred eighty two quattuoroctogintillion two hundred fifty one treoctogintillion nine hundred sixty five duooctogintillion three hundred forty nine unoctogintillion four hundred seven octogintillion six hundred sixty seven novemseptuagintillion eight hundred ninety octoseptuagintillion seven hundred eighty septenseptuagintillion forty three sexseptuagintillion seven hundred twenty eight quinseptuagintillion five hundred forty seven quattuorseptuagintillion four hundred forty treseptuagintillion eighty two duoseptuagintillion eight hundred eighty seven unseptuagintillion seven hundred thirty eight septuagintillion two hundred forty six novemsexagintillion one hundred seven octosexagintillion one hundred seventy four septensexagintillion four hundred nineteen sexsexagintillion nine hundred twenty two quinsexagintillion five hundred seventy three quattuorsexagintillion one hundred eighty eight tresexagintillion nine hundred eighteen duosexagintillion nine hundred twenty seven unsexagintillion two hundred fifty six sexagintillion three hundred twenty eight novemquinquagintillion one hundred forty nine octoquinquagintillion three hundred five septenquinquagintillion four hundred ten sexquinquagintillion eight hundred ninety two quinquinquagintillion six hundred fifty quattuorquinquagintillion five hundred twenty seven trequinquagintillion seven hundred ninety four duoquinquagintillion three hundred sixty two unquinquagintillion six hundred seventy three quinquagintillion three hundred forty five novemquadragintillion six hundred sixteen octoquadragintillion nine hundred forty eight septenquadragintillion six hundred sixty sexquadragintillion nine hundred seventy nine quinquadragintillion four hundred twenty five quattuorquadragintillion four hundred sixty six trequadragintillion eight hundred forty one duoquadragintillion eight hundred ninety two unquadragintillion six hundred eighty four quadragintillion six hundred seventy six novemtrigintillion six hundred fifty six octotrigintillion five hundred three septentrigintillion eight hundred twenty one sextrigintillion six hundred fifty eight quintrigintillion two hundred twelve quattuortrigintillion six hundred eighty nine tretrigintillion fifty five duotrigintillion six hundred eighty four untrigintillion four hundred eighteen trigintillion six hundred two novemvigintillion one hundred sixty nine octovigintillion eighty four septenvigintillion six hundred eighty five sexvigintillion eighty nine quinvigintillion seven hundred sixty one quattuorvigintillion seven hundred seventy three trevigintillion four hundred fifty five duovigintillion seven hundred thirty seven unvigintillion ninety four vigintillion five hundred twenty seven novemdecillion ninety eight octodecillion seven hundred fifty one septendecillion six hundred thirteen sexdecillion one hundred twenty seven quindecillion six hundred eighty four quattuordecillion one hundred one tredecillion six hundred forty eight duodecillion five hundred sixty eight undecillion eight hundred twelve decillion nine hundred ninety six nonillion eight hundred two octillion four hundred sixty four septillion seven hundred fourteen sextillion seven hundred forty four quintillion one quadrillion two hundred ninety one trillion nine hundred ninety five billion five hundred five million seven hundred eighty nine thousand one hundred eighty one point eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181.8419384601")));
        Assert.assertEquals("three hundred fifty six trecennovemtrigintillion eight hundred forty five trecenoctotrigintillion four hundred forty trecenseptentrigintillion seven hundred fifty trecensextrigintillion seventy eight trecenquintrigintillion eight hundred ninety three trecenquattuortrigintillion five hundred twenty eight trecentretrigintillion one hundred twenty seven trecenduotrigintillion three hundred seventy three trecenuntrigintillion nine hundred ninety five trecentrigintillion one hundred nineteen trecennovemvigintillion ninety one trecenoctovigintillion one hundred fifty three trecenseptenvigintillion three hundred thirty one trecensexvigintillion twenty three trecenquinvigintillion eight hundred sixty three trecenquattuorvigintillion two hundred sixty eight trecentrevigintillion nine hundred forty seven trecenduovigintillion two hundred six trecenunvigintillion three hundred five trecenvigintillion three hundred forty four trecennovemdecillion nine hundred eighty three trecenoctodecillion two hundred eight trecenseptendecillion eight hundred twenty one trecensexdecillion one hundred fifty five trecenquindecillion eight hundred sixty one trecenquattuordecillion eight hundred sixty two trecentredecillion five hundred eight trecenduodecillion five hundred twenty one trecenundecillion sixty two trecendecillion two hundred ninety five trecennovemtillion seven hundred eighty eight trecenoctotillion four hundred twenty eight trecenseptentillion four hundred seventy seven trecensextillion nine hundred thirteen trecenquintillion two hundred sixty trecenquattuortillion one trecentretillion seven hundred twenty four trecenduotillion six hundred twenty one trecenuntillion five hundred twenty two trecentillion three hundred seventy duocennovemnonagintillion thirty nine duocenoctononagintillion four hundred sixteen duocenseptennonagintillion three hundred sixty seven duocensexnonagintillion seven hundred seventy one duocenquinnonagintillion six hundred twenty seven duocenquattuornonagintillion four hundred seventy nine duocentrenonagintillion nine hundred seventy eight duocenduononagintillion seven hundred seventy six duocenunnonagintillion four hundred twenty two duocennonagintillion six hundred twenty three duocennovemoctogintillion one hundred twelve duocenoctooctogintillion eighty nine duocenseptenoctogintillion one hundred ninety one duocensexoctogintillion one hundred ninety five duocenquinoctogintillion one hundred thirty three duocenquattuoroctogintillion eight hundred thirty five duocentreoctogintillion four hundred eleven duocenduooctogintillion five hundred twenty five duocenunoctogintillion five hundred seventy one duocenoctogintillion five hundred twelve duocennovemseptuagintillion thirty six duocenoctoseptuagintillion four hundred ninety two duocenseptenseptuagintillion seventy one duocensexseptuagintillion five hundred two duocenquinseptuagintillion five hundred fourteen duocenquattuorseptuagintillion six hundred forty nine duocentreseptuagintillion nine hundred eighty four duocenduoseptuagintillion two hundred sixty duocenunseptuagintillion six hundred sixteen duocenseptuagintillion nine hundred sixty six duocennovemsexagintillion seven hundred forty seven duocenoctosexagintillion seven hundred eighty three duocenseptensexagintillion seven hundred duocensexsexagintillion six hundred seventeen duocenquinsexagintillion three hundred fifty duocenquattuorsexagintillion twelve duocentresexagintillion three hundred thirty four duocenduosexagintillion eight hundred seventy three duocenunsexagintillion four hundred fifty nine duocensexagintillion four hundred sixty two duocennovemquinquagintillion five hundred seventy eight duocenoctoquinquagintillion one hundred sixty seven duocenseptenquinquagintillion six hundred eighteen duocensexquinquagintillion seven hundred ninety seven duocenquinquinquagintillion two hundred seventeen duocenquattuorquinquagintillion four hundred thirty five duocentrequinquagintillion two hundred twenty five duocenduoquinquagintillion seven hundred seventy nine duocenunquinquagintillion five hundred fifty nine duocenquinquagintillion six hundred twenty six duocennovemquadragintillion one hundred fifty two duocenoctoquadragintillion five hundred one duocenseptenquadragintillion twelve duocensexquadragintillion one hundred sixty one duocenquinquadragintillion seven hundred eighty three duocenquattuorquadragintillion one hundred seventy four duocentrequadragintillion seven hundred thirty duocenduoquadragintillion two hundred sixty eight duocenunquadragintillion six hundred seventy three duocenquadragintillion six hundred twenty two duocennovemtrigintillion thirty two duocenoctotrigintillion four hundred ninety three duocenseptentrigintillion four hundred sixty seven duocensextrigintillion seven hundred three duocenquintrigintillion two hundred forty two duocenquattuortrigintillion one hundred sixty seven duocentretrigintillion three hundred twenty eight duocenduotrigintillion one hundred three duocenuntrigintillion eight hundred fifty four duocentrigintillion eight hundred fifty one duocennovemvigintillion eight hundred four duocenoctovigintillion nine hundred thirty three duocenseptenvigintillion eighty seven duocensexvigintillion four hundred four duocenquinvigintillion seven hundred seventy three duocenquattuorvigintillion eight hundred twenty six duocentrevigintillion one hundred sixty four duocenduovigintillion six hundred duocenunvigintillion six hundred twenty five duocenvigintillion seven hundred eighty six duocennovemdecillion seven hundred sixty five duocenoctodecillion three hundred ninety three duocenseptendecillion two hundred ten duocensexdecillion three hundred sixty nine duocenquindecillion fifty five duocenquattuordecillion two hundred fifty five duocentredecillion one hundred thirty three duocenduodecillion three hundred sixty two duocenundecillion nine hundred forty seven duocendecillion eight hundred ninety two duocennovemtillion nine hundred thirty two duocenoctotillion three hundred sixty two duocenseptentillion two hundred eighty three duocensextillion six hundred ten duocenquintillion three hundred forty one duocenquattuortillion eight hundred thirty eight duocentretillion nine hundred thirty nine duocenduotillion three hundred forty six duocenuntillion five hundred five duocentillion nine hundred five cennovemnonagintillion six hundred thirty two cenoctononagintillion eight hundred six censeptennonagintillion one hundred forty nine censexnonagintillion two hundred eighty eight cenquinnonagintillion two hundred eighty one cenquattuornonagintillion nine hundred ninety centrenonagintillion three hundred seventy cenduononagintillion seventy seven cenunnonagintillion five hundred eighty seven cennonagintillion two hundred sixty nine cennovemoctogintillion eight hundred three cenoctooctogintillion eight hundred sixty seven censeptenoctogintillion one hundred seventy censexoctogintillion four hundred one cenquinoctogintillion six hundred ninety nine cenquattuoroctogintillion two hundred eighty centreoctogintillion seven hundred eighty seven cenduooctogintillion five hundred nineteen cenunoctogintillion five hundred ninety one cenoctogintillion one hundred fifty four cennovemseptuagintillion eighty eight cenoctoseptuagintillion three hundred thirty censeptenseptuagintillion two hundred fifty four censexseptuagintillion nine hundred five cenquinseptuagintillion four hundred ninety four cenquattuorseptuagintillion eight hundred twenty seven centreseptuagintillion ninety one cenduoseptuagintillion nine hundred thirty two cenunseptuagintillion nine hundred eighty four censeptuagintillion one hundred fourteen cennovemsexagintillion nine hundred twenty one cenoctosexagintillion fifteen censeptensexagintillion two hundred sixteen censexsexagintillion two cenquinsexagintillion two hundred twenty five cenquattuorsexagintillion three hundred ninety six centresexagintillion seventy nine cenduosexagintillion one hundred sixty seven cenunsexagintillion one hundred seventeen censexagintillion four hundred seventy four cennovemquinquagintillion six hundred fifty two cenoctoquinquagintillion five hundred eighty one censeptenquinquagintillion eight hundred ninety three censexquinquagintillion six hundred eleven cenquinquinquagintillion six hundred forty nine cenquattuorquinquagintillion seven hundred thirty six centrequinquagintillion four hundred fourteen cenduoquinquagintillion nine hundred forty eight cenunquinquagintillion three cenquinquagintillion six hundred fifty cennovemquadragintillion six hundred fifty four cenoctoquadragintillion one hundred eighty eight censeptenquadragintillion five hundred eighty one censexquadragintillion seven hundred eighty three cenquinquadragintillion nine hundred ninety eight cenquattuorquadragintillion five hundred seventy eight centrequadragintillion nine hundred thirty three cenduoquadragintillion four hundred thirty three cenunquadragintillion eighty six cenquadragintillion seven hundred forty cennovemtrigintillion eight hundred sixteen cenoctotrigintillion eight hundred fifty five censeptentrigintillion five hundred fifteen censextrigintillion nine hundred seventy seven cenquintrigintillion two hundred sixty five cenquattuortrigintillion seven hundred forty four centretrigintillion four hundred thirteen cenduotrigintillion four hundred eighty seven cenuntrigintillion five hundred fifty six centrigintillion seven hundred thirty three cennovemvigintillion four hundred fifty eight cenoctovigintillion seven hundred eleven censeptenvigintillion six hundred thirty five censexvigintillion five hundred fifty eight cenquinvigintillion four hundred ninety eight cenquattuorvigintillion two hundred fifty four centrevigintillion four hundred forty seven cenduovigintillion two hundred five cenunvigintillion one hundred one cenvigintillion twenty eight cennovemdecillion one hundred thirty two cenoctodecillion one hundred fifty five censeptendecillion two hundred eighty seven censexdecillion six hundred ninety seven cenquindecillion five hundred sixty cenquattuordecillion one hundred fourteen centredecillion three hundred eighty four cenduodecillion one hundred twenty cenundecillion five hundred nine cendecillion thirty nine cennovemtillion three hundred forty two cenoctotillion eight hundred sixty eight censeptentillion two hundred thirty seven censextillion ninety cenquintillion seventeen cenquattuortillion six hundred thirty nine centretillion four hundred forty nine cenduotillion nine hundred nine cenuntillion six hundred fifty six centillion three hundred ninety nine novemnonagintillion nine hundred thirteen octononagintillion six hundred thirty five septennonagintillion ninety five sexnonagintillion three hundred twenty six quinnonagintillion four hundred thirty quattuornonagintillion six hundred sixteen trenonagintillion four hundred eight duononagintillion seven hundred fifty four unnonagintillion two hundred ten nonagintillion six hundred twenty six novemoctogintillion three hundred six octooctogintillion eight hundred forty eight septenoctogintillion five hundred seventeen sexoctogintillion eight hundred eight quinoctogintillion ninety eight quattuoroctogintillion two hundred twenty five treoctogintillion one hundred ninety six duooctogintillion five hundred thirty four unoctogintillion nine hundred forty octogintillion seven hundred sixty six novemseptuagintillion seven hundred eighty nine octoseptuagintillion seventy eight septenseptuagintillion four sexseptuagintillion three hundred seventy two quinseptuagintillion eight hundred fifty four quattuorseptuagintillion seven hundred forty four treseptuagintillion eight duoseptuagintillion two hundred eighty eight unseptuagintillion seven hundred seventy three septuagintillion eight hundred twenty four novemsexagintillion six hundred ten octosexagintillion seven hundred seventeen septensexagintillion four hundred forty one sexsexagintillion nine hundred ninety two quinsexagintillion two hundred fifty seven quattuorsexagintillion three hundred eighteen tresexagintillion eight hundred ninety one duosexagintillion eight hundred ninety two unsexagintillion seven hundred twenty five sexagintillion six hundred thirty two novemquinquagintillion eight hundred fourteen octoquinquagintillion nine hundred thirty septenquinquagintillion five hundred forty one sexquinquagintillion eighty nine quinquinquagintillion two hundred sixty five quattuorquinquagintillion fifty two trequinquagintillion seven hundred seventy nine duoquinquagintillion four hundred thirty six unquinquagintillion two hundred sixty seven quinquagintillion three hundred thirty four novemquadragintillion five hundred sixty one octoquadragintillion six hundred ninety four septenquadragintillion eight hundred sixty six sexquadragintillion ninety seven quinquadragintillion nine hundred forty two quattuorquadragintillion five hundred forty six trequadragintillion six hundred eighty four duoquadragintillion one hundred eighty nine unquadragintillion two hundred sixty eight quadragintillion four hundred sixty seven novemtrigintillion six hundred sixty five octotrigintillion six hundred fifty septentrigintillion three hundred eighty two sextrigintillion one hundred sixty five quintrigintillion eight hundred twenty one quattuortrigintillion two hundred sixty eight tretrigintillion nine hundred five duotrigintillion five hundred sixty eight untrigintillion four hundred forty one trigintillion eight hundred sixty novemvigintillion two hundred sixteen octovigintillion nine hundred eight septenvigintillion four hundred sixty eight sexvigintillion five hundred eight quinvigintillion nine hundred seventy six quattuorvigintillion one hundred seventy seven trevigintillion three hundred forty five duovigintillion five hundred seventy three unvigintillion seven hundred nine vigintillion four hundred fifty two novemdecillion seven hundred nine octodecillion eight hundred seventy five septendecillion one hundred sixty one sexdecillion three hundred twelve quindecillion seven hundred sixty eight quattuordecillion four hundred ten tredecillion one hundred sixty four duodecillion eight hundred fifty six undecillion eight hundred eighty one decillion two hundred ninety nine nonillion six hundred eighty octillion two hundred forty six septillion four hundred seventy one sextillion four hundred seventy four quintillion four hundred quadrillion one hundred twenty nine trillion one hundred ninety nine billion five hundred fifty million five hundred seventy eight thousand nine hundred eighteen point one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.18419384601")));
        Assert.assertEquals("thirty five trecenquadragintillion six hundred eighty four trecennovemtrigintillion five hundred forty four trecenoctotrigintillion seventy five trecenseptentrigintillion seven trecensextrigintillion eight hundred eighty nine trecenquintrigintillion three hundred fifty two trecenquattuortrigintillion eight hundred twelve trecentretrigintillion seven hundred thirty seven trecenduotrigintillion three hundred ninety nine trecenuntrigintillion five hundred eleven trecentrigintillion nine hundred nine trecennovemvigintillion one hundred fifteen trecenoctovigintillion three hundred thirty three trecenseptenvigintillion one hundred two trecensexvigintillion three hundred eighty six trecenquinvigintillion three hundred twenty six trecenquattuorvigintillion eight hundred ninety four trecentrevigintillion seven hundred twenty trecenduovigintillion six hundred thirty trecenunvigintillion five hundred thirty four trecenvigintillion four hundred ninety eight trecennovemdecillion three hundred twenty trecenoctodecillion eight hundred eighty two trecenseptendecillion one hundred fifteen trecensexdecillion five hundred eighty six trecenquindecillion one hundred eighty six trecenquattuordecillion two hundred fifty trecentredecillion eight hundred fifty two trecenduodecillion one hundred six trecenundecillion two hundred twenty nine trecendecillion five hundred seventy eight trecennovemtillion eight hundred forty two trecenoctotillion eight hundred forty seven trecenseptentillion seven hundred ninety one trecensextillion three hundred twenty six trecenquintillion one hundred seventy two trecentretillion four hundred sixty two trecenduotillion one hundred fifty two trecenuntillion two hundred thirty seven trecentillion three duocennovemnonagintillion nine hundred forty one duocenoctononagintillion six hundred thirty six duocenseptennonagintillion seven hundred seventy seven duocensexnonagintillion one hundred sixty two duocenquinnonagintillion seven hundred forty seven duocenquattuornonagintillion nine hundred ninety seven duocentrenonagintillion eight hundred seventy seven duocenduononagintillion six hundred forty two duocenunnonagintillion two hundred sixty two duocennonagintillion three hundred eleven duocennovemoctogintillion two hundred eight duocenoctooctogintillion nine hundred nineteen duocenseptenoctogintillion one hundred nineteen duocensexoctogintillion five hundred thirteen duocenquinoctogintillion three hundred eighty three duocenquattuoroctogintillion five hundred forty one duocentreoctogintillion one hundred fifty two duocenduooctogintillion five hundred fifty seven duocenunoctogintillion one hundred fifty one duocenoctogintillion two hundred three duocennovemseptuagintillion six hundred forty nine duocenoctoseptuagintillion two hundred seven duocenseptenseptuagintillion one hundred fifty duocensexseptuagintillion two hundred fifty one duocenquinseptuagintillion four hundred sixty four duocenquattuorseptuagintillion nine hundred ninety eight duocentreseptuagintillion four hundred twenty six duocenduoseptuagintillion sixty one duocenunseptuagintillion six hundred ninety six duocenseptuagintillion six hundred seventy four duocennovemsexagintillion seven hundred seventy eight duocenoctosexagintillion three hundred seventy duocenseptensexagintillion sixty one duocensexsexagintillion seven hundred thirty five duocenquinsexagintillion one duocenquattuorsexagintillion two hundred thirty three duocentresexagintillion four hundred eighty seven duocenduosexagintillion three hundred forty five duocenunsexagintillion nine hundred forty six duocensexagintillion two hundred fifty seven duocennovemquinquagintillion eight hundred sixteen duocenoctoquinquagintillion seven hundred sixty one duocenseptenquinquagintillion eight hundred seventy nine duocensexquinquagintillion seven hundred twenty one duocenquinquinquagintillion seven hundred forty three duocenquattuorquinquagintillion five hundred twenty two duocentrequinquagintillion five hundred seventy seven duocenduoquinquagintillion nine hundred fifty five duocenunquinquagintillion nine hundred sixty two duocenquinquagintillion six hundred fifteen duocennovemquadragintillion two hundred fifty duocenoctoquadragintillion one hundred one duocenseptenquadragintillion two hundred sixteen duocensexquadragintillion one hundred seventy eight duocenquinquadragintillion three hundred seventeen duocenquattuorquadragintillion four hundred seventy three duocentrequadragintillion twenty six duocenduoquadragintillion eight hundred sixty seven duocenunquadragintillion three hundred sixty two duocenquadragintillion two hundred three duocennovemtrigintillion two hundred forty nine duocenoctotrigintillion three hundred forty six duocenseptentrigintillion seven hundred seventy duocensextrigintillion three hundred twenty four duocenquintrigintillion two hundred sixteen duocenquattuortrigintillion seven hundred thirty two duocentretrigintillion eight hundred ten duocenduotrigintillion three hundred eighty five duocenuntrigintillion four hundred eighty five duocentrigintillion one hundred eighty duocennovemvigintillion four hundred ninety three duocenoctovigintillion three hundred eight duocenseptenvigintillion seven hundred forty duocensexvigintillion four hundred seventy seven duocenquinvigintillion three hundred eighty two duocenquattuorvigintillion six hundred sixteen duocentrevigintillion four hundred sixty duocenduovigintillion sixty two duocenunvigintillion five hundred seventy eight duocenvigintillion six hundred seventy six duocennovemdecillion five hundred thirty nine duocenoctodecillion three hundred twenty one duocenseptendecillion thirty six duocensexdecillion nine hundred five duocenquindecillion five hundred twenty five duocenquattuordecillion five hundred thirteen duocentredecillion three hundred thirty six duocenduodecillion two hundred ninety four duocenundecillion seven hundred eighty nine duocendecillion two hundred ninety three duocennovemtillion two hundred thirty six duocenoctotillion two hundred twenty eight duocenseptentillion three hundred sixty one duocensextillion thirty four duocenquintillion one hundred eighty three duocenquattuortillion eight hundred ninety three duocentretillion nine hundred thirty four duocenduotillion six hundred fifty duocenuntillion five hundred ninety duocentillion five hundred sixty three cennovemnonagintillion two hundred eighty cenoctononagintillion six hundred fourteen censeptennonagintillion nine hundred twenty eight censexnonagintillion eight hundred twenty eight cenquinnonagintillion one hundred ninety nine cenquattuornonagintillion thirty seven centrenonagintillion seven cenduononagintillion seven hundred fifty eight cenunnonagintillion seven hundred twenty six cennonagintillion nine hundred eighty cennovemoctogintillion three hundred eighty six cenoctooctogintillion seven hundred seventeen censeptenoctogintillion forty censexoctogintillion one hundred sixty nine cenquinoctogintillion nine hundred twenty eight cenquattuoroctogintillion seventy eight centreoctogintillion seven hundred fifty one cenduooctogintillion nine hundred fifty nine cenunoctogintillion one hundred fifteen cenoctogintillion four hundred eight cennovemseptuagintillion eight hundred thirty three cenoctoseptuagintillion twenty five censeptenseptuagintillion four hundred ninety censexseptuagintillion five hundred forty nine cenquinseptuagintillion four hundred eighty two cenquattuorseptuagintillion seven hundred nine centreseptuagintillion one hundred ninety three cenduoseptuagintillion two hundred ninety eight cenunseptuagintillion four hundred eleven censeptuagintillion four hundred ninety two cennovemsexagintillion one hundred one cenoctosexagintillion five hundred twenty one censeptensexagintillion six hundred censexsexagintillion two hundred twenty two cenquinsexagintillion five hundred thirty nine cenquattuorsexagintillion six hundred seven centresexagintillion nine hundred sixteen cenduosexagintillion seven hundred eleven cenunsexagintillion seven hundred forty seven censexagintillion four hundred sixty five cennovemquinquagintillion two hundred fifty eight cenoctoquinquagintillion one hundred eighty nine censeptenquinquagintillion three hundred sixty one censexquinquagintillion one hundred sixty four cenquinquinquagintillion nine hundred seventy three cenquattuorquinquagintillion six hundred forty one centrequinquagintillion four hundred ninety four cenduoquinquagintillion eight hundred cenunquinquagintillion three hundred sixty five cenquinquagintillion sixty five cennovemquadragintillion four hundred eighteen cenoctoquadragintillion eight hundred fifty eight censeptenquadragintillion one hundred seventy eight censexquadragintillion three hundred ninety nine cenquinquadragintillion eight hundred fifty seven cenquattuorquadragintillion eight hundred ninety three centrequadragintillion three hundred forty three cenduoquadragintillion three hundred eight cenunquadragintillion six hundred seventy four cenquadragintillion eighty one cennovemtrigintillion six hundred eighty five cenoctotrigintillion five hundred fifty one censeptentrigintillion five hundred ninety seven censextrigintillion seven hundred twenty six cenquintrigintillion five hundred seventy four cenquattuortrigintillion four hundred forty one centretrigintillion three hundred forty eight cenduotrigintillion seven hundred fifty five cenuntrigintillion six hundred seventy three centrigintillion three hundred forty five cennovemvigintillion eight hundred seventy one cenoctovigintillion one hundred sixty three censeptenvigintillion five hundred fifty five censexvigintillion eight hundred forty nine cenquinvigintillion eight hundred twenty five cenquattuorvigintillion four hundred forty four centrevigintillion seven hundred twenty cenduovigintillion five hundred ten cenunvigintillion one hundred two cenvigintillion eight hundred thirteen cennovemdecillion two hundred fifteen cenoctodecillion five hundred twenty eight censeptendecillion seven hundred sixty nine censexdecillion seven hundred fifty six cenquindecillion eleven cenquattuordecillion four hundred thirty eight centredecillion four hundred twelve cenduodecillion fifty cenundecillion nine hundred three cendecillion nine hundred thirty four cennovemtillion two hundred eighty six cenoctotillion eight hundred twenty three censeptentillion seven hundred nine censextillion one cenquintillion seven hundred sixty three cenquattuortillion nine hundred forty four centretillion nine hundred ninety cenduotillion nine hundred sixty five cenuntillion six hundred thirty nine centillion nine hundred ninety one novemnonagintillion three hundred sixty three octononagintillion five hundred nine septennonagintillion five hundred thirty two sexnonagintillion six hundred forty three quinnonagintillion sixty one quattuornonagintillion six hundred forty trenonagintillion eight hundred seventy five duononagintillion four hundred twenty one unnonagintillion sixty two nonagintillion six hundred thirty novemoctogintillion six hundred eighty four octooctogintillion eight hundred fifty one septenoctogintillion seven hundred eighty sexoctogintillion eight hundred nine quinoctogintillion eight hundred twenty two quattuoroctogintillion five hundred nineteen treoctogintillion six hundred fifty three duooctogintillion four hundred ninety four unoctogintillion seventy six octogintillion six hundred seventy eight novemseptuagintillion nine hundred seven octoseptuagintillion eight hundred septenseptuagintillion four hundred thirty seven sexseptuagintillion two hundred eighty five quinseptuagintillion four hundred seventy four quattuorseptuagintillion four hundred treseptuagintillion eight hundred twenty eight duoseptuagintillion eight hundred seventy seven unseptuagintillion three hundred eighty two septuagintillion four hundred sixty one novemsexagintillion seventy one octosexagintillion seven hundred forty four septensexagintillion one hundred ninety nine sexsexagintillion two hundred twenty five quinsexagintillion seven hundred thirty one quattuorsexagintillion eight hundred eighty nine tresexagintillion one hundred eighty nine duosexagintillion two hundred seventy two unsexagintillion five hundred sixty three sexagintillion two hundred eighty one novemquinquagintillion four hundred ninety three octoquinquagintillion fifty four septenquinquagintillion one hundred eight sexquinquagintillion nine hundred twenty six quinquinquagintillion five hundred five quattuorquinquagintillion two hundred seventy seven trequinquagintillion nine hundred forty three duoquinquagintillion six hundred twenty six unquinquagintillion seven hundred thirty three quinquagintillion four hundred fifty six novemquadragintillion one hundred sixty nine octoquadragintillion four hundred eighty six septenquadragintillion six hundred nine sexquadragintillion seven hundred ninety four quinquadragintillion two hundred fifty four quattuorquadragintillion six hundred sixty eight trequadragintillion four hundred eighteen duoquadragintillion nine hundred twenty six unquadragintillion eight hundred forty six quadragintillion seven hundred sixty six novemtrigintillion five hundred sixty five octotrigintillion thirty eight septentrigintillion two hundred sixteen sextrigintillion five hundred eighty two quintrigintillion one hundred twenty six quattuortrigintillion eight hundred ninety tretrigintillion five hundred fifty six duotrigintillion eight hundred forty four untrigintillion one hundred eighty six trigintillion twenty one novemvigintillion six hundred ninety octovigintillion eight hundred forty six septenvigintillion eight hundred fifty sexvigintillion eight hundred ninety seven quinvigintillion six hundred seventeen quattuorvigintillion seven hundred thirty four trevigintillion five hundred fifty seven duovigintillion three hundred seventy unvigintillion nine hundred forty five vigintillion two hundred seventy novemdecillion nine hundred eighty seven octodecillion five hundred sixteen septendecillion one hundred thirty one sexdecillion two hundred seventy six quindecillion eight hundred forty one quattuordecillion sixteen tredecillion four hundred eighty five duodecillion six hundred eighty eight undecillion one hundred twenty nine decillion nine hundred sixty eight nonillion twenty four octillion six hundred forty seven septillion one hundred forty seven sextillion four hundred forty quintillion twelve quadrillion nine hundred nineteen trillion nine hundred fifty five billion fifty seven million eight hundred ninety one thousand eight hundred eighteen point four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818.419384601")));
        Assert.assertEquals("point three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("point zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("three decillionths five hundred sixty eight undecillionths four hundred fifty four duodecillionths four hundred seven tredecillionths five hundred quattuordecillionths seven hundred eighty eight quindecillionths nine hundred thirty five sexdecillionths two hundred eighty one septendecillionths two hundred seventy three octodecillionths seven hundred thirty nine novemdecillionths nine hundred fifty one vigintillionths one hundred ninety unvigintillionths nine hundred eleven duovigintillionths five hundred thirty three trevigintillionths three hundred ten quattuorvigintillionths two hundred thirty eight quinvigintillionths six hundred thirty two sexvigintillionths six hundred eighty nine septenvigintillionths four hundred seventy two octovigintillionths sixty three novemvigintillionths fifty three trigintillionths four hundred forty nine untrigintillionths eight hundred thirty two duotrigintillionths eighty eight tretrigintillionths two hundred eleven quattuortrigintillionths five hundred fifty eight quintrigintillionths six hundred eighteen sextrigintillionths six hundred twenty five septentrigintillionths eighty five octotrigintillionths two hundred ten novemtrigintillionths six hundred twenty two quadragintillionths nine hundred fifty seven unquadragintillionths eight hundred eighty four duoquadragintillionths two hundred eighty four trequadragintillionths seven hundred seventy nine quattuorquadragintillionths one hundred thirty two quinquadragintillionths six hundred sexquadragintillionths seventeen septenquadragintillionths two hundred forty six octoquadragintillionths two hundred fifteen novemquadragintillionths two hundred twenty three quinquagintillionths seven hundred unquinquagintillionths three hundred ninety four duoquinquagintillionths one hundred sixty three trequinquagintillionths six hundred seventy seven quattuorquinquagintillionths seven hundred sixteen quinquinquagintillionths two hundred seventy four sexquinquagintillionths seven hundred ninety nine septenquinquagintillionths seven hundred eighty seven octoquinquagintillionths seven hundred sixty four novemquinquagintillionths two hundred twenty six sexagintillionths two hundred thirty one unsexagintillionths one hundred twenty duosexagintillionths eight hundred ninety one tresexagintillionths nine hundred eleven quattuorsexagintillionths nine hundred fifty one quinsexagintillionths three hundred thirty eight sexsexagintillionths three hundred fifty four septensexagintillionths one hundred fifteen octosexagintillionths two hundred fifty five novemsexagintillionths seven hundred fifteen septuagintillionths one hundred twenty unseptuagintillionths three hundred sixty four duoseptuagintillionths nine hundred twenty treseptuagintillionths seven hundred fifteen quattuorseptuagintillionths twenty five quinseptuagintillionths one hundred forty six sexseptuagintillionths four hundred ninety nine septenseptuagintillionths eight hundred forty two octoseptuagintillionths six hundred six novemseptuagintillionths one hundred sixty nine octogintillionths six hundred sixty seven unoctogintillionths four hundred seventy seven duooctogintillionths eight hundred thirty seven treoctogintillionths six quattuoroctogintillionths one hundred seventy three quinoctogintillionths five hundred sexoctogintillionths one hundred twenty three septenoctogintillionths three hundred forty eight octooctogintillionths seven hundred thirty four novemoctogintillionths five hundred ninety four nonagintillionths six hundred twenty five unnonagintillionths seven hundred eighty one duononagintillionths six hundred seventy six trenonagintillionths one hundred eighty seven quattuornonagintillionths nine hundred seventy two quinnonagintillionths one hundred seventy four sexnonagintillionths three hundred fifty two septennonagintillionths two hundred fifty seven octononagintillionths seven hundred ninety five novemnonagintillionths five hundred ninety six centillionths two hundred sixty one cenuntillionths five hundred twenty five cenduotillionths ten centretillionths one hundred twenty one cenquattuortillionths six hundred seventeen cenquintillionths eight hundred thirty one censextillionths seven hundred forty seven censeptentillionths three hundred two cenoctotillionths six hundred eighty six cennovemtillionths seven hundred thirty six cendecillionths two hundred twenty cenundecillionths three hundred twenty four cenduodecillionths nine hundred thirty four centredecillionths six hundred seventy seven cenquattuordecillionths thirty two cenquindecillionths four hundred twenty one censexdecillionths six hundred seventy three censeptendecillionths two hundred eighty one cenoctodecillionths thirty eight cennovemdecillionths five hundred forty eight cenvigintillionths five hundred eighteen cenunvigintillionths forty nine cenduovigintillionths three hundred thirty centrevigintillionths eight hundred seventy four cenquattuorvigintillionths forty seven cenquinvigintillionths seven hundred thirty eight censexvigintillionths two hundred sixty one censeptenvigintillionths six hundred forty six cenoctovigintillionths six cennovemvigintillionths two hundred fifty seven centrigintillionths eight hundred sixty seven cenuntrigintillionths six hundred fifty three cenduotrigintillionths nine hundred thirty two centretrigintillionths one hundred three cenquattuortrigintillionths six hundred ninety cenquintrigintillionths five hundred fifty two censextrigintillionths five hundred fifty one censeptentrigintillionths three hundred thirty three cenoctotrigintillionths six hundred twenty nine cennovemtrigintillionths four hundred seventy eight cenquadragintillionths nine hundred twenty nine cenunquadragintillionths three hundred twenty three cenduoquadragintillionths six hundred twenty two centrequadragintillionths eight hundred thirty six cenquattuorquadragintillionths one hundred three cenquinquadragintillionths four hundred eighteen censexquadragintillionths three hundred eighty nine censeptenquadragintillionths three hundred ninety three cenoctoquadragintillionths four hundred sixty five cennovemquadragintillionths fifty nine cenquinquagintillionths fifty six cenunquinquagintillionths three hundred twenty eight cenduoquinquagintillionths sixty one centrequinquagintillionths four hundred ninety two cenquattuorquinquagintillionths eight hundred eighty two cenquinquinquagintillionths eight hundred nineteen censexquinquagintillionths nine hundred three censeptenquinquagintillionths seven hundred cenoctoquinquagintillionths seven hundred seventy five cennovemquinquagintillionths eight hundred seventy two censexagintillionths six hundred ninety eight cenunsexagintillionths thirty eight cenduosexagintillionths six hundred seventy one centresexagintillionths seven hundred four cenquattuorsexagintillionths sixteen cenquinsexagintillionths nine hundred ninety two censexsexagintillionths eight hundred seven censeptensexagintillionths eight hundred seventy five cenoctosexagintillionths one hundred ninety five cennovemsexagintillionths nine hundred eleven censeptuagintillionths five hundred forty cenunseptuagintillionths eight hundred eighty three cenduoseptuagintillionths three hundred two centreseptuagintillionths five hundred forty nine cenquattuorseptuagintillionths fifty four cenquinseptuagintillionths nine hundred forty eight censexseptuagintillionths two hundred seventy censeptenseptuagintillionths nine hundred nineteen cenoctoseptuagintillionths three hundred twenty nine cennovemseptuagintillionths eight hundred forty one cenoctogintillionths one hundred forty nine cenunoctogintillionths two hundred ten cenduooctogintillionths one hundred fifty two centreoctogintillionths one hundred sixty cenquattuoroctogintillionths twenty two cenquinoctogintillionths two hundred fifty three censexoctogintillionths nine hundred sixty censeptenoctogintillionths seven hundred ninety one cenoctooctogintillionths six hundred seventy one cennovemoctogintillionths one hundred seventy four cennonagintillionths seven hundred forty six cenunnonagintillionths five hundred twenty five cenduononagintillionths eight hundred eighteen centrenonagintillionths nine hundred thirty six cenquattuornonagintillionths one hundred sixteen cenquinnonagintillionths four hundred ninety seven censexnonagintillionths three hundred sixty four censeptennonagintillionths one hundred forty nine cenoctononagintillionths four hundred eighty cennovemnonagintillionths thirty six duocentillionths five hundred six duocenuntillionths five hundred forty one duocenduotillionths eight hundred eighty five duocentretillionths eight hundred seventeen duocenquattuortillionths eight hundred thirty nine duocenquintillionths nine hundred eighty five duocensextillionths seven hundred eighty nine duocenseptentillionths three hundred thirty four duocenoctotillionths three hundred thirty duocennovemtillionths eight hundred sixty seven duocendecillionths four hundred eight duocenundecillionths one hundred sixty eight duocenduodecillionths five hundred fifty five duocentredecillionths one hundred fifty nine duocenquattuordecillionths seven hundred seventy two duocenquindecillionths six hundred fifty seven duocensexdecillionths four hundred forty four duocenseptendecillionths one hundred thirty four duocenoctodecillionths eight hundred seventy five duocennovemdecillionths five hundred sixty seven duocenvigintillionths three hundred thirty four duocenunvigintillionths five hundred eighty seven duocenduovigintillionths one hundred sixteen duocentrevigintillionths three hundred fifty five duocenquattuorvigintillionths five hundred eighty four duocenquinvigintillionths nine hundred eighty two duocensexvigintillionths five hundred forty four duocenseptenvigintillionths four hundred seventy two duocenoctovigintillionths fifty one duocennovemvigintillionths ten duocentrigintillionths two hundred eighty one duocenuntrigintillionths three hundred twenty one duocenduotrigintillionths five hundred fifty two duocentretrigintillionths eight hundred seventy six duocenquattuortrigintillionths nine hundred seventy five duocenquintrigintillionths six hundred one duocensextrigintillionths one hundred forty three duocenseptentrigintillionths eight hundred forty one duocenoctotrigintillionths two hundred five duocennovemtrigintillionths ninety duocenquadragintillionths three hundred ninety three duocenunquadragintillionths four hundred twenty eight duocenduoquadragintillionths six hundred eighty two duocentrequadragintillionths three hundred seventy duocenquattuorquadragintillionths nine hundred duocenquinquadragintillionths one hundred seventy six duocensexquadragintillionths three hundred ninety four duocenseptenquadragintillionths four hundred ninety nine duocenoctoquadragintillionths ninety six duocennovemquadragintillionths five hundred sixty three duocenquinquagintillionths nine hundred ninety nine duocenunquinquagintillionths one hundred thirty six duocenduoquinquagintillionths three hundred fifty duocentrequinquagintillionths nine hundred fifty three duocenquattuorquinquagintillionths two hundred sixty four duocenquinquinquagintillionths three hundred six duocensexquinquagintillionths one hundred sixty four duocenseptenquinquagintillionths eighty seven duocenoctoquinquagintillionths five hundred forty two duocennovemquinquagintillionths one hundred six duocensexagintillionths two hundred sixty three duocenunsexagintillionths sixty eight duocenduosexagintillionths four hundred eighty five duocentresexagintillionths one hundred seventy eight duocenquattuorsexagintillionths eighty duocenquinsexagintillionths nine hundred eighty two duocensexsexagintillionths two hundred fifty one duocenseptensexagintillionths nine hundred sixty five duocenoctosexagintillionths three hundred forty nine duocennovemsexagintillionths four hundred seven duocenseptuagintillionths six hundred sixty seven duocenunseptuagintillionths eight hundred ninety duocenduoseptuagintillionths seven hundred eighty duocentreseptuagintillionths forty three duocenquattuorseptuagintillionths seven hundred twenty eight duocenquinseptuagintillionths five hundred forty seven duocensexseptuagintillionths four hundred forty duocenseptenseptuagintillionths eighty two duocenoctoseptuagintillionths eight hundred eighty seven duocennovemseptuagintillionths seven hundred thirty eight duocenoctogintillionths two hundred forty six duocenunoctogintillionths one hundred seven duocenduooctogintillionths one hundred seventy four duocentreoctogintillionths four hundred nineteen duocenquattuoroctogintillionths nine hundred twenty two duocenquinoctogintillionths five hundred seventy three duocensexoctogintillionths one hundred eighty eight duocenseptenoctogintillionths nine hundred eighteen duocenoctooctogintillionths nine hundred twenty seven duocennovemoctogintillionths two hundred fifty six duocennonagintillionths three hundred twenty eight duocenunnonagintillionths one hundred forty nine duocenduononagintillionths three hundred five duocentrenonagintillionths four hundred ten duocenquattuornonagintillionths eight hundred ninety two duocenquinnonagintillionths six hundred fifty duocensexnonagintillionths five hundred twenty seven duocenseptennonagintillionths seven hundred ninety four duocenoctononagintillionths three hundred sixty two duocennovemnonagintillionths six hundred seventy three trecentillionths three hundred forty five trecenuntillionths six hundred sixteen trecenduotillionths nine hundred forty eight trecentretillionths six hundred sixty trecenquattuortillionths nine hundred seventy nine trecenquintillionths four hundred twenty five trecensextillionths four hundred sixty six trecenseptentillionths eight hundred forty one trecenoctotillionths eight hundred ninety two trecennovemtillionths six hundred eighty four trecendecillionths six hundred seventy six trecenundecillionths six hundred fifty six trecenduodecillionths five hundred three trecentredecillionths eight hundred twenty one trecenquattuordecillionths six hundred fifty eight trecenquindecillionths two hundred twelve trecensexdecillionths six hundred eighty nine trecenseptendecillionths fifty five trecenoctodecillionths six hundred eighty four trecennovemdecillionths four hundred eighteen trecenvigintillionths six hundred two trecenunvigintillionths one hundred sixty nine trecenduovigintillionths eighty four trecentrevigintillionths six hundred eighty five trecenquattuorvigintillionths eighty nine trecenquinvigintillionths seven hundred sixty one trecensexvigintillionths seven hundred seventy three trecenseptenvigintillionths four hundred fifty five trecenoctovigintillionths seven hundred thirty seven trecennovemvigintillionths ninety four trecentrigintillionths five hundred twenty seven trecenuntrigintillionths ninety eight trecenduotrigintillionths seven hundred fifty one trecentretrigintillionths six hundred thirteen trecenquattuortrigintillionths one hundred twenty seven trecenquintrigintillionths six hundred eighty four trecensextrigintillionths one hundred one trecenseptentrigintillionths six hundred forty eight trecenoctotrigintillionths five hundred sixty eight trecennovemtrigintillionths eight hundred twelve trecenquadragintillionths nine hundred ninety six trecenunquadragintillionths eight hundred two trecenduoquadragintillionths four hundred sixty four trecentrequadragintillionths seven hundred fourteen trecenquattuorquadragintillionths seven hundred forty four trecenquinquadragintillionths one trecensexquadragintillionth two hundred ninety one trecenseptenquadragintillionths nine hundred ninety five trecenoctoquadragintillionths five hundred five trecennovemquadragintillionths seven hundred eighty nine trecenquinquagintillionths one hundred eighty one trecenunquinquagintillionths eight hundred forty one trecenduoquinquagintillionths nine hundred thirty eight trecentrequinquagintillionths four hundred sixty trecenquattuorquinquagintillionths one hundred trecenquinquinquagintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.0000000000000000000000000000000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601")));
        Assert.assertEquals("thirty five octovigintillion six hundred eighty four septenvigintillion five hundred forty four sexvigintillion seventy five quinvigintillion seven quattuorvigintillion eight hundred eighty nine trevigintillion three hundred fifty two duovigintillion eight hundred twelve unvigintillion seven hundred thirty seven vigintillion three hundred ninety nine novemdecillion five hundred eleven octodecillion nine hundred nine septendecillion one hundred fifteen sexdecillion three hundred thirty three quindecillion one hundred two quattuordecillion three hundred eighty six tredecillion three hundred twenty six duodecillion eight hundred ninety four undecillion seven hundred twenty decillion six hundred thirty nonillion five hundred thirty four octillion four hundred ninety eight septillion three hundred twenty sextillion eight hundred eighty two quintillion one hundred fifteen quadrillion five hundred eighty six trillion one hundred eighty six billion two hundred fifty million eight hundred fifty two thousand one hundred six point two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E+88")));
        Assert.assertEquals("three hundred fifty six quattuorquinquagintillionths eight hundred forty five quinquinquagintillionths four hundred forty sexquinquagintillionths seven hundred fifty septenquinquagintillionths seventy eight octoquinquagintillionths eight hundred ninety three novemquinquagintillionths five hundred twenty eight sexagintillionths one hundred twenty seven unsexagintillionths three hundred seventy three duosexagintillionths nine hundred ninety five tresexagintillionths one hundred nineteen quattuorsexagintillionths ninety one quinsexagintillionths one hundred fifty three sexsexagintillionths three hundred thirty one septensexagintillionths twenty three octosexagintillionths eight hundred sixty three novemsexagintillionths two hundred sixty eight septuagintillionths nine hundred forty seven unseptuagintillionths two hundred six duoseptuagintillionths three hundred five treseptuagintillionths three hundred forty four quattuorseptuagintillionths nine hundred eighty three quinseptuagintillionths two hundred eight sexseptuagintillionths eight hundred twenty one septenseptuagintillionths one hundred fifty five octoseptuagintillionths eight hundred sixty one novemseptuagintillionths eight hundred sixty two octogintillionths five hundred eight unoctogintillionths five hundred twenty one duooctogintillionths sixty two treoctogintillionths two hundred ninety five quattuoroctogintillionths seven hundred eighty eight quinoctogintillionths four hundred twenty eight sexoctogintillionths four hundred seventy seven septenoctogintillionths nine hundred thirteen octooctogintillionths two hundred sixty novemoctogintillionths one nonagintillionth seven hundred twenty four unnonagintillionths six hundred twenty one duononagintillionths five hundred twenty two trenonagintillionths three hundred seventy quattuornonagintillionths thirty nine quinnonagintillionths four hundred sixteen sexnonagintillionths three hundred sixty seven septennonagintillionths seven hundred seventy one octononagintillionths six hundred twenty seven novemnonagintillionths four hundred seventy nine centillionths nine hundred seventy eight cenuntillionths seven hundred seventy six cenduotillionths four hundred twenty two centretillionths six hundred twenty three cenquattuortillionths one hundred twelve cenquintillionths eighty nine censextillionths one hundred ninety one censeptentillionths one hundred ninety five cenoctotillionths one hundred thirty three cennovemtillionths eight hundred thirty five cendecillionths four hundred eleven cenundecillionths five hundred twenty five cenduodecillionths five hundred seventy one centredecillionths five hundred twelve cenquattuordecillionths thirty six cenquindecillionths four hundred ninety two censexdecillionths seventy one censeptendecillionths five hundred two cenoctodecillionths five hundred fourteen cennovemdecillionths six hundred forty nine cenvigintillionths nine hundred eighty four cenunvigintillionths two hundred sixty cenduovigintillionths six hundred sixteen centrevigintillionths nine hundred sixty six cenquattuorvigintillionths seven hundred forty seven cenquinvigintillionths seven hundred eighty three censexvigintillionths seven hundred censeptenvigintillionths six hundred seventeen cenoctovigintillionths three hundred fifty cennovemvigintillionths twelve centrigintillionths three hundred thirty four cenuntrigintillionths eight hundred seventy three cenduotrigintillionths four hundred fifty nine centretrigintillionths four hundred sixty two cenquattuortrigintillionths five hundred seventy eight cenquintrigintillionths one hundred sixty seven censextrigintillionths six hundred eighteen censeptentrigintillionths seven hundred ninety seven cenoctotrigintillionths two hundred seventeen cennovemtrigintillionths four hundred thirty five cenquadragintillionths two hundred twenty five cenunquadragintillionths seven hundred seventy nine cenduoquadragintillionths five hundred fifty nine centrequadragintillionths six hundred twenty six cenquattuorquadragintillionths one hundred fifty two cenquinquadragintillionths five hundred one censexquadragintillionths twelve censeptenquadragintillionths one hundred sixty one cenoctoquadragintillionths seven hundred eighty three cennovemquadragintillionths one hundred seventy four cenquinquagintillionths seven hundred thirty cenunquinquagintillionths two hundred sixty eight cenduoquinquagintillionths six hundred seventy three centrequinquagintillionths six hundred twenty two cenquattuorquinquagintillionths thirty two cenquinquinquagintillionths four hundred ninety three censexquinquagintillionths four hundred sixty seven censeptenquinquagintillionths seven hundred three cenoctoquinquagintillionths two hundred forty two cennovemquinquagintillionths one hundred sixty seven censexagintillionths three hundred twenty eight cenunsexagintillionths one hundred three cenduosexagintillionths eight hundred fifty four centresexagintillionths eight hundred fifty one cenquattuorsexagintillionths eight hundred four cenquinsexagintillionths nine hundred thirty three censexsexagintillionths eighty seven censeptensexagintillionths four hundred four cenoctosexagintillionths seven hundred seventy three cennovemsexagintillionths eight hundred twenty six censeptuagintillionths one hundred sixty four cenunseptuagintillionths six hundred cenduoseptuagintillionths six hundred twenty five centreseptuagintillionths seven hundred eighty six cenquattuorseptuagintillionths seven hundred sixty five cenquinseptuagintillionths three hundred ninety three censexseptuagintillionths two hundred ten censeptenseptuagintillionths three hundred sixty nine cenoctoseptuagintillionths fifty five cennovemseptuagintillionths two hundred fifty five cenoctogintillionths one hundred thirty three cenunoctogintillionths three hundred sixty two cenduooctogintillionths nine hundred forty seven centreoctogintillionths eight hundred ninety two cenquattuoroctogintillionths nine hundred thirty two cenquinoctogintillionths three hundred sixty two censexoctogintillionths two hundred eighty three censeptenoctogintillionths six hundred ten cenoctooctogintillionths three hundred forty one cennovemoctogintillionths eight hundred thirty eight cennonagintillionths nine hundred thirty nine cenunnonagintillionths three hundred forty six cenduononagintillionths five hundred five centrenonagintillionths nine hundred five cenquattuornonagintillionths six hundred thirty two cenquinnonagintillionths eight hundred six censexnonagintillionths one hundred forty nine censeptennonagintillionths two hundred eighty eight cenoctononagintillionths two hundred eighty one cennovemnonagintillionths nine hundred ninety duocentillionths three hundred seventy duocenuntillionths seventy seven duocenduotillionths five hundred eighty seven duocentretillionths two hundred sixty nine duocenquattuortillionths eight hundred three duocenquintillionths eight hundred sixty seven duocensextillionths one hundred seventy duocenseptentillionths four hundred one duocenoctotillionths six hundred ninety nine duocennovemtillionths two hundred eighty duocendecillionths seven hundred eighty seven duocenundecillionths five hundred nineteen duocenduodecillionths five hundred ninety one duocentredecillionths one hundred fifty four duocenquattuordecillionths eighty eight duocenquindecillionths three hundred thirty duocensexdecillionths two hundred fifty four duocenseptendecillionths nine hundred five duocenoctodecillionths four hundred ninety four duocennovemdecillionths eight hundred twenty seven duocenvigintillionths ninety one duocenunvigintillionths nine hundred thirty two duocenduovigintillionths nine hundred eighty four duocentrevigintillionths one hundred fourteen duocenquattuorvigintillionths nine hundred twenty one duocenquinvigintillionths fifteen duocensexvigintillionths two hundred sixteen duocenseptenvigintillionths two duocenoctovigintillionths two hundred twenty five duocennovemvigintillionths three hundred ninety six duocentrigintillionths seventy nine duocenuntrigintillionths one hundred sixty seven duocenduotrigintillionths one hundred seventeen duocentretrigintillionths four hundred seventy four duocenquattuortrigintillionths six hundred fifty two duocenquintrigintillionths five hundred eighty one duocensextrigintillionths eight hundred ninety three duocenseptentrigintillionths six hundred eleven duocenoctotrigintillionths six hundred forty nine duocennovemtrigintillionths seven hundred thirty six duocenquadragintillionths four hundred fourteen duocenunquadragintillionths nine hundred forty eight duocenduoquadragintillionths three duocentrequadragintillionths six hundred fifty duocenquattuorquadragintillionths six hundred fifty four duocenquinquadragintillionths one hundred eighty eight duocensexquadragintillionths five hundred eighty one duocenseptenquadragintillionths seven hundred eighty three duocenoctoquadragintillionths nine hundred ninety eight duocennovemquadragintillionths five hundred seventy eight duocenquinquagintillionths nine hundred thirty three duocenunquinquagintillionths four hundred thirty three duocenduoquinquagintillionths eighty six duocentrequinquagintillionths seven hundred forty duocenquattuorquinquagintillionths eight hundred sixteen duocenquinquinquagintillionths eight hundred fifty five duocensexquinquagintillionths five hundred fifteen duocenseptenquinquagintillionths nine hundred seventy seven duocenoctoquinquagintillionths two hundred sixty five duocennovemquinquagintillionths seven hundred forty four duocensexagintillionths four hundred thirteen duocenunsexagintillionths four hundred eighty seven duocenduosexagintillionths five hundred fifty six duocentresexagintillionths seven hundred thirty three duocenquattuorsexagintillionths four hundred fifty eight duocenquinsexagintillionths seven hundred eleven duocensexsexagintillionths six hundred thirty five duocenseptensexagintillionths five hundred fifty eight duocenoctosexagintillionths four hundred ninety eight duocennovemsexagintillionths two hundred fifty four duocenseptuagintillionths four hundred forty seven duocenunseptuagintillionths two hundred five duocenduoseptuagintillionths one hundred one duocentreseptuagintillionths twenty eight duocenquattuorseptuagintillionths one hundred thirty two duocenquinseptuagintillionths one hundred fifty five duocensexseptuagintillionths two hundred eighty seven duocenseptenseptuagintillionths six hundred ninety seven duocenoctoseptuagintillionths five hundred sixty duocennovemseptuagintillionths one hundred fourteen duocenoctogintillionths three hundred eighty four duocenunoctogintillionths one hundred twenty duocenduooctogintillionths five hundred nine duocentreoctogintillionths thirty nine duocenquattuoroctogintillionths three hundred forty two duocenquinoctogintillionths eight hundred sixty eight duocensexoctogintillionths two hundred thirty seven duocenseptenoctogintillionths ninety duocenoctooctogintillionths seventeen duocennovemoctogintillionths six hundred thirty nine duocennonagintillionths four hundred forty nine duocenunnonagintillionths nine hundred nine duocenduononagintillionths six hundred fifty six duocentrenonagintillionths three hundred ninety nine duocenquattuornonagintillionths nine hundred thirteen duocenquinnonagintillionths six hundred thirty five duocensexnonagintillionths ninety five duocenseptennonagintillionths three hundred twenty six duocenoctononagintillionths four hundred thirty duocennovemnonagintillionths six hundred sixteen trecentillionths four hundred eight trecenuntillionths seven hundred fifty four trecenduotillionths two hundred ten trecentretillionths six hundred twenty six trecenquattuortillionths three hundred six trecenquintillionths eight hundred forty eight trecensextillionths five hundred seventeen trecenseptentillionths eight hundred eight trecenoctotillionths ninety eight trecennovemtillionths two hundred twenty five trecendecillionths one hundred ninety six trecenundecillionths five hundred thirty four trecenduodecillionths nine hundred forty trecentredecillionths seven hundred sixty six trecenquattuordecillionths seven hundred eighty nine trecenquindecillionths seventy eight trecensexdecillionths four trecenseptendecillionths three hundred seventy two trecenoctodecillionths eight hundred fifty four trecennovemdecillionths seven hundred forty four trecenvigintillionths eight trecenunvigintillionths two hundred eighty eight trecenduovigintillionths seven hundred seventy three trecentrevigintillionths eight hundred twenty four trecenquattuorvigintillionths six hundred ten trecenquinvigintillionths seven hundred seventeen trecensexvigintillionths four hundred forty one trecenseptenvigintillionths nine hundred ninety two trecenoctovigintillionths two hundred fifty seven trecennovemvigintillionths three hundred eighteen trecentrigintillionths eight hundred ninety one trecenuntrigintillionths eight hundred ninety two trecenduotrigintillionths seven hundred twenty five trecentretrigintillionths six hundred thirty two trecenquattuortrigintillionths eight hundred fourteen trecenquintrigintillionths nine hundred thirty trecensextrigintillionths five hundred forty one trecenseptentrigintillionths eighty nine trecenoctotrigintillionths two hundred sixty five trecennovemtrigintillionths fifty two trecenquadragintillionths seven hundred seventy nine trecenunquadragintillionths four hundred thirty six trecenduoquadragintillionths two hundred sixty seven trecentrequadragintillionths three hundred thirty four trecenquattuorquadragintillionths five hundred sixty one trecenquinquadragintillionths six hundred ninety four trecensexquadragintillionths eight hundred sixty six trecenseptenquadragintillionths ninety seven trecenoctoquadragintillionths nine hundred forty two trecennovemquadragintillionths five hundred forty six trecenquinquagintillionths six hundred eighty four trecenunquinquagintillionths one hundred eighty nine trecenduoquinquagintillionths two hundred sixty eight trecentrequinquagintillionths four hundred sixty seven trecenquattuorquinquagintillionths six hundred sixty five trecenquinquinquagintillionths six hundred fifty trecensexquinquagintillionths three hundred eighty two trecenseptenquinquagintillionths one hundred sixty five trecenoctoquinquagintillionths eight hundred twenty one trecennovemquinquagintillionths two hundred sixty eight trecensexagintillionths nine hundred five trecenunsexagintillionths five hundred sixty eight trecenduosexagintillionths four hundred forty one trecentresexagintillionths eight hundred sixty trecenquattuorsexagintillionths two hundred sixteen trecenquinsexagintillionths nine hundred eight trecensexsexagintillionths four hundred sixty eight trecenseptensexagintillionths five hundred eight trecenoctosexagintillionths nine hundred seventy six trecennovemsexagintillionths one hundred seventy seven trecenseptuagintillionths three hundred forty five trecenunseptuagintillionths five hundred seventy three trecenduoseptuagintillionths seven hundred nine trecentreseptuagintillionths four hundred fifty two trecenquattuorseptuagintillionths seven hundred nine trecenquinseptuagintillionths eight hundred seventy five trecensexseptuagintillionths one hundred sixty one trecenseptenseptuagintillionths three hundred twelve trecenoctoseptuagintillionths seven hundred sixty eight trecennovemseptuagintillionths four hundred ten trecenoctogintillionths one hundred sixty four trecenunoctogintillionths eight hundred fifty six trecenduooctogintillionths eight hundred eighty one trecentreoctogintillionths two hundred ninety nine trecenquattuoroctogintillionths six hundred eighty trecenquinoctogintillionths two hundred forty six trecensexoctogintillionths four hundred seventy one trecenseptenoctogintillionths four hundred seventy four trecenoctooctogintillionths four hundred trecennovemoctogintillionths one hundred twenty nine trecennonagintillionths one hundred ninety nine trecenunnonagintillionths five hundred fifty trecenduononagintillionths five hundred seventy eight trecentrenonagintillionths nine hundred eighteen trecenquattuornonagintillionths one hundred eighty four trecenquinnonagintillionths one hundred ninety three trecensexnonagintillionths eight hundred forty six trecenseptennonagintillionths ten trecenoctononagintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601E-163")));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E8456123459")));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E10000000000")));
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E-8456123459")));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("1E-10000000000")));
        
        //fraction mode
        Assert.assertEquals("one tenth", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point one", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one tenth", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.08"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero eight", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.08"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("eight hundredths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.08"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.33"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point three three", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.33"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("thirty three hundredths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.33"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1001"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point one zero zero one", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1001"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one tenth one hundred millionths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.1001"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberToNumberPhrase(new BigDecimal("300.9141"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("three hundred point nine one four one", NumberStringUtility.numberToNumberPhrase(new BigDecimal("300.9141"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("three hundred and nine hundred fourteen thousandths one hundred millionths", NumberStringUtility.numberToNumberPhrase(new BigDecimal("300.9141"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000000123456789"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000000123456789"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("one billionth two hundred thirty four trillionths five hundred sixty seven quadrillionths eight hundred ninety quintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.00000000123456789"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-9875116.000000167"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero zero zero zero zero one six seven",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-9875116.000000167"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("-9875116.000000167"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("five hundred forty nine thousandths fifty four millionths nine hundred eighty four billionths eight hundred ninety one trillionths five hundred sixty four quadrillionths six hundred fifty four quintillionths ninety four sextillionths nine hundred eighty nine nonillionths seven hundred fifty three decillionths five hundred nine undecillionths one hundred ninety three duodecillionths nine hundred sixty eight tredecillionths two hundred forty quattuordecillionths eight hundred seventeen quindecillionths three hundred one sexdecillionths five hundred fifty septendecillionths six hundred sixty eight octodecillionths ninety four novemdecillionths eight hundred eighty three vigintillionths five hundred ninety five unvigintillionths nine hundred sixty six duovigintillionths five hundred fifty seven trevigintillionths ten untrigintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"), NumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point nine zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimalumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("nine tenths ten trecenunquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimalumberStringUtility.FractionMode.FANCY));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), NumberStringUtility.FractionMode.DEFAULT));
        Assert.assertEquals("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), NumberStringUtility.FractionMode.SIMPLE));
        Assert.assertEquals("three millionths five hundred sixty eight billionths four hundred fifty four trillionths four hundred seven quadrillionths five hundred quintillionths seven hundred eighty eight sextillionths nine hundred thirty five septillionths two hundred eighty one octillionths two hundred seventy three nonillionths seven hundred thirty nine decillionths nine hundred fifty one undecillionths one hundred ninety duodecillionths nine hundred eleven tredecillionths five hundred thirty three quattuordecillionths three hundred ten quindecillionths two hundred thirty eight sexdecillionths six hundred thirty two septendecillionths six hundred eighty nine octodecillionths four hundred seventy two novemdecillionths sixty three vigintillionths fifty three unvigintillionths four hundred forty nine duovigintillionths eight hundred thirty two trevigintillionths eighty eight quattuorvigintillionths two hundred eleven quinvigintillionths five hundred fifty eight sexvigintillionths six hundred eighteen septenvigintillionths six hundred twenty five octovigintillionths eighty five novemvigintillionths two hundred ten trigintillionths six hundred twenty two untrigintillionths nine hundred fifty seven duotrigintillionths eight hundred eighty four tretrigintillionths two hundred eighty four quattuortrigintillionths seven hundred seventy nine quintrigintillionths one hundred thirty two sextrigintillionths six hundred septentrigintillionths seventeen octotrigintillionths two hundred forty six novemtrigintillionths two hundred fifteen quadragintillionths two hundred twenty three unquadragintillionths seven hundred duoquadragintillionths three hundred ninety four trequadragintillionths one hundred sixty three quattuorquadragintillionths six hundred seventy seven quinquadragintillionths seven hundred sixteen sexquadragintillionths two hundred seventy four septenquadragintillionths seven hundred ninety nine octoquadragintillionths seven hundred eighty seven novemquadragintillionths seven hundred sixty four quinquagintillionths two hundred twenty six unquinquagintillionths two hundred thirty one duoquinquagintillionths one hundred twenty trequinquagintillionths eight hundred ninety one quattuorquinquagintillionths nine hundred eleven quinquinquagintillionths nine hundred fifty one sexquinquagintillionths three hundred thirty eight septenquinquagintillionths three hundred fifty four octoquinquagintillionths one hundred fifteen novemquinquagintillionths two hundred fifty five sexagintillionths seven hundred fifteen unsexagintillionths one hundred twenty duosexagintillionths three hundred sixty four tresexagintillionths nine hundred twenty quattuorsexagintillionths seven hundred fifteen quinsexagintillionths twenty five sexsexagintillionths one hundred forty six septensexagintillionths four hundred ninety nine octosexagintillionths eight hundred forty two novemsexagintillionths six hundred six septuagintillionths one hundred sixty nine unseptuagintillionths six hundred sixty seven duoseptuagintillionths four hundred seventy seven treseptuagintillionths eight hundred thirty seven quattuorseptuagintillionths six quinseptuagintillionths one hundred seventy three sexseptuagintillionths five hundred septenseptuagintillionths one hundred twenty three octoseptuagintillionths three hundred forty eight novemseptuagintillionths seven hundred thirty four octogintillionths five hundred ninety four unoctogintillionths six hundred twenty five duooctogintillionths seven hundred eighty one treoctogintillionths six hundred seventy six quattuoroctogintillionths one hundred eighty seven quinoctogintillionths nine hundred seventy two sexoctogintillionths one hundred seventy four septenoctogintillionths three hundred fifty two octooctogintillionths two hundred fifty seven novemoctogintillionths seven hundred ninety five nonagintillionths five hundred ninety six unnonagintillionths two hundred sixty one duononagintillionths five hundred twenty five trenonagintillionths ten quattuornonagintillionths one hundred twenty one quinnonagintillionths six hundred seventeen sexnonagintillionths eight hundred thirty one septennonagintillionths seven hundred forty seven octononagintillionths three hundred two novemnonagintillionths six hundred eighty six centillionths seven hundred thirty six cenuntillionths two hundred twenty cenduotillionths three hundred twenty four centretillionths nine hundred thirty four cenquattuortillionths six hundred seventy seven cenquintillionths thirty two censextillionths four hundred twenty one censeptentillionths six hundred seventy three cenoctotillionths two hundred eighty one cennovemtillionths thirty eight cendecillionths five hundred forty eight cenundecillionths five hundred eighteen cenduodecillionths forty nine centredecillionths three hundred thirty cenquattuordecillionths eight hundred seventy four cenquindecillionths forty seven censexdecillionths seven hundred thirty eight censeptendecillionths two hundred sixty one cenoctodecillionths six hundred forty six cennovemdecillionths six cenvigintillionths two hundred fifty seven cenunvigintillionths eight hundred sixty seven cenduovigintillionths six hundred fifty three centrevigintillionths nine hundred thirty two cenquattuorvigintillionths one hundred three cenquinvigintillionths six hundred ninety censexvigintillionths five hundred fifty two censeptenvigintillionths five hundred fifty one cenoctovigintillionths three hundred thirty three cennovemvigintillionths six hundred twenty nine centrigintillionths four hundred seventy eight cenuntrigintillionths nine hundred twenty nine cenduotrigintillionths three hundred twenty three centretrigintillionths six hundred twenty two cenquattuortrigintillionths eight hundred thirty six cenquintrigintillionths one hundred three censextrigintillionths four hundred eighteen censeptentrigintillionths three hundred eighty nine cenoctotrigintillionths three hundred ninety three cennovemtrigintillionths four hundred sixty five cenquadragintillionths fifty nine cenunquadragintillionths fifty six cenduoquadragintillionths three hundred twenty eight centrequadragintillionths sixty one cenquattuorquadragintillionths four hundred ninety two cenquinquadragintillionths eight hundred eighty two censexquadragintillionths eight hundred nineteen censeptenquadragintillionths nine hundred three cenoctoquadragintillionths seven hundred cennovemquadragintillionths seven hundred seventy five cenquinquagintillionths eight hundred seventy two cenunquinquagintillionths six hundred ninety eight cenduoquinquagintillionths thirty eight centrequinquagintillionths six hundred seventy one cenquattuorquinquagintillionths seven hundred four cenquinquinquagintillionths sixteen censexquinquagintillionths nine hundred ninety two censeptenquinquagintillionths eight hundred seven cenoctoquinquagintillionths eight hundred seventy five cennovemquinquagintillionths one hundred ninety five censexagintillionths nine hundred eleven cenunsexagintillionths five hundred forty cenduosexagintillionths eight hundred eighty three centresexagintillionths three hundred two cenquattuorsexagintillionths five hundred forty nine cenquinsexagintillionths fifty four censexsexagintillionths nine hundred forty eight censeptensexagintillionths two hundred seventy cenoctosexagintillionths nine hundred nineteen cennovemsexagintillionths three hundred twenty nine censeptuagintillionths eight hundred forty one cenunseptuagintillionths one hundred forty nine cenduoseptuagintillionths two hundred ten centreseptuagintillionths one hundred fifty two cenquattuorseptuagintillionths one hundred sixty cenquinseptuagintillionths twenty two censexseptuagintillionths two hundred fifty three censeptenseptuagintillionths nine hundred sixty cenoctoseptuagintillionths seven hundred ninety one cennovemseptuagintillionths six hundred seventy one cenoctogintillionths one hundred seventy four cenunoctogintillionths seven hundred forty six cenduooctogintillionths five hundred twenty five centreoctogintillionths eight hundred eighteen cenquattuoroctogintillionths nine hundred thirty six cenquinoctogintillionths one hundred sixteen censexoctogintillionths four hundred ninety seven censeptenoctogintillionths three hundred sixty four cenoctooctogintillionths one hundred forty nine cennovemoctogintillionths four hundred eighty cennonagintillionths thirty six cenunnonagintillionths five hundred six cenduononagintillionths five hundred forty one centrenonagintillionths eight hundred eighty five cenquattuornonagintillionths eight hundred seventeen cenquinnonagintillionths eight hundred thirty nine censexnonagintillionths nine hundred eighty five censeptennonagintillionths seven hundred eighty nine cenoctononagintillionths three hundred thirty four cennovemnonagintillionths three hundred thirty duocentillionths eight hundred sixty seven duocenuntillionths four hundred eight duocenduotillionths one hundred sixty eight duocentretillionths five hundred fifty five duocenquattuortillionths one hundred fifty nine duocenquintillionths seven hundred seventy two duocensextillionths six hundred fifty seven duocenseptentillionths four hundred forty four duocenoctotillionths one hundred thirty four duocennovemtillionths eight hundred seventy five duocendecillionths five hundred sixty seven duocenundecillionths three hundred thirty four duocenduodecillionths five hundred eighty seven duocentredecillionths one hundred sixteen duocenquattuordecillionths three hundred fifty five duocenquindecillionths five hundred eighty four duocensexdecillionths nine hundred eighty two duocenseptendecillionths five hundred forty four duocenoctodecillionths four hundred seventy two duocennovemdecillionths fifty one duocenvigintillionths ten duocenunvigintillionths two hundred eighty one duocenduovigintillionths three hundred twenty one duocentrevigintillionths five hundred fifty two duocenquattuorvigintillionths eight hundred seventy six duocenquinvigintillionths nine hundred seventy five duocensexvigintillionths six hundred one duocenseptenvigintillionths one hundred forty three duocenoctovigintillionths eight hundred forty one duocennovemvigintillionths two hundred five duocentrigintillionths ninety duocenuntrigintillionths three hundred ninety three duocenduotrigintillionths four hundred twenty eight duocentretrigintillionths six hundred eighty two duocenquattuortrigintillionths three hundred seventy duocenquintrigintillionths nine hundred duocensextrigintillionths one hundred seventy six duocenseptentrigintillionths three hundred ninety four duocenoctotrigintillionths four hundred ninety nine duocennovemtrigintillionths ninety six duocenquadragintillionths five hundred sixty three duocenunquadragintillionths nine hundred ninety nine duocenduoquadragintillionths one hundred thirty six duocentrequadragintillionths three hundred fifty duocenquattuorquadragintillionths nine hundred fifty three duocenquinquadragintillionths two hundred sixty four duocensexquadragintillionths three hundred six duocenseptenquadragintillionths one hundred sixty four duocenoctoquadragintillionths eighty seven duocennovemquadragintillionths five hundred forty two duocenquinquagintillionths one hundred six duocenunquinquagintillionths two hundred sixty three duocenduoquinquagintillionths sixty eight duocentrequinquagintillionths four hundred eighty five duocenquattuorquinquagintillionths one hundred seventy eight duocenquinquinquagintillionths eighty duocensexquinquagintillionths nine hundred eighty two duocenseptenquinquagintillionths two hundred fifty one duocenoctoquinquagintillionths nine hundred sixty five duocennovemquinquagintillionths three hundred forty nine duocensexagintillionths four hundred seven duocenunsexagintillionths six hundred sixty seven duocenduosexagintillionths eight hundred ninety duocentresexagintillionths seven hundred eighty duocenquattuorsexagintillionths forty three duocenquinsexagintillionths seven hundred twenty eight duocensexsexagintillionths five hundred forty seven duocenseptensexagintillionths four hundred forty duocenoctosexagintillionths eighty two duocennovemsexagintillionths eight hundred eighty seven duocenseptuagintillionths seven hundred thirty eight duocenunseptuagintillionths two hundred forty six duocenduoseptuagintillionths one hundred seven duocentreseptuagintillionths one hundred seventy four duocenquattuorseptuagintillionths four hundred nineteen duocenquinseptuagintillionths nine hundred twenty two duocensexseptuagintillionths five hundred seventy three duocenseptenseptuagintillionths one hundred eighty eight duocenoctoseptuagintillionths nine hundred eighteen duocennovemseptuagintillionths nine hundred twenty seven duocenoctogintillionths two hundred fifty six duocenunoctogintillionths three hundred twenty eight duocenduooctogintillionths one hundred forty nine duocentreoctogintillionths three hundred five duocenquattuoroctogintillionths four hundred ten duocenquinoctogintillionths eight hundred ninety two duocensexoctogintillionths six hundred fifty duocenseptenoctogintillionths five hundred twenty seven duocenoctooctogintillionths seven hundred ninety four duocennovemoctogintillionths three hundred sixty two duocennonagintillionths six hundred seventy three duocenunnonagintillionths three hundred forty five duocenduononagintillionths six hundred sixteen duocentrenonagintillionths nine hundred forty eight duocenquattuornonagintillionths six hundred sixty duocenquinnonagintillionths nine hundred seventy nine duocensexnonagintillionths four hundred twenty five duocenseptennonagintillionths four hundred sixty six duocenoctononagintillionths eight hundred forty one duocennovemnonagintillionths eight hundred ninety two trecentillionths six hundred eighty four trecenuntillionths six hundred seventy six trecenduotillionths six hundred fifty six trecentretillionths five hundred three trecenquattuortillionths eight hundred twenty one trecenquintillionths six hundred fifty eight trecensextillionths two hundred twelve trecenseptentillionths six hundred eighty nine trecenoctotillionths fifty five trecennovemtillionths six hundred eighty four trecendecillionths four hundred eighteen trecenundecillionths six hundred two trecenduodecillionths one hundred sixty nine trecentredecillionths eighty four trecenquattuordecillionths six hundred eighty five trecenquindecillionths eighty nine trecensexdecillionths seven hundred sixty one trecenseptendecillionths seven hundred seventy three trecenoctodecillionths four hundred fifty five trecennovemdecillionths seven hundred thirty seven trecenvigintillionths ninety four trecenunvigintillionths five hundred twenty seven trecenduovigintillionths ninety eight trecentrevigintillionths seven hundred fifty one trecenquattuorvigintillionths six hundred thirteen trecenquinvigintillionths one hundred twenty seven trecensexvigintillionths six hundred eighty four trecenseptenvigintillionths one hundred one trecenoctovigintillionths six hundred forty eight trecennovemvigintillionths five hundred sixty eight trecentrigintillionths eight hundred twelve trecenuntrigintillionths nine hundred ninety six trecenduotrigintillionths eight hundred two trecentretrigintillionths four hundred sixty four trecenquattuortrigintillionths seven hundred fourteen trecenquintrigintillionths seven hundred forty four trecensextrigintillionths one trecenseptentrigintillionth two hundred ninety one trecenoctotrigintillionths nine hundred ninety five trecennovemtrigintillionths five hundred five trecenquadragintillionths seven hundred eighty nine trecenunquadragintillionths one hundred eighty one trecenduoquadragintillionths eight hundred forty one trecentrequadragintillionths nine hundred thirty eight trecenquattuorquadragintillionths four hundred sixty trecenquinquadragintillionths one hundred trecensexquadragintillionths",
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("0.0000035684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057891818419384601"), NumberStringUtility.FractionMode.FANCY));
        
        //invalid
        TestUtils.assertException(NumberFormatException.class, "Character N is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.", () ->
                NumberStringUtility.numberToNumberPhrase(Double.NaN));
        TestUtils.assertException(NumberFormatException.class, () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("")));
        TestUtils.assertException(NumberFormatException.class, () ->
                NumberStringUtility.numberToNumberPhrase(new BigDecimal("test")));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberToNumberPhrase(null));
    }
    
    /**
     * JUnit test of numberStringToExponentialNotationPhrase.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberStringToExponentialNotationPhrase(String)
     */
    @Test
    public void testNumberStringToExponentialNotationPhrase() throws Exception {
        //standard
        Assert.assertEquals("one times ten to the fifteen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1E+15"));
        Assert.assertEquals("one point seven eight four four one times ten to the eight",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1.78441e8"));
        Assert.assertEquals("one point six nine nine times ten to the nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("0.1699e10"));
        Assert.assertEquals("one point six nine nine times ten to the negative nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("0.00001699e-4"));
        Assert.assertEquals("negative eight point six four eight four nine times ten to the thirteen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-8.64849e13"));
        Assert.assertEquals("one point seven eight four four one times ten to the negative eight",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1.78441e-8"));
        Assert.assertEquals("negative eight point six four eight four nine times ten to the negative thirteen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-8.64849e-13"));
        Assert.assertEquals("four point six nine eight four one six zero five zero one five six five five eight nine four seven nine zero one three two one five four times ten to the thirty six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("4.69841605015655894790132154e36"));
        Assert.assertEquals("negative four point six nine eight four one six zero five zero one five six five five eight nine four seven nine zero one three two one five four times ten to the thirty six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-4.69841605015655894790132154e36"));
        Assert.assertEquals("four point six nine eight four one six zero five zero one five six five five eight nine four seven nine zero one three two one five four times ten to the negative thirty six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("4.69841605015655894790132154e-36"));
        Assert.assertEquals("negative four point six nine eight four one six zero five zero one five six five five eight nine four seven nine zero one three two one five four times ten to the negative thirty six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-4.69841605015655894790132154e-36"));
        
        //dirty
        Assert.assertEquals("seven point one five four six one one times ten to the four",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715.4611e2"));
        Assert.assertEquals("seven point one five four six one one times ten to the one",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715.4611e-1"));
        Assert.assertEquals("negative seven point one five four six one one times ten to the negative one",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-715.4611e-3"));
        Assert.assertEquals("negative seven point one five four six one one times ten to the six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-715.4611e4"));
        Assert.assertEquals("seven point one five four six one one times ten to the negative three",
                NumberStringUtility.numberStringToExponentialNotationPhrase("7.154611e-3"));
        Assert.assertEquals("seven point one five four six one one times ten to the twelve",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715.4611e10"));
        Assert.assertEquals("negative seven point one five four six one one times ten to the negative eight",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-715.4611e-10"));
        Assert.assertEquals("seven point one five four six one one times ten to the two",
                NumberStringUtility.numberStringToExponentialNotationPhrase("0.0007154611e6"));
        Assert.assertEquals("seven point one five four six one one times ten to the two",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715461100000.00e-9"));
        Assert.assertEquals("seven point one five four six one one times ten to the two",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715.4611e0"));
        Assert.assertEquals("seven point one five four six one one times ten to the two",
                NumberStringUtility.numberStringToExponentialNotationPhrase("715.4611e-0"));
        Assert.assertEquals("one point zero eight six times ten to the eleven",
                NumberStringUtility.numberStringToExponentialNotationPhrase("10.8.6e10"));
        
        //larger cases
        Assert.assertEquals("three point four six five eight seven four one two two four nine eight four zero six four one six five four zero four six four times ten to the fifty four",
                NumberStringUtility.numberStringToExponentialNotationPhrase("3.465874122498406416540464e54"));
        Assert.assertEquals("nine point five six six one one five six four six nine eight seven zero eight nine one eight six six five seven five times ten to the fifty five",
                NumberStringUtility.numberStringToExponentialNotationPhrase("9.5661156469870891866575e55"));
        Assert.assertEquals("one point eight seven four four two zero nine zero five zero eight nine four seven eight nine six two one one six one one times ten to the fifty six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1.87442090508947896211611e56"));
        Assert.assertEquals("two point zero nine seven seven five one two seven four six five four two three eight eight four five six nine seven times ten to the fifty seven",
                NumberStringUtility.numberStringToExponentialNotationPhrase("2.097751274654238845697e57"));
        Assert.assertEquals("seven point four six one one two three eight seven seven nine eight zero four eight nine four six five one six two four five times ten to the one hundred eight",
                NumberStringUtility.numberStringToExponentialNotationPhrase("7.46112387798048946516245e108"));
        Assert.assertEquals("four point zero zero zero zero four two three three nine three zero three zero six five eight four eight zero four five six times ten to the one hundred eighty nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("4.0000423393030658480456e189"));
        Assert.assertEquals("eight point four five one nine nine seven four six three eight nine seven zero eight four five six zero one one two three one six nine eight four zero five six six times ten to the three hundred seven",
                NumberStringUtility.numberStringToExponentialNotationPhrase("8.4519974638970845601123169840566e307"));
        
        //extremely large cases
        Assert.assertEquals("one times ten to the eight billion four hundred fifty six million one hundred twenty three thousand four hundred fifty nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1E8456123459"));
        Assert.assertEquals("one times ten to the negative eight billion four hundred fifty six million one hundred twenty three thousand four hundred fifty nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1E-8456123459"));
        Assert.assertEquals("eight point four five one three two one nine eight eight three zero seven six three times ten to the forty billion sixty five million four hundred twenty three thousand one hundred seventeen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("8.45132198830763E40065423117"));
        Assert.assertEquals("eight point four five one three two one nine eight eight three zero seven six three times ten to the negative forty billion sixty five million four hundred twenty three thousand one hundred seventeen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("8.45132198830763E-40065423117"));
        Assert.assertEquals("negative one times ten to the eight billion four hundred fifty six million one hundred twenty three thousand four hundred fifty nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-1E8456123459"));
        Assert.assertEquals("negative one times ten to the negative eight billion four hundred fifty six million one hundred twenty three thousand four hundred fifty nine",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-1E-8456123459"));
        Assert.assertEquals("negative eight point four five one three two one nine eight eight three zero seven six three times ten to the forty billion sixty five million four hundred twenty three thousand one hundred seventeen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-8.45132198830763E40065423117"));
        Assert.assertEquals("negative eight point four five one three two one nine eight eight three zero seven six three times ten to the negative forty billion sixty five million four hundred twenty three thousand one hundred seventeen",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-8.45132198830763E-40065423117"));
        Assert.assertEquals("one times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1E9223372036854775806"));
        Assert.assertEquals("one times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("1E-9223372036854775806"));
        Assert.assertEquals("negative one times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-1E9223372036854775806"));
        Assert.assertEquals("negative one times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("-1E-9223372036854775806"));
        Assert.assertEquals("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred six",
                NumberStringUtility.numberStringToExponentialNotationPhrase("9.999999999999E9223372036854775806"));
        Assert.assertEquals("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand seven hundred ninety four",
                NumberStringUtility.numberStringToExponentialNotationPhrase("9.999999999999E-9223372036854775794"));
        
        //invalid
        TestUtils.assertException(NumberFormatException.class, "The string: '1' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("1"));
        TestUtils.assertException(NumberFormatException.class, "The string: '-153' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("-153"));
        TestUtils.assertException(NumberFormatException.class, "The string: '153.8413' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("153.8413"));
        TestUtils.assertException(NumberFormatException.class, "The string: '1.8' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("1.8e"));
        TestUtils.assertException(NumberFormatException.class, "The string: '0' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("e"));
        TestUtils.assertException(NumberFormatException.class, "The string: '0' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase(""));
        TestUtils.assertException(NumberFormatException.class, "The string: 'TE+ST' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase("test"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberStringToExponentialNotationPhrase(null));
    }
    
    /**
     * JUnit test of numberToExponentialNotationPhrase.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberToExponentialNotationPhrase(Number)
     */
    @Test
    public void testNumberToExponentialNotationPhrase() throws Exception {
        //standard
        Assert.assertEquals("one times ten to the fifteen",
                NumberStringUtility.numberToExponentialNotationPhrase(1E+15));
        Assert.assertEquals("one point seven eight four four one times ten to the eight",
                NumberStringUtility.numberToExponentialNotationPhrase(1.78441e8));
        Assert.assertEquals("one point six nine nine times ten to the nine",
                NumberStringUtility.numberToExponentialNotationPhrase(0.1699e10));
        Assert.assertEquals("one point six nine nine times ten to the negative nine",
                NumberStringUtility.numberToExponentialNotationPhrase(0.00001699e-4));
        Assert.assertEquals("negative eight point six four eight four nine times ten to the thirteen",
                NumberStringUtility.numberToExponentialNotationPhrase(-8.64849e13));
        Assert.assertEquals("one point seven eight four four one times ten to the negative eight",
                NumberStringUtility.numberToExponentialNotationPhrase(1.78441e-8));
        Assert.assertEquals("negative eight point six four eight four nine times ten to the negative thirteen",
                NumberStringUtility.numberToExponentialNotationPhrase(-8.64849e-13));
        Assert.assertEquals("four point six nine eight four one six zero five zero one five six five five eight seven times ten to the thirty six",
                NumberStringUtility.numberToExponentialNotationPhrase(4.69841605015655894790132154e36));
        Assert.assertEquals("negative four point six nine eight four one six zero five zero one five six five five eight seven times ten to the thirty six",
                NumberStringUtility.numberToExponentialNotationPhrase(-4.69841605015655894790132154e36));
        Assert.assertEquals("four point six nine eight four one six zero five zero one five six five five nine times ten to the negative thirty six",
                NumberStringUtility.numberToExponentialNotationPhrase(4.69841605015655894790132154e-36));
        Assert.assertEquals("negative four point six nine eight four one six zero five zero one five six five five nine times ten to the negative thirty six",
                NumberStringUtility.numberToExponentialNotationPhrase(-4.69841605015655894790132154e-36));
        
        //larger cases
        Assert.assertEquals("three point four six five eight seven four one two two four nine eight four zero six four times ten to the fifty four",
                NumberStringUtility.numberToExponentialNotationPhrase(3.465874122498406416540464e54));
        Assert.assertEquals("nine point five six six one one five six four six nine eight seven zero eight nine times ten to the fifty five",
                NumberStringUtility.numberToExponentialNotationPhrase(9.5661156469870891866575e55));
        Assert.assertEquals("one point eight seven four four two zero nine zero five zero eight nine four seven nine times ten to the fifty six",
                NumberStringUtility.numberToExponentialNotationPhrase(1.87442090508947896211611e56));
        Assert.assertEquals("two point zero nine seven seven five one two seven four six five four two three nine times ten to the fifty seven",
                NumberStringUtility.numberToExponentialNotationPhrase(2.097751274654238845697e57));
        Assert.assertEquals("seven point four six one one two three eight seven seven nine eight zero four eight nine times ten to the one hundred eight",
                NumberStringUtility.numberToExponentialNotationPhrase(7.46112387798048946516245e108));
        Assert.assertEquals("four point zero zero zero zero four two three three nine three zero three zero six six times ten to the one hundred eighty nine",
                NumberStringUtility.numberToExponentialNotationPhrase(4.0000423393030658480456e189));
        Assert.assertEquals("eight point four five one nine nine seven four six three eight nine seven zero eight five times ten to the three hundred seven",
                NumberStringUtility.numberToExponentialNotationPhrase(8.4519974638970845601123169840566e307));
        
        //extremely large cases
        Assert.assertEquals("one times ten to the eight hundred forty five million six hundred twelve thousand three hundred forty five",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("1E845612345")));
        Assert.assertEquals("one times ten to the negative eight hundred forty five million six hundred twelve thousand three hundred forty five",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("1E-845612345")));
        Assert.assertEquals("eight point four five one three two one nine eight eight three zero seven six three times ten to the four hundred million six hundred fifty four thousand two hundred thirty one",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("8.45132198830763E400654231")));
        Assert.assertEquals("eight point four five one three two one nine eight eight three zero seven six three times ten to the negative four hundred million six hundred fifty four thousand two hundred thirty one",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("8.45132198830763E-400654231")));
        Assert.assertEquals("negative one times ten to the eight hundred forty five million six hundred twelve thousand three hundred forty five",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("-1E845612345")));
        Assert.assertEquals("negative one times ten to the negative eight hundred forty five million six hundred twelve thousand three hundred forty five",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("-1E-845612345")));
        Assert.assertEquals("negative eight point four five one three two one nine eight eight three zero seven six three times ten to the four hundred million six hundred fifty four thousand two hundred thirty one",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("-8.45132198830763E400654231")));
        Assert.assertEquals("negative eight point four five one three two one nine eight eight three zero seven six three times ten to the negative four hundred million six hundred fifty four thousand two hundred thirty one",
                NumberStringUtility.numberToExponentialNotationPhrase(new BigDecimal("-8.45132198830763E-400654231")));
        
        //invalid
        TestUtils.assertException(NumberFormatException.class, "The string: '1' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(1));
        TestUtils.assertException(NumberFormatException.class, "The string: '-153' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(-153));
        TestUtils.assertException(NumberFormatException.class, "The string: '153.8413' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(153.8413));
        TestUtils.assertException(NumberFormatException.class, "The string: '15384.13' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(153.8413e2));
        TestUtils.assertException(NumberFormatException.class, "The string: '1.538413' does not represent a number in exponential notation", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(153.8413e-2));
        TestUtils.assertException(NumberFormatException.class, "Character N is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.", () ->
                NumberStringUtility.numberToExponentialNotationPhrase(Double.NaN));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberToExponentialNotationPhrase(null));
    }
    
    /**
     * JUnit test of numberPhraseToNumberString.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberPhraseToNumberString(String)
     */
    @Test
    public void testNumberPhraseToNumberString() throws Exception {
        //simple cases
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString("zero"));
        Assert.assertEquals("1", NumberStringUtility.numberPhraseToNumberString("one"));
        Assert.assertEquals("2", NumberStringUtility.numberPhraseToNumberString("two"));
        Assert.assertEquals("3", NumberStringUtility.numberPhraseToNumberString("three"));
        Assert.assertEquals("4", NumberStringUtility.numberPhraseToNumberString("four"));
        Assert.assertEquals("5", NumberStringUtility.numberPhraseToNumberString("five"));
        Assert.assertEquals("6", NumberStringUtility.numberPhraseToNumberString("six"));
        Assert.assertEquals("7", NumberStringUtility.numberPhraseToNumberString("seven"));
        Assert.assertEquals("8", NumberStringUtility.numberPhraseToNumberString("eight"));
        Assert.assertEquals("9", NumberStringUtility.numberPhraseToNumberString("nine"));
        Assert.assertEquals("10", NumberStringUtility.numberPhraseToNumberString("ten"));
        Assert.assertEquals("11", NumberStringUtility.numberPhraseToNumberString("eleven"));
        Assert.assertEquals("12", NumberStringUtility.numberPhraseToNumberString("twelve"));
        Assert.assertEquals("13", NumberStringUtility.numberPhraseToNumberString("thirteen"));
        Assert.assertEquals("14", NumberStringUtility.numberPhraseToNumberString("fourteen"));
        Assert.assertEquals("15", NumberStringUtility.numberPhraseToNumberString("fifteen"));
        Assert.assertEquals("16", NumberStringUtility.numberPhraseToNumberString("sixteen"));
        Assert.assertEquals("17", NumberStringUtility.numberPhraseToNumberString("seventeen"));
        Assert.assertEquals("18", NumberStringUtility.numberPhraseToNumberString("eighteen"));
        Assert.assertEquals("19", NumberStringUtility.numberPhraseToNumberString("nineteen"));
        
        //two digit cases
        Assert.assertEquals("20", NumberStringUtility.numberPhraseToNumberString("twenty"));
        Assert.assertEquals("25", NumberStringUtility.numberPhraseToNumberString("twenty five"));
        Assert.assertEquals("30", NumberStringUtility.numberPhraseToNumberString("thirty"));
        Assert.assertEquals("31", NumberStringUtility.numberPhraseToNumberString("thirty one"));
        Assert.assertEquals("40", NumberStringUtility.numberPhraseToNumberString("forty"));
        Assert.assertEquals("46", NumberStringUtility.numberPhraseToNumberString("forty six"));
        Assert.assertEquals("50", NumberStringUtility.numberPhraseToNumberString("fifty"));
        Assert.assertEquals("52", NumberStringUtility.numberPhraseToNumberString("fifty two"));
        Assert.assertEquals("60", NumberStringUtility.numberPhraseToNumberString("sixty"));
        Assert.assertEquals("68", NumberStringUtility.numberPhraseToNumberString("sixty eight"));
        Assert.assertEquals("70", NumberStringUtility.numberPhraseToNumberString("seventy"));
        Assert.assertEquals("77", NumberStringUtility.numberPhraseToNumberString("seventy seven"));
        Assert.assertEquals("80", NumberStringUtility.numberPhraseToNumberString("eighty"));
        Assert.assertEquals("83", NumberStringUtility.numberPhraseToNumberString("eighty three"));
        Assert.assertEquals("90", NumberStringUtility.numberPhraseToNumberString("ninety"));
        Assert.assertEquals("94", NumberStringUtility.numberPhraseToNumberString("ninety four"));
        Assert.assertEquals("99", NumberStringUtility.numberPhraseToNumberString("ninety nine"));
        Assert.assertEquals("99", NumberStringUtility.numberPhraseToNumberString("ninety and nine"));
        
        //three digit cases
        Assert.assertEquals("100", NumberStringUtility.numberPhraseToNumberString("one hundred"));
        Assert.assertEquals("154", NumberStringUtility.numberPhraseToNumberString("one hundred fifty four"));
        Assert.assertEquals("200", NumberStringUtility.numberPhraseToNumberString("two hundred"));
        Assert.assertEquals("219", NumberStringUtility.numberPhraseToNumberString("two hundred nineteen"));
        Assert.assertEquals("300", NumberStringUtility.numberPhraseToNumberString("three hundred"));
        Assert.assertEquals("377", NumberStringUtility.numberPhraseToNumberString("three hundred seventy seven"));
        Assert.assertEquals("400", NumberStringUtility.numberPhraseToNumberString("four hundred"));
        Assert.assertEquals("468", NumberStringUtility.numberPhraseToNumberString("four hundred sixty eight"));
        Assert.assertEquals("500", NumberStringUtility.numberPhraseToNumberString("five hundred"));
        Assert.assertEquals("594", NumberStringUtility.numberPhraseToNumberString("five hundred ninety four"));
        Assert.assertEquals("600", NumberStringUtility.numberPhraseToNumberString("six hundred"));
        Assert.assertEquals("608", NumberStringUtility.numberPhraseToNumberString("six hundred eight"));
        Assert.assertEquals("700", NumberStringUtility.numberPhraseToNumberString("seven hundred"));
        Assert.assertEquals("776", NumberStringUtility.numberPhraseToNumberString("seven hundred seventy six"));
        Assert.assertEquals("800", NumberStringUtility.numberPhraseToNumberString("eight hundred"));
        Assert.assertEquals("842", NumberStringUtility.numberPhraseToNumberString("eight hundred forty two"));
        Assert.assertEquals("900", NumberStringUtility.numberPhraseToNumberString("nine hundred"));
        Assert.assertEquals("999", NumberStringUtility.numberPhraseToNumberString("nine hundred ninety nine"));
        Assert.assertEquals("999", NumberStringUtility.numberPhraseToNumberString("nine hundred and ninety nine"));
        Assert.assertEquals("999", NumberStringUtility.numberPhraseToNumberString("nine hundred and ninety and nine"));
        
        //larger cases
        Assert.assertEquals("1000",
                NumberStringUtility.numberPhraseToNumberString("one thousand"));
        Assert.assertEquals("643822",
                NumberStringUtility.numberPhraseToNumberString("six hundred forty three thousand eight hundred twenty two"));
        Assert.assertEquals("15621907",
                NumberStringUtility.numberPhraseToNumberString("fifteen million six hundred twenty one thousand nine hundred seven"));
        Assert.assertEquals("946104067001",
                NumberStringUtility.numberPhraseToNumberString("nine hundred forty six billion one hundred four million sixty seven thousand one"));
        Assert.assertEquals("199486273416821",
                NumberStringUtility.numberPhraseToNumberString("one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one"));
        Assert.assertEquals("199486000000821",
                NumberStringUtility.numberPhraseToNumberString("one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one"));
        Assert.assertEquals("1994860000821000054",
                NumberStringUtility.numberPhraseToNumberString("one quintillion nine hundred ninety four quadrillion eight hundred sixty trillion eight hundred twenty one million fifty four"));
        Assert.assertEquals("1994860000821000054",
                NumberStringUtility.numberPhraseToNumberString("one quintillion nine hundred and ninety four quadrillion eight hundred and sixty trillion eight hundred and twenty one million and fifty four"));
        Assert.assertEquals("1000000000000000",
                NumberStringUtility.numberPhraseToNumberString("one quadrillion"));
        Assert.assertEquals("1E+18",
                NumberStringUtility.numberPhraseToNumberString("one quintillion"));
        Assert.assertEquals("199486000000821",
                NumberStringUtility.numberPhraseToNumberString("199 trillion 486 billion 821"));
        Assert.assertEquals("199486000000821",
                NumberStringUtility.numberPhraseToNumberString("199 trillion and 486 billion and 821"));
        
        //very large cases
        Assert.assertEquals("3.465874122E+54",
                NumberStringUtility.numberPhraseToNumberString("three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion"));
        Assert.assertEquals("9.566115646E+55",
                NumberStringUtility.numberPhraseToNumberString("ninety five septendecillion six hundred sixty one sexdecillion one hundred fifty six quindecillion four hundred sixty quattuordecillion"));
        Assert.assertEquals("1.874420905E+56",
                NumberStringUtility.numberPhraseToNumberString("one hundred eighty seven septendecillion four hundred forty two sexdecillion ninety quindecillion five hundred quattuordecillion"));
        Assert.assertEquals("2.097751274E+57",
                NumberStringUtility.numberPhraseToNumberString("two octodecillion ninety seven septendecillion seven hundred fifty one sexdecillion two hundred seventy four quindecillion"));
        Assert.assertEquals("7.461123877E+108",
                NumberStringUtility.numberPhraseToNumberString("seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion"));
        Assert.assertEquals("4.000042339E+189",
                NumberStringUtility.numberPhraseToNumberString("four duosexagintillion forty two sexagintillion three hundred thirty nine novemquinquagintillion"));
        Assert.assertEquals("8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion"));
        Assert.assertEquals("8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals("8.4519974635648943123E+124",
                NumberStringUtility.numberPhraseToNumberString("84519974635648943123 quattuortrigintillion"));
        Assert.assertEquals("8.4519974635648943123E+105",
                NumberStringUtility.numberPhraseToNumberString("8.4519974635648943123 quattuortrigintillion"));
        Assert.assertEquals("8.4519974635648943123E+114",
                NumberStringUtility.numberPhraseToNumberString("8451997463.5648943123 quattuortrigintillion"));
        Assert.assertEquals("1.5133259974635648943123E+117",
                NumberStringUtility.numberPhraseToNumberString("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966",
                NumberStringUtility.numberPhraseToNumberString("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966.51",
                NumberStringUtility.numberPhraseToNumberString("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966.5100001845461",
                NumberStringUtility.numberPhraseToNumberString("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51 and 184.5461 billionths"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461",
                NumberStringUtility.numberPhraseToNumberString("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51 and 686.5 thousandths 184.5461 billionths"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461",
                NumberStringUtility.numberPhraseToNumberString("8451997463.5648943123 quattuortrigintillion 1504.874 septentrigintillion 966.51 and 184.5461 billionths 686.5 thousandths"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461",
                NumberStringUtility.numberPhraseToNumberString("686.5 thousandths 1504.874 septentrigintillion 966.51 184.5461 billionths 8451997463.5648943123 quattuortrigintillion"));
        
        //negative cases
        Assert.assertEquals("-0", NumberStringUtility.numberPhraseToNumberString("negative zero"));
        Assert.assertEquals("-2", NumberStringUtility.numberPhraseToNumberString("negative two"));
        Assert.assertEquals("-4", NumberStringUtility.numberPhraseToNumberString("negative four"));
        Assert.assertEquals("-7", NumberStringUtility.numberPhraseToNumberString("negative seven"));
        Assert.assertEquals("-13", NumberStringUtility.numberPhraseToNumberString("negative thirteen"));
        Assert.assertEquals("-14", NumberStringUtility.numberPhraseToNumberString("negative fourteen"));
        Assert.assertEquals("-19", NumberStringUtility.numberPhraseToNumberString("negative nineteen"));
        Assert.assertEquals("-40", NumberStringUtility.numberPhraseToNumberString("negative forty"));
        Assert.assertEquals("-46", NumberStringUtility.numberPhraseToNumberString("negative forty six"));
        Assert.assertEquals("-52", NumberStringUtility.numberPhraseToNumberString("negative fifty two"));
        Assert.assertEquals("-77", NumberStringUtility.numberPhraseToNumberString("negative seventy seven"));
        Assert.assertEquals("-80", NumberStringUtility.numberPhraseToNumberString("negative eighty"));
        Assert.assertEquals("-99", NumberStringUtility.numberPhraseToNumberString("negative ninety nine"));
        Assert.assertEquals("-219", NumberStringUtility.numberPhraseToNumberString("negative two hundred nineteen"));
        Assert.assertEquals("-300", NumberStringUtility.numberPhraseToNumberString("negative three hundred"));
        Assert.assertEquals("-594", NumberStringUtility.numberPhraseToNumberString("negative five hundred ninety four"));
        Assert.assertEquals("-776", NumberStringUtility.numberPhraseToNumberString("negative seven hundred seventy six"));
        Assert.assertEquals("-900", NumberStringUtility.numberPhraseToNumberString("negative nine hundred"));
        Assert.assertEquals("-999", NumberStringUtility.numberPhraseToNumberString("negative nine hundred ninety nine"));
        Assert.assertEquals("-999", NumberStringUtility.numberPhraseToNumberString("negative nine hundred and ninety nine"));
        Assert.assertEquals("-643822",
                NumberStringUtility.numberPhraseToNumberString("negative six hundred forty three thousand eight hundred twenty two"));
        Assert.assertEquals("-946104067001",
                NumberStringUtility.numberPhraseToNumberString("negative nine hundred forty six billion one hundred four million sixty seven thousand one"));
        Assert.assertEquals("-199486273416821",
                NumberStringUtility.numberPhraseToNumberString("negative one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one"));
        Assert.assertEquals("-199486000000821",
                NumberStringUtility.numberPhraseToNumberString("negative one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one"));
        Assert.assertEquals("-3.465874122E+54",
                NumberStringUtility.numberPhraseToNumberString("negative three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion"));
        Assert.assertEquals("-7.461123877E+108",
                NumberStringUtility.numberPhraseToNumberString("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion"));
        Assert.assertEquals("-8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("negative eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion"));
        Assert.assertEquals("-8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("negative 84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals("-8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("-84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals("-8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("- 84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        
        //decimal cases
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString("zero point zero"));
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString("point zero"));
        Assert.assertEquals("0.1", NumberStringUtility.numberPhraseToNumberString("point one"));
        Assert.assertEquals("0.1", NumberStringUtility.numberPhraseToNumberString("zero point one"));
        Assert.assertEquals("0.1", NumberStringUtility.numberPhraseToNumberString("one tenth"));
        Assert.assertEquals("0.6", NumberStringUtility.numberPhraseToNumberString("six tenths"));
        Assert.assertEquals("0.01", NumberStringUtility.numberPhraseToNumberString("one hundredth"));
        Assert.assertEquals("0.08", NumberStringUtility.numberPhraseToNumberString("eight hundredths"));
        Assert.assertEquals("0.33", NumberStringUtility.numberPhraseToNumberString("thirty three hundredths"));
        Assert.assertEquals("0.9", NumberStringUtility.numberPhraseToNumberString("nine tenths"));
        Assert.assertEquals("0.001", NumberStringUtility.numberPhraseToNumberString("one thousandth"));
        Assert.assertEquals("0.007", NumberStringUtility.numberPhraseToNumberString("seven thousandths"));
        Assert.assertEquals("0.077", NumberStringUtility.numberPhraseToNumberString("seventy seven thousandths"));
        Assert.assertEquals("0.777", NumberStringUtility.numberPhraseToNumberString("seven hundred seventy seven thousandths"));
        Assert.assertEquals("0.0001", NumberStringUtility.numberPhraseToNumberString("one hundred millionths"));
        Assert.assertEquals("0.1001", NumberStringUtility.numberPhraseToNumberString("point one zero zero one"));
        Assert.assertEquals("2.1542", NumberStringUtility.numberPhraseToNumberString("two point one five four two"));
        Assert.assertEquals("19.008", NumberStringUtility.numberPhraseToNumberString("nineteen point zero zero eight"));
        Assert.assertEquals("18.3", NumberStringUtility.numberPhraseToNumberString("eighteen point three zero zero"));
        Assert.assertEquals("40.74", NumberStringUtility.numberPhraseToNumberString("forty and seventy four hundredths"));
        Assert.assertEquals("300.9141", NumberStringUtility.numberPhraseToNumberString("three hundred point nine one four one"));
        Assert.assertEquals("594", NumberStringUtility.numberPhraseToNumberString("five hundred ninety four point zero zero zero"));
        Assert.assertEquals("776.41", NumberStringUtility.numberPhraseToNumberString("seven hundred seventy six and forty one hundredths zero"));
        Assert.assertEquals("643822.9641",
                NumberStringUtility.numberPhraseToNumberString("six hundred forty three thousand eight hundred twenty two point nine six four one"));
        Assert.assertEquals("643822.9641",
                NumberStringUtility.numberPhraseToNumberString("643 thousand 822 point 9641"));
        Assert.assertEquals("0.00000000123456789",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine"));
        Assert.assertEquals("1.23456789E-10",
                NumberStringUtility.numberPhraseToNumberString("one hundred twenty three trillionths four hundred fifty six quadrillionths seven hundred eighty nine quintillionths"));
        Assert.assertEquals("1.23456789E-11",
                NumberStringUtility.numberPhraseToNumberString("twelve trillionths three hundred forty five quadrillionths six hundred seventy eight quintillionths nine hundred sextillionths"));
        Assert.assertEquals("1.23456789E-12",
                NumberStringUtility.numberPhraseToNumberString("one trillionth two hundred thirty four quadrillionths five hundred sixty seven quintillionths eight hundred ninety sextillionths"));
        Assert.assertEquals("1.23456789E-16",
                NumberStringUtility.numberPhraseToNumberString("one hundred twenty three quintillionths four hundred fifty six sextillionths seven hundred eighty nine septillionths"));
        Assert.assertEquals("15.0000000000086543211547",
                NumberStringUtility.numberPhraseToNumberString("fifteen and eight trillionths six hundred fifty four quadrillionths three hundred twenty one quintillionths one hundred fifty four sextillionths seven hundred septillionths"));
        Assert.assertEquals("-9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths"));
        Assert.assertEquals("-9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("negative 9 million 875 thousand 116 and 167 billionths"));
        Assert.assertEquals("-9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("-9 million 875 thousand 116 and 167 billionths"));
        
        //big decimal cases
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829",
                NumberStringUtility.numberPhraseToNumberString("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine"));
        Assert.assertEquals("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("zero point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals("-5967945689794436877198887828689582168366902795322725858829",
                NumberStringUtility.numberPhraseToNumberString("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine"));
        Assert.assertEquals("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("negative zero point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals("5.1234641238794421E+61315",
                NumberStringUtility.numberPhraseToNumberString("fifty one viginmilliaquadringenseptentrigintillion two hundred thirty four viginmilliaquadringensextrigintillion six hundred forty one viginmilliaquadringenquintrigintillion two hundred thirty eight viginmilliaquadringenquattuortrigintillion seven hundred ninety four viginmilliaquadringentretrigintillion four hundred twenty one viginmilliaquadringenduotrigintillion"));
        
        //extremely large cases
        Assert.assertEquals("1E+8456123459",
                NumberStringUtility.numberPhraseToNumberString("one hundred duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingenoctodecillion"));
        Assert.assertEquals("1E-8456123459",
                NumberStringUtility.numberPhraseToNumberString("ten duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingennovemdecillionths"));
        Assert.assertEquals("8.45132198830763E+40065423117",
                NumberStringUtility.numberPhraseToNumberString("eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillion four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaseptentrigintillion three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliasextrigintillion nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquintrigintillion three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquattuortrigintillion six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatretrigintillion"));
        Assert.assertEquals("8.45132198830763E-40065423117",
                NumberStringUtility.numberPhraseToNumberString("eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths"));
        Assert.assertEquals("-1E+8456123459",
                NumberStringUtility.numberPhraseToNumberString("negative one hundred duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingenoctodecillion"));
        Assert.assertEquals("-1E-8456123459",
                NumberStringUtility.numberPhraseToNumberString("negative ten duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingennovemdecillionths"));
        Assert.assertEquals("-8.45132198830763E+40065423117",
                NumberStringUtility.numberPhraseToNumberString("negative eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillion four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaseptentrigintillion three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliasextrigintillion nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquintrigintillion three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquattuortrigintillion six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatretrigintillion"));
        Assert.assertEquals("-8.45132198830763E-40065423117",
                NumberStringUtility.numberPhraseToNumberString("negative eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths four hundred fifty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths three hundred twenty one tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths nine hundred eighty eight tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths three hundred seven tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths six hundred thirty tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths"));
        Assert.assertEquals("-8.45132198830763E-40065423117",
                NumberStringUtility.numberPhraseToNumberString("-8 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths 451 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths 321 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths 988 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths 307 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths 630 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths"));
        Assert.assertEquals("-8.45132198830763E-40065423117",
                NumberStringUtility.numberPhraseToNumberString("-8 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaoctotrigintillionths and 451 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmillianovemtrigintillionths and 321 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaquadragintillionths and 988 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaunquadragintillionths and 307 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliaduoquadragintillionths and 630 tredecmilliamilliamilliatrecenquinquinquaginmilliamilliacenunquadraginmilliatrequadragintillionths"));
        Assert.assertEquals("1E+9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion"));
        Assert.assertEquals("1E-9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth"));
        Assert.assertEquals("-1E+9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("negative one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion"));
        Assert.assertEquals("-1E-9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("negative one tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth"));
        Assert.assertEquals("9.999999999999E+9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescentillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingennovemnonagintillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenoctononagintillion nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenseptennonagintillion"));
        Assert.assertEquals("9.999999999999E-9223372036854775794",
                NumberStringUtility.numberPhraseToNumberString("nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenseptennonagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingenoctononagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliaquingennovemnonagintillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescentillionths nine hundred ninety nine tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionths"));
        
        //numbers
        Assert.assertEquals("19", NumberStringUtility.numberPhraseToNumberString("19"));
        Assert.assertEquals("99", NumberStringUtility.numberPhraseToNumberString("99"));
        Assert.assertEquals("999", NumberStringUtility.numberPhraseToNumberString("999"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 fifteen"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 15"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 and fifteen"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 and ten and 5"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString(" 500 and ten and 5 "));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 and 15"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 10 5"));
        Assert.assertEquals("515", NumberStringUtility.numberPhraseToNumberString("500 and 10 and 5"));
        Assert.assertEquals("199486000000821",
                NumberStringUtility.numberPhraseToNumberString("199486000000821"));
        Assert.assertEquals("3.465874122E+54",
                NumberStringUtility.numberPhraseToNumberString("3.465874122E+54"));
        Assert.assertEquals("3465874122000000000000000000000000000000000000000000000",
                NumberStringUtility.numberPhraseToNumberString("3465874122000000000000000000000000000000000000000000000"));
        Assert.assertEquals("1.5133259974635648943123E+117",
                NumberStringUtility.numberPhraseToNumberString("1.5133259974635648943123E+117"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                NumberStringUtility.numberPhraseToNumberString("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals("8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("8.451997463E+307"));
        Assert.assertEquals("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461",
                NumberStringUtility.numberPhraseToNumberString("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"));
        Assert.assertEquals("-999", NumberStringUtility.numberPhraseToNumberString("negative 999"));
        Assert.assertEquals("-999", NumberStringUtility.numberPhraseToNumberString("-999"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("negative 500 fifteen"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("negative 500 and fifteen"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 fifteen"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 15"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 and fifteen"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 and ten and 5"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("- 500 and ten and 5 "));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 and 15"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 10 5"));
        Assert.assertEquals("-515", NumberStringUtility.numberPhraseToNumberString("-500 and 10 and 5"));
        Assert.assertEquals("-199486000000821",
                NumberStringUtility.numberPhraseToNumberString("-199486000000821"));
        Assert.assertEquals("-3.465874122E+54",
                NumberStringUtility.numberPhraseToNumberString("-3.465874122E+54"));
        Assert.assertEquals("-3465874122000000000000000000000000000000000000000000000",
                NumberStringUtility.numberPhraseToNumberString("-3465874122000000000000000000000000000000000000000000000"));
        Assert.assertEquals("-1.5133259974635648943123E+117",
                NumberStringUtility.numberPhraseToNumberString("-1.5133259974635648943123E+117"));
        Assert.assertEquals("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                NumberStringUtility.numberPhraseToNumberString("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals("-8.451997463E+307",
                NumberStringUtility.numberPhraseToNumberString("-8.451997463E+307"));
        Assert.assertEquals("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461",
                NumberStringUtility.numberPhraseToNumberString("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"));
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString("0.0"));
        Assert.assertEquals("0.1", NumberStringUtility.numberPhraseToNumberString("0.1"));
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString(".0"));
        Assert.assertEquals("0.1", NumberStringUtility.numberPhraseToNumberString(".1"));
        Assert.assertEquals("776.41", NumberStringUtility.numberPhraseToNumberString("776.41"));
        Assert.assertEquals("0.00000000000000123456789",
                NumberStringUtility.numberPhraseToNumberString("0.00000000000000123456789"));
        Assert.assertEquals("0.00000000000000123456789",
                NumberStringUtility.numberPhraseToNumberString(".00000000000000123456789"));
        Assert.assertEquals("1.23456789E-16",
                NumberStringUtility.numberPhraseToNumberString("1.23456789E-16"));
        Assert.assertEquals("0.000000000000000123456789",
                NumberStringUtility.numberPhraseToNumberString("0.000000000000000123456789"));
        Assert.assertEquals("-9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("-9875116.000000167"));
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829",
                NumberStringUtility.numberPhraseToNumberString("5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString(".54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001",
                NumberStringUtility.numberPhraseToNumberString("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals("5.1234641238794421E+61315",
                NumberStringUtility.numberPhraseToNumberString("5.1234641238794421E+61315"));
        Assert.assertEquals("5.661234641238794421E+61317",
                NumberStringUtility.numberPhraseToNumberString("+566.1234641238794421E61315"));
        Assert.assertEquals("5.661234641238794421E+61314",
                NumberStringUtility.numberPhraseToNumberString("+.5661234641238794421E61315"));
        Assert.assertEquals("1E+8456123459",
                NumberStringUtility.numberPhraseToNumberString("1E8456123459"));
        Assert.assertEquals("1E-8456123459",
                NumberStringUtility.numberPhraseToNumberString("1E-8456123459"));
        Assert.assertEquals("8.45132198830763E+40065423117",
                NumberStringUtility.numberPhraseToNumberString("8.45132198830763E+40065423117"));
        Assert.assertEquals("1E+9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("1E9223372036854775806"));
        Assert.assertEquals("-1E-9223372036854775806",
                NumberStringUtility.numberPhraseToNumberString("-1E-9223372036854775806"));
        Assert.assertEquals("9.999999999999E-9223372036854775794",
                NumberStringUtility.numberPhraseToNumberString("9.999999999999E-9223372036854775794"));
        
        //precision
        Assert.assertEquals("1000000000000000",
                NumberStringUtility.numberPhraseToNumberString("one quadrillion"));
        Assert.assertEquals("1E+16",
                NumberStringUtility.numberPhraseToNumberString("ten quadrillion"));
        Assert.assertEquals("10000000000000001",
                NumberStringUtility.numberPhraseToNumberString("ten quadrillion one"));
        Assert.assertEquals("5.5E+19",
                NumberStringUtility.numberPhraseToNumberString("fifty five quintillion"));
        Assert.assertEquals("5.586322916E+19",
                NumberStringUtility.numberPhraseToNumberString("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty billion"));
        Assert.assertEquals("55863229161000000000",
                NumberStringUtility.numberPhraseToNumberString("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty one billion"));
        Assert.assertEquals("50000000001000000000",
                NumberStringUtility.numberPhraseToNumberString("fifty quintillion one billion"));
        Assert.assertEquals("0.000000000000001",
                NumberStringUtility.numberPhraseToNumberString("one quadrillionth"));
        Assert.assertEquals("1E-16",
                NumberStringUtility.numberPhraseToNumberString("one hundred quintillionths"));
        Assert.assertEquals("1.0000000000000001",
                NumberStringUtility.numberPhraseToNumberString("one and one hundred quintillionths"));
        Assert.assertEquals("5.5E-15",
                NumberStringUtility.numberPhraseToNumberString("five quadrillionths five hundred quintillionths"));
        Assert.assertEquals("5.586322916E-11",
                NumberStringUtility.numberPhraseToNumberString("fifty five trillionths eight hundred sixty three quadrillionths two hundred twenty nine quintillionths one hundred sixty sextillionths"));
        Assert.assertEquals("0.00000000055863229161",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero zero zero zero five five eight six three two two nine one six one"));
        Assert.assertEquals("0.00000000050000000001",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero zero zero zero five zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals("6E+63",
                NumberStringUtility.numberPhraseToNumberString("six vigintillion"));
        Assert.assertEquals("6E+64",
                NumberStringUtility.numberPhraseToNumberString("sixty vigintillion"));
        Assert.assertEquals("6.0000000000000000000000000000000000000000000000000000002E+64",
                NumberStringUtility.numberPhraseToNumberString("sixty vigintillion two billion"));
        Assert.assertEquals("60000000000000000000000000000000000000000000000000000000000000002",
                NumberStringUtility.numberPhraseToNumberString("sixty vigintillion two"));
        Assert.assertEquals("6E-63",
                NumberStringUtility.numberPhraseToNumberString("six vigintillionths"));
        Assert.assertEquals("6E-64",
                NumberStringUtility.numberPhraseToNumberString("six hundred unvigintillionths"));
        Assert.assertEquals("0.6000000000000000000000000000000000000000000000000000000000000002",
                NumberStringUtility.numberPhraseToNumberString("six tenths two hundred unvigintillionths"));
        Assert.assertEquals("0.000000000000000000000000000000060000000000000000000000000000002",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero six zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero two"));
        Assert.assertEquals("6.0000000000000000000000000000002E-33",
                NumberStringUtility.numberPhraseToNumberString("six decillionths two hundred unvigintillionths"));
        Assert.assertEquals("6.00000000000000000000000000000002E-33",
                NumberStringUtility.numberPhraseToNumberString("six decillionths twenty unvigintillionths"));
        Assert.assertEquals("6.000000000000000000000000000000002E-34",
                NumberStringUtility.numberPhraseToNumberString("six hundred undecillionths two hundred duovigintillionths"));
        Assert.assertEquals("9E+1023",
                NumberStringUtility.numberPhraseToNumberString("nine trecenquadragintillion"));
        Assert.assertEquals
                NumberStringUtility.numberPhraseToNumberString("nine trecenquadragintillion one"));
        Assert.assertEquals("9E+1024",
                NumberStringUtility.numberPhraseToNumberString("ninety trecenquadragintillion one"));
        Assert.assertEquals
                NumberStringUtility.numberPhraseToNumberString("ninety trecenquadragintillion ten"));
        Assert.assertEquals("9E+1032",
                NumberStringUtility.numberPhraseToNumberString("nine trecentrequadragintillion eight hundred thirty four million six hundred eighteen thousand ninety two"));
        Assert.assertEquals
                NumberStringUtility.numberPhraseToNumberString("nine trecentrequadragintillion one billion eight hundred thirty four million six hundred eighteen thousand ninety two"));
        Assert.assertEquals("9E-1023",
                NumberStringUtility.numberPhraseToNumberString("nine trecenquadragintillionths"));
        Assert.assertEquals
                NumberStringUtility.numberPhraseToNumberString("nine tenths one hundred trecenunquadragintillionths"));
        Assert.assertEquals("0.9",
                NumberStringUtility.numberPhraseToNumberString("nine tenths ten trecenunquadragintillionths"));
        Assert.assertEquals("0.9",
                NumberStringUtility.numberPhraseToNumberString("nine tenths eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths"));
        Assert.assertEquals
                NumberStringUtility.numberPhraseToNumberString("nine tenths one hundred eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033",
                NumberStringUtility.numberPhraseToNumberString("thirty five trecentrequadragintillion six hundred eighty four trecenduoquadragintillion five hundred forty four trecenunquadragintillion seventy five trecenquadragintillion seven trecennovemtrigintillion eight hundred eighty nine trecenoctotrigintillion three hundred fifty two trecenseptentrigintillion eight hundred twelve trecensextrigintillion seven hundred thirty seven trecenquintrigintillion three hundred ninety nine trecenquattuortrigintillion five hundred eleven trecentretrigintillion nine hundred nine trecenduotrigintillion one hundred fifteen trecenuntrigintillion three hundred thirty three trecentrigintillion one hundred two trecennovemvigintillion three hundred eighty six trecenoctovigintillion three hundred twenty six trecenseptenvigintillion eight hundred ninety four trecensexvigintillion seven hundred twenty trecenquinvigintillion six hundred thirty trecenquattuorvigintillion five hundred thirty four trecentrevigintillion four hundred ninety eight trecenduovigintillion three hundred twenty trecenunvigintillion eight hundred eighty two trecenvigintillion one hundred fifteen trecennovemdecillion five hundred eighty six trecenoctodecillion one hundred eighty six trecenseptendecillion two hundred fifty trecensexdecillion eight hundred fifty two trecenquindecillion one hundred six trecenquattuordecillion two hundred twenty nine trecentredecillion five hundred seventy eight trecenduodecillion eight hundred forty two trecenundecillion eight hundred forty seven trecendecillion seven hundred ninety one trecennovemtillion three hundred twenty six trecenoctotillion one hundred seventy two trecensextillion four hundred sixty two trecenquintillion one hundred fifty two trecenquattuortillion two hundred thirty seven trecentretillion three trecenduotillion nine hundred forty one trecenuntillion six hundred thirty six trecentillion seven hundred seventy seven duocennovemnonagintillion one hundred sixty two duocenoctononagintillion seven hundred forty seven duocenseptennonagintillion nine hundred ninety seven duocensexnonagintillion eight hundred seventy seven duocenquinnonagintillion six hundred forty two duocenquattuornonagintillion two hundred sixty two duocentrenonagintillion three hundred eleven duocenduononagintillion two hundred eight duocenunnonagintillion nine hundred nineteen duocennonagintillion one hundred nineteen duocennovemoctogintillion five hundred thirteen duocenoctooctogintillion three hundred eighty three duocenseptenoctogintillion five hundred forty one duocensexoctogintillion one hundred fifty two duocenquinoctogintillion five hundred fifty seven duocenquattuoroctogintillion one hundred fifty one duocentreoctogintillion two hundred three duocenduooctogintillion six hundred forty nine duocenunoctogintillion two hundred seven duocenoctogintillion one hundred fifty duocennovemseptuagintillion two hundred fifty one duocenoctoseptuagintillion four hundred sixty four duocenseptenseptuagintillion nine hundred ninety eight duocensexseptuagintillion four hundred twenty six duocenquinseptuagintillion sixty one duocenquattuorseptuagintillion six hundred ninety six duocentreseptuagintillion six hundred seventy four duocenduoseptuagintillion seven hundred seventy eight duocenunseptuagintillion three hundred seventy duocenseptuagintillion sixty one duocennovemsexagintillion seven hundred thirty five duocenoctosexagintillion one duocenseptensexagintillion two hundred thirty three duocensexsexagintillion four hundred eighty seven duocenquinsexagintillion three hundred forty five duocenquattuorsexagintillion nine hundred forty six duocentresexagintillion two hundred fifty seven duocenduosexagintillion eight hundred sixteen duocenunsexagintillion seven hundred sixty one duocensexagintillion eight hundred seventy nine duocennovemquinquagintillion seven hundred twenty one duocenoctoquinquagintillion seven hundred forty three duocenseptenquinquagintillion five hundred twenty two duocensexquinquagintillion five hundred seventy seven duocenquinquinquagintillion nine hundred fifty five duocenquattuorquinquagintillion nine hundred sixty two duocentrequinquagintillion six hundred fifteen duocenduoquinquagintillion two hundred fifty duocenunquinquagintillion one hundred one duocenquinquagintillion two hundred sixteen duocennovemquadragintillion one hundred seventy eight duocenoctoquadragintillion three hundred seventeen duocenseptenquadragintillion four hundred seventy three duocensexquadragintillion twenty six duocenquinquadragintillion eight hundred sixty seven duocenquattuorquadragintillion three hundred sixty two duocentrequadragintillion two hundred three duocenduoquadragintillion two hundred forty nine duocenunquadragintillion three hundred forty six duocenquadragintillion seven hundred seventy duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion two hundred sixteen duocenseptentrigintillion seven hundred thirty two duocensextrigintillion eight hundred ten duocenquintrigintillion three hundred eighty five duocenquattuortrigintillion four hundred eighty five duocentretrigintillion one hundred eighty duocenduotrigintillion four hundred ninety three duocenuntrigintillion three hundred eight duocentrigintillion seven hundred forty duocennovemvigintillion four hundred seventy seven duocenoctovigintillion three hundred eighty two duocenseptenvigintillion six hundred sixteen duocensexvigintillion four hundred sixty duocenquinvigintillion sixty two duocenquattuorvigintillion five hundred seventy eight duocentrevigintillion six hundred seventy six duocenduovigintillion five hundred thirty nine duocenunvigintillion three hundred twenty one duocenvigintillion thirty six duocennovemdecillion nine hundred five duocenoctodecillion five hundred twenty five duocenseptendecillion five hundred thirteen duocensexdecillion three hundred thirty six duocenquindecillion two hundred ninety four duocenquattuordecillion seven hundred eighty nine duocentredecillion two hundred ninety three duocenduodecillion two hundred thirty six duocenundecillion two hundred twenty eight duocendecillion three hundred sixty one duocennovemtillion thirty four duocenoctotillion one hundred eighty three duocenseptentillion eight hundred ninety three duocensextillion nine hundred thirty four duocenquintillion six hundred fifty duocenquattuortillion five hundred ninety duocentretillion five hundred sixty three duocenduotillion two hundred eighty duocenuntillion six hundred fourteen duocentillion nine hundred twenty eight cennovemnonagintillion eight hundred twenty eight cenoctononagintillion one hundred ninety nine censeptennonagintillion thirty seven censexnonagintillion seven cenquinnonagintillion seven hundred fifty eight cenquattuornonagintillion seven hundred twenty six centrenonagintillion nine hundred eighty cenduononagintillion three hundred eighty six cenunnonagintillion seven hundred seventeen cennonagintillion forty cennovemoctogintillion one hundred sixty nine cenoctooctogintillion nine hundred twenty eight censeptenoctogintillion seventy eight censexoctogintillion seven hundred fifty one cenquinoctogintillion nine hundred fifty nine cenquattuoroctogintillion one hundred fifteen centreoctogintillion four hundred eight cenduooctogintillion eight hundred thirty three cenunoctogintillion twenty five cenoctogintillion four hundred ninety cennovemseptuagintillion five hundred forty nine cenoctoseptuagintillion four hundred eighty two censeptenseptuagintillion seven hundred nine censexseptuagintillion one hundred ninety three cenquinseptuagintillion two hundred ninety eight cenquattuorseptuagintillion four hundred eleven centreseptuagintillion four hundred ninety two cenduoseptuagintillion one hundred one cenunseptuagintillion five hundred twenty one censeptuagintillion six hundred cennovemsexagintillion two hundred twenty two cenoctosexagintillion five hundred thirty nine censeptensexagintillion six hundred seven censexsexagintillion nine hundred sixteen cenquinsexagintillion seven hundred eleven cenquattuorsexagintillion seven hundred forty seven centresexagintillion four hundred sixty five cenduosexagintillion two hundred fifty eight cenunsexagintillion one hundred eighty nine censexagintillion three hundred sixty one cennovemquinquagintillion one hundred sixty four cenoctoquinquagintillion nine hundred seventy three censeptenquinquagintillion six hundred forty one censexquinquagintillion four hundred ninety four cenquinquinquagintillion eight hundred cenquattuorquinquagintillion three hundred sixty five centrequinquagintillion sixty five cenduoquinquagintillion four hundred eighteen cenunquinquagintillion eight hundred fifty eight cenquinquagintillion one hundred seventy eight cennovemquadragintillion three hundred ninety nine cenoctoquadragintillion eight hundred fifty seven censeptenquadragintillion eight hundred ninety three censexquadragintillion three hundred forty three cenquinquadragintillion three hundred eight cenquattuorquadragintillion six hundred seventy four centrequadragintillion eighty one cenduoquadragintillion six hundred eighty five cenunquadragintillion five hundred fifty one cenquadragintillion five hundred ninety seven cennovemtrigintillion seven hundred twenty six cenoctotrigintillion five hundred seventy four censeptentrigintillion four hundred forty one censextrigintillion three hundred forty eight cenquintrigintillion seven hundred fifty five cenquattuortrigintillion six hundred seventy three centretrigintillion three hundred forty five cenduotrigintillion eight hundred seventy one cenuntrigintillion one hundred sixty three centrigintillion five hundred fifty five cennovemvigintillion eight hundred forty nine cenoctovigintillion eight hundred twenty five censeptenvigintillion four hundred forty four censexvigintillion seven hundred twenty cenquinvigintillion five hundred ten cenquattuorvigintillion one hundred two centrevigintillion eight hundred thirteen cenduovigintillion two hundred fifteen cenunvigintillion five hundred twenty eight cenvigintillion seven hundred sixty nine cennovemdecillion seven hundred fifty six cenoctodecillion eleven censeptendecillion four hundred thirty eight censexdecillion four hundred twelve cenquindecillion fifty cenquattuordecillion nine hundred three centredecillion nine hundred thirty four cenduodecillion two hundred eighty six cenundecillion eight hundred twenty three cendecillion seven hundred nine cennovemtillion one cenoctotillion seven hundred sixty three censeptentillion nine hundred forty four censextillion nine hundred ninety cenquintillion nine hundred sixty five cenquattuortillion six hundred thirty nine centretillion nine hundred ninety one cenduotillion three hundred sixty three cenuntillion five hundred nine centillion five hundred thirty two novemnonagintillion six hundred forty three octononagintillion sixty one septennonagintillion six hundred forty sexnonagintillion eight hundred seventy five quinnonagintillion four hundred twenty one quattuornonagintillion sixty two trenonagintillion six hundred thirty duononagintillion six hundred eighty four unnonagintillion eight hundred fifty one nonagintillion seven hundred eighty novemoctogintillion eight hundred nine octooctogintillion eight hundred twenty two septenoctogintillion five hundred nineteen sexoctogintillion six hundred fifty three quinoctogintillion four hundred ninety four quattuoroctogintillion seventy six treoctogintillion six hundred seventy eight duooctogintillion nine hundred seven unoctogintillion eight hundred octogintillion four hundred thirty seven novemseptuagintillion two hundred eighty five octoseptuagintillion four hundred seventy four septenseptuagintillion four hundred sexseptuagintillion eight hundred twenty eight quinseptuagintillion eight hundred seventy seven quattuorseptuagintillion three hundred eighty two treseptuagintillion four hundred sixty one duoseptuagintillion seventy one unseptuagintillion seven hundred forty four septuagintillion one hundred ninety nine novemsexagintillion two hundred twenty five octosexagintillion seven hundred thirty one septensexagintillion eight hundred eighty nine sexsexagintillion one hundred eighty nine quinsexagintillion two hundred seventy two quattuorsexagintillion five hundred sixty three tresexagintillion two hundred eighty one duosexagintillion four hundred ninety three unsexagintillion fifty four sexagintillion one hundred eight novemquinquagintillion nine hundred twenty six octoquinquagintillion five hundred five septenquinquagintillion two hundred seventy seven sexquinquagintillion nine hundred forty three quinquinquagintillion six hundred twenty six quattuorquinquagintillion seven hundred thirty three trequinquagintillion four hundred fifty six duoquinquagintillion one hundred sixty nine unquinquagintillion four hundred eighty six quinquagintillion six hundred nine novemquadragintillion seven hundred ninety four octoquadragintillion two hundred fifty four septenquadragintillion six hundred sixty eight sexquadragintillion four hundred eighteen quinquadragintillion nine hundred twenty six quattuorquadragintillion eight hundred forty six trequadragintillion seven hundred sixty six duoquadragintillion five hundred sixty five unquadragintillion thirty eight quadragintillion two hundred sixteen novemtrigintillion five hundred eighty two octotrigintillion one hundred twenty six septentrigintillion eight hundred ninety sextrigintillion five hundred fifty six quintrigintillion eight hundred forty four quattuortrigintillion one hundred eighty six tretrigintillion twenty one duotrigintillion six hundred ninety untrigintillion eight hundred forty six trigintillion eight hundred fifty novemvigintillion eight hundred ninety seven octovigintillion six hundred seventeen septenvigintillion seven hundred thirty four sexvigintillion five hundred fifty seven quinvigintillion three hundred seventy quattuorvigintillion nine hundred forty five trevigintillion two hundred seventy duovigintillion nine hundred eighty seven unvigintillion five hundred sixteen vigintillion one hundred thirty one novemdecillion two hundred seventy six octodecillion eight hundred forty one septendecillion sixteen sexdecillion four hundred eighty five quindecillion six hundred eighty eight quattuordecillion one hundred twenty nine tredecillion nine hundred sixty eight duodecillion twenty four undecillion six hundred forty seven decillion one hundred forty seven nonillion four hundred forty octillion twelve septillion nine hundred nineteen sextillion nine hundred fifty five quintillion fifty seven quadrillion eight hundred ninety one trillion eight hundred eighteen billion four hundred nineteen million three hundred eighty four thousand six hundred one"));
        Assert.assertEquals("35684.54407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("thirty five thousand six hundred eighty four point five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("three point five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("three duocenunnonagintillion five hundred sixty eight duocennonagintillion four hundred fifty four duocennovemoctogintillion four hundred seven duocenoctooctogintillion five hundred duocenseptenoctogintillion seven hundred eighty eight duocensexoctogintillion nine hundred thirty five duocenquinoctogintillion two hundred eighty one duocenquattuoroctogintillion two hundred seventy three duocentreoctogintillion seven hundred thirty nine duocenduooctogintillion nine hundred fifty one duocenunoctogintillion one hundred ninety duocenoctogintillion nine hundred eleven duocennovemseptuagintillion five hundred thirty three duocenoctoseptuagintillion three hundred ten duocenseptenseptuagintillion two hundred thirty eight duocensexseptuagintillion six hundred thirty two duocenquinseptuagintillion six hundred eighty nine duocenquattuorseptuagintillion four hundred seventy two duocentreseptuagintillion sixty three duocenduoseptuagintillion fifty three duocenunseptuagintillion four hundred forty nine duocenseptuagintillion eight hundred thirty two duocennovemsexagintillion eighty eight duocenoctosexagintillion two hundred eleven duocenseptensexagintillion five hundred fifty eight duocensexsexagintillion six hundred eighteen duocenquinsexagintillion six hundred twenty five duocenquattuorsexagintillion eighty five duocentresexagintillion two hundred ten duocenduosexagintillion six hundred twenty two duocenunsexagintillion nine hundred fifty seven duocensexagintillion eight hundred eighty four duocennovemquinquagintillion two hundred eighty four duocenoctoquinquagintillion seven hundred seventy nine duocenseptenquinquagintillion one hundred thirty two duocensexquinquagintillion six hundred duocenquinquinquagintillion seventeen duocenquattuorquinquagintillion two hundred forty six duocentrequinquagintillion two hundred fifteen duocenduoquinquagintillion two hundred twenty three duocenunquinquagintillion seven hundred duocenquinquagintillion three hundred ninety four duocennovemquadragintillion one hundred sixty three duocenoctoquadragintillion six hundred seventy seven duocenseptenquadragintillion seven hundred sixteen duocensexquadragintillion two hundred seventy four duocenquinquadragintillion seven hundred ninety nine duocenquattuorquadragintillion seven hundred eighty seven duocentrequadragintillion seven hundred sixty four duocenduoquadragintillion two hundred twenty six duocenunquadragintillion two hundred thirty one duocenquadragintillion one hundred twenty duocennovemtrigintillion eight hundred ninety one duocenoctotrigintillion nine hundred eleven duocenseptentrigintillion nine hundred fifty one duocensextrigintillion three hundred thirty eight duocenquintrigintillion three hundred fifty four duocenquattuortrigintillion one hundred fifteen duocentretrigintillion two hundred fifty five duocenduotrigintillion seven hundred fifteen duocenuntrigintillion one hundred twenty duocentrigintillion three hundred sixty four duocennovemvigintillion nine hundred twenty duocenoctovigintillion seven hundred fifteen duocenseptenvigintillion twenty five duocensexvigintillion one hundred forty six duocenquinvigintillion four hundred ninety nine duocenquattuorvigintillion eight hundred forty two duocentrevigintillion six hundred six duocenduovigintillion one hundred sixty nine duocenunvigintillion six hundred sixty seven duocenvigintillion four hundred seventy seven duocennovemdecillion eight hundred thirty seven duocenoctodecillion six duocenseptendecillion one hundred seventy three duocensexdecillion five hundred duocenquindecillion one hundred twenty three duocenquattuordecillion three hundred forty eight duocentredecillion seven hundred thirty four duocenduodecillion five hundred ninety four duocenundecillion six hundred twenty five duocendecillion seven hundred eighty one duocennovemtillion six hundred seventy six duocenoctotillion one hundred eighty seven duocenseptentillion nine hundred seventy two duocensextillion one hundred seventy four duocenquintillion three hundred fifty two duocenquattuortillion two hundred fifty seven duocentretillion seven hundred ninety five duocenduotillion five hundred ninety six duocenuntillion two hundred sixty one duocentillion five hundred twenty five cennovemnonagintillion ten cenoctononagintillion one hundred twenty one censeptennonagintillion six hundred seventeen censexnonagintillion eight hundred thirty one cenquinnonagintillion seven hundred forty seven cenquattuornonagintillion three hundred two centrenonagintillion six hundred eighty six cenduononagintillion seven hundred thirty six cenunnonagintillion two hundred twenty cennonagintillion three hundred twenty four cennovemoctogintillion nine hundred thirty four cenoctooctogintillion six hundred seventy seven censeptenoctogintillion thirty two censexoctogintillion four hundred twenty one cenquinoctogintillion six hundred seventy three cenquattuoroctogintillion two hundred eighty one centreoctogintillion thirty eight cenduooctogintillion five hundred forty eight cenunoctogintillion five hundred eighteen cenoctogintillion forty nine cennovemseptuagintillion three hundred thirty cenoctoseptuagintillion eight hundred seventy four censeptenseptuagintillion forty seven censexseptuagintillion seven hundred thirty eight cenquinseptuagintillion two hundred sixty one cenquattuorseptuagintillion six hundred forty six centreseptuagintillion six cenduoseptuagintillion two hundred fifty seven cenunseptuagintillion eight hundred sixty seven censeptuagintillion six hundred fifty three cennovemsexagintillion nine hundred thirty two cenoctosexagintillion one hundred three censeptensexagintillion six hundred ninety censexsexagintillion five hundred fifty two cenquinsexagintillion five hundred fifty one cenquattuorsexagintillion three hundred thirty three centresexagintillion six hundred twenty nine cenduosexagintillion four hundred seventy eight cenunsexagintillion nine hundred twenty nine censexagintillion three hundred twenty three cennovemquinquagintillion six hundred twenty two cenoctoquinquagintillion eight hundred thirty six censeptenquinquagintillion one hundred three censexquinquagintillion four hundred eighteen cenquinquinquagintillion three hundred eighty nine cenquattuorquinquagintillion three hundred ninety three centrequinquagintillion four hundred sixty five cenduoquinquagintillion fifty nine cenunquinquagintillion fifty six cenquinquagintillion three hundred twenty eight cennovemquadragintillion sixty one cenoctoquadragintillion four hundred ninety two censeptenquadragintillion eight hundred eighty two censexquadragintillion eight hundred nineteen cenquinquadragintillion nine hundred three cenquattuorquadragintillion seven hundred centrequadragintillion seven hundred seventy five cenduoquadragintillion eight hundred seventy two cenunquadragintillion six hundred ninety eight cenquadragintillion thirty eight cennovemtrigintillion six hundred seventy one cenoctotrigintillion seven hundred four censeptentrigintillion sixteen censextrigintillion nine hundred ninety two cenquintrigintillion eight hundred seven cenquattuortrigintillion eight hundred seventy five centretrigintillion one hundred ninety five cenduotrigintillion nine hundred eleven cenuntrigintillion five hundred forty centrigintillion eight hundred eighty three cennovemvigintillion three hundred two cenoctovigintillion five hundred forty nine censeptenvigintillion fifty four censexvigintillion nine hundred forty eight cenquinvigintillion two hundred seventy cenquattuorvigintillion nine hundred nineteen centrevigintillion three hundred twenty nine cenduovigintillion eight hundred forty one cenunvigintillion one hundred forty nine cenvigintillion two hundred ten cennovemdecillion one hundred fifty two cenoctodecillion one hundred sixty censeptendecillion twenty two censexdecillion two hundred fifty three cenquindecillion nine hundred sixty cenquattuordecillion seven hundred ninety one centredecillion six hundred seventy one cenduodecillion one hundred seventy four cenundecillion seven hundred forty six cendecillion five hundred twenty five cennovemtillion eight hundred eighteen cenoctotillion nine hundred thirty six censeptentillion one hundred sixteen censextillion four hundred ninety seven cenquintillion three hundred sixty four cenquattuortillion one hundred forty nine centretillion four hundred eighty cenduotillion thirty six cenuntillion five hundred six centillion five hundred forty one novemnonagintillion eight hundred eighty five octononagintillion eight hundred seventeen septennonagintillion eight hundred thirty nine sexnonagintillion nine hundred eighty five quinnonagintillion seven hundred eighty nine quattuornonagintillion three hundred thirty four trenonagintillion three hundred thirty duononagintillion eight hundred sixty seven unnonagintillion four hundred eight nonagintillion one hundred sixty eight novemoctogintillion five hundred fifty five octooctogintillion one hundred fifty nine septenoctogintillion seven hundred seventy two sexoctogintillion six hundred fifty seven quinoctogintillion four hundred forty four quattuoroctogintillion one hundred thirty four treoctogintillion eight hundred seventy five duooctogintillion five hundred sixty seven unoctogintillion three hundred thirty four octogintillion five hundred eighty seven novemseptuagintillion one hundred sixteen octoseptuagintillion three hundred fifty five septenseptuagintillion five hundred eighty four sexseptuagintillion nine hundred eighty two quinseptuagintillion five hundred forty four quattuorseptuagintillion four hundred seventy two treseptuagintillion fifty one duoseptuagintillion ten unseptuagintillion two hundred eighty one septuagintillion three hundred twenty one novemsexagintillion five hundred fifty two octosexagintillion eight hundred seventy six septensexagintillion nine hundred seventy five sexsexagintillion six hundred one quinsexagintillion one hundred forty three quattuorsexagintillion eight hundred forty one tresexagintillion two hundred five duosexagintillion ninety unsexagintillion three hundred ninety three sexagintillion four hundred twenty eight novemquinquagintillion six hundred eighty two octoquinquagintillion three hundred seventy septenquinquagintillion nine hundred sexquinquagintillion one hundred seventy six quinquinquagintillion three hundred ninety four quattuorquinquagintillion four hundred ninety nine trequinquagintillion ninety six duoquinquagintillion five hundred sixty three unquinquagintillion nine hundred ninety nine quinquagintillion one hundred thirty six novemquadragintillion three hundred fifty octoquadragintillion nine hundred fifty three septenquadragintillion two hundred sixty four sexquadragintillion three hundred six quinquadragintillion one hundred sixty four quattuorquadragintillion eighty seven trequadragintillion five hundred forty two duoquadragintillion one hundred six unquadragintillion two hundred sixty three quadragintillion sixty eight novemtrigintillion four hundred eighty five octotrigintillion one hundred seventy eight septentrigintillion eighty sextrigintillion nine hundred eighty two quintrigintillion two hundred fifty one quattuortrigintillion nine hundred sixty five tretrigintillion three hundred forty nine duotrigintillion four hundred seven untrigintillion six hundred sixty seven trigintillion eight hundred ninety novemvigintillion seven hundred eighty octovigintillion forty three septenvigintillion seven hundred twenty eight sexvigintillion five hundred forty seven quinvigintillion four hundred forty quattuorvigintillion eighty two trevigintillion eight hundred eighty seven duovigintillion seven hundred thirty eight unvigintillion two hundred forty six vigintillion one hundred seven novemdecillion one hundred seventy four octodecillion four hundred nineteen septendecillion nine hundred twenty two sexdecillion five hundred seventy three quindecillion one hundred eighty eight quattuordecillion nine hundred eighteen tredecillion nine hundred twenty seven duodecillion two hundred fifty six undecillion three hundred twenty eight decillion one hundred forty nine nonillion three hundred five octillion four hundred ten septillion eight hundred ninety two sextillion six hundred fifty quintillion five hundred twenty seven quadrillion seven hundred ninety four trillion three hundred sixty two billion six hundred seventy three million three hundred forty five thousand six hundred sixteen point nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("three trecenquadragintillion five hundred sixty eight trecennovemtrigintillion four hundred fifty four trecenoctotrigintillion four hundred seven trecenseptentrigintillion five hundred trecensextrigintillion seven hundred eighty eight trecenquintrigintillion nine hundred thirty five trecenquattuortrigintillion two hundred eighty one trecentretrigintillion two hundred seventy three trecenduotrigintillion seven hundred thirty nine trecenuntrigintillion nine hundred fifty one trecentrigintillion one hundred ninety trecennovemvigintillion nine hundred eleven trecenoctovigintillion five hundred thirty three trecenseptenvigintillion three hundred ten trecensexvigintillion two hundred thirty eight trecenquinvigintillion six hundred thirty two trecenquattuorvigintillion six hundred eighty nine trecentrevigintillion four hundred seventy two trecenduovigintillion sixty three trecenunvigintillion fifty three trecenvigintillion four hundred forty nine trecennovemdecillion eight hundred thirty two trecenoctodecillion eighty eight trecenseptendecillion two hundred eleven trecensexdecillion five hundred fifty eight trecenquindecillion six hundred eighteen trecenquattuordecillion six hundred twenty five trecentredecillion eighty five trecenduodecillion two hundred ten trecenundecillion six hundred twenty two trecendecillion nine hundred fifty seven trecennovemtillion eight hundred eighty four trecenoctotillion two hundred eighty four trecenseptentillion seven hundred seventy nine trecensextillion one hundred thirty two trecenquintillion six hundred trecenquattuortillion seventeen trecentretillion two hundred forty six trecenduotillion two hundred fifteen trecenuntillion two hundred twenty three trecentillion seven hundred duocennovemnonagintillion three hundred ninety four duocenoctononagintillion one hundred sixty three duocenseptennonagintillion six hundred seventy seven duocensexnonagintillion seven hundred sixteen duocenquinnonagintillion two hundred seventy four duocenquattuornonagintillion seven hundred ninety nine duocentrenonagintillion seven hundred eighty seven duocenduononagintillion seven hundred sixty four duocenunnonagintillion two hundred twenty six duocennonagintillion two hundred thirty one duocennovemoctogintillion one hundred twenty duocenoctooctogintillion eight hundred ninety one duocenseptenoctogintillion nine hundred eleven duocensexoctogintillion nine hundred fifty one duocenquinoctogintillion three hundred thirty eight duocenquattuoroctogintillion three hundred fifty four duocentreoctogintillion one hundred fifteen duocenduooctogintillion two hundred fifty five duocenunoctogintillion seven hundred fifteen duocenoctogintillion one hundred twenty duocennovemseptuagintillion three hundred sixty four duocenoctoseptuagintillion nine hundred twenty duocenseptenseptuagintillion seven hundred fifteen duocensexseptuagintillion twenty five duocenquinseptuagintillion one hundred forty six duocenquattuorseptuagintillion four hundred ninety nine duocentreseptuagintillion eight hundred forty two duocenduoseptuagintillion six hundred six duocenunseptuagintillion one hundred sixty nine duocenseptuagintillion six hundred sixty seven duocennovemsexagintillion four hundred seventy seven duocenoctosexagintillion eight hundred thirty seven duocenseptensexagintillion six duocensexsexagintillion one hundred seventy three duocenquinsexagintillion five hundred duocenquattuorsexagintillion one hundred twenty three duocentresexagintillion three hundred forty eight duocenduosexagintillion seven hundred thirty four duocenunsexagintillion five hundred ninety four duocensexagintillion six hundred twenty five duocennovemquinquagintillion seven hundred eighty one duocenoctoquinquagintillion six hundred seventy six duocenseptenquinquagintillion one hundred eighty seven duocensexquinquagintillion nine hundred seventy two duocenquinquinquagintillion one hundred seventy four duocenquattuorquinquagintillion three hundred fifty two duocentrequinquagintillion two hundred fifty seven duocenduoquinquagintillion seven hundred ninety five duocenunquinquagintillion five hundred ninety six duocenquinquagintillion two hundred sixty one duocennovemquadragintillion five hundred twenty five duocenoctoquadragintillion ten duocenseptenquadragintillion one hundred twenty one duocensexquadragintillion six hundred seventeen duocenquinquadragintillion eight hundred thirty one duocenquattuorquadragintillion seven hundred forty seven duocentrequadragintillion three hundred two duocenduoquadragintillion six hundred eighty six duocenunquadragintillion seven hundred thirty six duocenquadragintillion two hundred twenty duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion nine hundred thirty four duocenseptentrigintillion six hundred seventy seven duocensextrigintillion thirty two duocenquintrigintillion four hundred twenty one duocenquattuortrigintillion six hundred seventy three duocentretrigintillion two hundred eighty one duocenduotrigintillion thirty eight duocenuntrigintillion five hundred forty eight duocentrigintillion five hundred eighteen duocennovemvigintillion forty nine duocenoctovigintillion three hundred thirty duocenseptenvigintillion eight hundred seventy four duocensexvigintillion forty seven duocenquinvigintillion seven hundred thirty eight duocenquattuorvigintillion two hundred sixty one duocentrevigintillion six hundred forty six duocenduovigintillion six duocenunvigintillion two hundred fifty seven duocenvigintillion eight hundred sixty seven duocennovemdecillion six hundred fifty three duocenoctodecillion nine hundred thirty two duocenseptendecillion one hundred three duocensexdecillion six hundred ninety duocenquindecillion five hundred fifty two duocenquattuordecillion five hundred fifty one duocentredecillion three hundred thirty three duocenduodecillion six hundred twenty nine duocenundecillion four hundred seventy eight duocendecillion nine hundred twenty nine duocennovemtillion three hundred twenty three duocenoctotillion six hundred twenty two duocenseptentillion eight hundred thirty six duocensextillion one hundred three duocenquintillion four hundred eighteen duocenquattuortillion three hundred eighty nine duocentretillion three hundred ninety three duocenduotillion four hundred sixty five duocenuntillion fifty nine duocentillion fifty six cennovemnonagintillion three hundred twenty eight cenoctononagintillion sixty one censeptennonagintillion four hundred ninety two censexnonagintillion eight hundred eighty two cenquinnonagintillion eight hundred nineteen cenquattuornonagintillion nine hundred three centrenonagintillion seven hundred cenduononagintillion seven hundred seventy five cenunnonagintillion eight hundred seventy two cennonagintillion six hundred ninety eight cennovemoctogintillion thirty eight cenoctooctogintillion six hundred seventy one censeptenoctogintillion seven hundred four censexoctogintillion sixteen cenquinoctogintillion nine hundred ninety two cenquattuoroctogintillion eight hundred seven centreoctogintillion eight hundred seventy five cenduooctogintillion one hundred ninety five cenunoctogintillion nine hundred eleven cenoctogintillion five hundred forty cennovemseptuagintillion eight hundred eighty three cenoctoseptuagintillion three hundred two censeptenseptuagintillion five hundred forty nine censexseptuagintillion fifty four cenquinseptuagintillion nine hundred forty eight cenquattuorseptuagintillion two hundred seventy centreseptuagintillion nine hundred nineteen cenduoseptuagintillion three hundred twenty nine cenunseptuagintillion eight hundred forty one censeptuagintillion one hundred forty nine cennovemsexagintillion two hundred ten cenoctosexagintillion one hundred fifty two censeptensexagintillion one hundred sixty censexsexagintillion twenty two cenquinsexagintillion two hundred fifty three cenquattuorsexagintillion nine hundred sixty centresexagintillion seven hundred ninety one cenduosexagintillion six hundred seventy one cenunsexagintillion one hundred seventy four censexagintillion seven hundred forty six cennovemquinquagintillion five hundred twenty five cenoctoquinquagintillion eight hundred eighteen censeptenquinquagintillion nine hundred thirty six censexquinquagintillion one hundred sixteen cenquinquinquagintillion four hundred ninety seven cenquattuorquinquagintillion three hundred sixty four centrequinquagintillion one hundred forty nine cenduoquinquagintillion four hundred eighty cenunquinquagintillion thirty six cenquinquagintillion five hundred six cennovemquadragintillion five hundred forty one cenoctoquadragintillion eight hundred eighty five censeptenquadragintillion eight hundred seventeen censexquadragintillion eight hundred thirty nine cenquinquadragintillion nine hundred eighty five cenquattuorquadragintillion seven hundred eighty nine centrequadragintillion three hundred thirty four cenduoquadragintillion three hundred thirty cenunquadragintillion eight hundred sixty seven cenquadragintillion four hundred eight cennovemtrigintillion one hundred sixty eight cenoctotrigintillion five hundred fifty five censeptentrigintillion one hundred fifty nine censextrigintillion seven hundred seventy two cenquintrigintillion six hundred fifty seven cenquattuortrigintillion four hundred forty four centretrigintillion one hundred thirty four cenduotrigintillion eight hundred seventy five cenuntrigintillion five hundred sixty seven centrigintillion three hundred thirty four cennovemvigintillion five hundred eighty seven cenoctovigintillion one hundred sixteen censeptenvigintillion three hundred fifty five censexvigintillion five hundred eighty four cenquinvigintillion nine hundred eighty two cenquattuorvigintillion five hundred forty four centrevigintillion four hundred seventy two cenduovigintillion fifty one cenunvigintillion ten cenvigintillion two hundred eighty one cennovemdecillion three hundred twenty one cenoctodecillion five hundred fifty two censeptendecillion eight hundred seventy six censexdecillion nine hundred seventy five cenquindecillion six hundred one cenquattuordecillion one hundred forty three centredecillion eight hundred forty one cenduodecillion two hundred five cenundecillion ninety cendecillion three hundred ninety three cennovemtillion four hundred twenty eight cenoctotillion six hundred eighty two censeptentillion three hundred seventy censextillion nine hundred cenquintillion one hundred seventy six cenquattuortillion three hundred ninety four centretillion four hundred ninety nine cenduotillion ninety six cenuntillion five hundred sixty three centillion nine hundred ninety nine novemnonagintillion one hundred thirty six octononagintillion three hundred fifty septennonagintillion nine hundred fifty three sexnonagintillion two hundred sixty four quinnonagintillion three hundred six quattuornonagintillion one hundred sixty four trenonagintillion eighty seven duononagintillion five hundred forty two unnonagintillion one hundred six nonagintillion two hundred sixty three novemoctogintillion sixty eight octooctogintillion four hundred eighty five septenoctogintillion one hundred seventy eight sexoctogintillion eighty quinoctogintillion nine hundred eighty two quattuoroctogintillion two hundred fifty one treoctogintillion nine hundred sixty five duooctogintillion three hundred forty nine unoctogintillion four hundred seven octogintillion six hundred sixty seven novemseptuagintillion eight hundred ninety octoseptuagintillion seven hundred eighty septenseptuagintillion forty three sexseptuagintillion seven hundred twenty eight quinseptuagintillion five hundred forty seven quattuorseptuagintillion four hundred forty treseptuagintillion eighty two duoseptuagintillion eight hundred eighty seven unseptuagintillion seven hundred thirty eight septuagintillion two hundred forty six novemsexagintillion one hundred seven octosexagintillion one hundred seventy four septensexagintillion four hundred nineteen sexsexagintillion nine hundred twenty two quinsexagintillion five hundred seventy three quattuorsexagintillion one hundred eighty eight tresexagintillion nine hundred eighteen duosexagintillion nine hundred twenty seven unsexagintillion two hundred fifty six sexagintillion three hundred twenty eight novemquinquagintillion one hundred forty nine octoquinquagintillion three hundred five septenquinquagintillion four hundred ten sexquinquagintillion eight hundred ninety two quinquinquagintillion six hundred fifty quattuorquinquagintillion five hundred twenty seven trequinquagintillion seven hundred ninety four duoquinquagintillion three hundred sixty two unquinquagintillion six hundred seventy three quinquagintillion three hundred forty five novemquadragintillion six hundred sixteen octoquadragintillion nine hundred forty eight septenquadragintillion six hundred sixty sexquadragintillion nine hundred seventy nine quinquadragintillion four hundred twenty five quattuorquadragintillion four hundred sixty six trequadragintillion eight hundred forty one duoquadragintillion eight hundred ninety two unquadragintillion six hundred eighty four quadragintillion six hundred seventy six novemtrigintillion six hundred fifty six octotrigintillion five hundred three septentrigintillion eight hundred twenty one sextrigintillion six hundred fifty eight quintrigintillion two hundred twelve quattuortrigintillion six hundred eighty nine tretrigintillion fifty five duotrigintillion six hundred eighty four untrigintillion four hundred eighteen trigintillion six hundred two novemvigintillion one hundred sixty nine octovigintillion eighty four septenvigintillion six hundred eighty five sexvigintillion eighty nine quinvigintillion seven hundred sixty one quattuorvigintillion seven hundred seventy three trevigintillion four hundred fifty five duovigintillion seven hundred thirty seven unvigintillion ninety four vigintillion five hundred twenty seven novemdecillion ninety eight octodecillion seven hundred fifty one septendecillion six hundred thirteen sexdecillion one hundred twenty seven quindecillion six hundred eighty four quattuordecillion one hundred one tredecillion six hundred forty eight duodecillion five hundred sixty eight undecillion eight hundred twelve decillion nine hundred ninety six nonillion eight hundred two octillion four hundred sixty four septillion seven hundred fourteen sextillion seven hundred forty four quintillion one quadrillion two hundred ninety one trillion nine hundred ninety five billion five hundred five million seven hundred eighty nine thousand one hundred eighty one point eight four one nine three eight four six zero one"));
        Assert.assertEquals("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.1",
                NumberStringUtility.numberPhraseToNumberString("three hundred fifty six trecennovemtrigintillion eight hundred forty five trecenoctotrigintillion four hundred forty trecenseptentrigintillion seven hundred fifty trecensextrigintillion seventy eight trecenquintrigintillion eight hundred ninety three trecenquattuortrigintillion five hundred twenty eight trecentretrigintillion one hundred twenty seven trecenduotrigintillion three hundred seventy three trecenuntrigintillion nine hundred ninety five trecentrigintillion one hundred nineteen trecennovemvigintillion ninety one trecenoctovigintillion one hundred fifty three trecenseptenvigintillion three hundred thirty one trecensexvigintillion twenty three trecenquinvigintillion eight hundred sixty three trecenquattuorvigintillion two hundred sixty eight trecentrevigintillion nine hundred forty seven trecenduovigintillion two hundred six trecenunvigintillion three hundred five trecenvigintillion three hundred forty four trecennovemdecillion nine hundred eighty three trecenoctodecillion two hundred eight trecenseptendecillion eight hundred twenty one trecensexdecillion one hundred fifty five trecenquindecillion eight hundred sixty one trecenquattuordecillion eight hundred sixty two trecentredecillion five hundred eight trecenduodecillion five hundred twenty one trecenundecillion sixty two trecendecillion two hundred ninety five trecennovemtillion seven hundred eighty eight trecenoctotillion four hundred twenty eight trecenseptentillion four hundred seventy seven trecensextillion nine hundred thirteen trecenquintillion two hundred sixty trecenquattuortillion one trecentretillion seven hundred twenty four trecenduotillion six hundred twenty one trecenuntillion five hundred twenty two trecentillion three hundred seventy duocennovemnonagintillion thirty nine duocenoctononagintillion four hundred sixteen duocenseptennonagintillion three hundred sixty seven duocensexnonagintillion seven hundred seventy one duocenquinnonagintillion six hundred twenty seven duocenquattuornonagintillion four hundred seventy nine duocentrenonagintillion nine hundred seventy eight duocenduononagintillion seven hundred seventy six duocenunnonagintillion four hundred twenty two duocennonagintillion six hundred twenty three duocennovemoctogintillion one hundred twelve duocenoctooctogintillion eighty nine duocenseptenoctogintillion one hundred ninety one duocensexoctogintillion one hundred ninety five duocenquinoctogintillion one hundred thirty three duocenquattuoroctogintillion eight hundred thirty five duocentreoctogintillion four hundred eleven duocenduooctogintillion five hundred twenty five duocenunoctogintillion five hundred seventy one duocenoctogintillion five hundred twelve duocennovemseptuagintillion thirty six duocenoctoseptuagintillion four hundred ninety two duocenseptenseptuagintillion seventy one duocensexseptuagintillion five hundred two duocenquinseptuagintillion five hundred fourteen duocenquattuorseptuagintillion six hundred forty nine duocentreseptuagintillion nine hundred eighty four duocenduoseptuagintillion two hundred sixty duocenunseptuagintillion six hundred sixteen duocenseptuagintillion nine hundred sixty six duocennovemsexagintillion seven hundred forty seven duocenoctosexagintillion seven hundred eighty three duocenseptensexagintillion seven hundred duocensexsexagintillion six hundred seventeen duocenquinsexagintillion three hundred fifty duocenquattuorsexagintillion twelve duocentresexagintillion three hundred thirty four duocenduosexagintillion eight hundred seventy three duocenunsexagintillion four hundred fifty nine duocensexagintillion four hundred sixty two duocennovemquinquagintillion five hundred seventy eight duocenoctoquinquagintillion one hundred sixty seven duocenseptenquinquagintillion six hundred eighteen duocensexquinquagintillion seven hundred ninety seven duocenquinquinquagintillion two hundred seventeen duocenquattuorquinquagintillion four hundred thirty five duocentrequinquagintillion two hundred twenty five duocenduoquinquagintillion seven hundred seventy nine duocenunquinquagintillion five hundred fifty nine duocenquinquagintillion six hundred twenty six duocennovemquadragintillion one hundred fifty two duocenoctoquadragintillion five hundred one duocenseptenquadragintillion twelve duocensexquadragintillion one hundred sixty one duocenquinquadragintillion seven hundred eighty three duocenquattuorquadragintillion one hundred seventy four duocentrequadragintillion seven hundred thirty duocenduoquadragintillion two hundred sixty eight duocenunquadragintillion six hundred seventy three duocenquadragintillion six hundred twenty two duocennovemtrigintillion thirty two duocenoctotrigintillion four hundred ninety three duocenseptentrigintillion four hundred sixty seven duocensextrigintillion seven hundred three duocenquintrigintillion two hundred forty two duocenquattuortrigintillion one hundred sixty seven duocentretrigintillion three hundred twenty eight duocenduotrigintillion one hundred three duocenuntrigintillion eight hundred fifty four duocentrigintillion eight hundred fifty one duocennovemvigintillion eight hundred four duocenoctovigintillion nine hundred thirty three duocenseptenvigintillion eighty seven duocensexvigintillion four hundred four duocenquinvigintillion seven hundred seventy three duocenquattuorvigintillion eight hundred twenty six duocentrevigintillion one hundred sixty four duocenduovigintillion six hundred duocenunvigintillion six hundred twenty five duocenvigintillion seven hundred eighty six duocennovemdecillion seven hundred sixty five duocenoctodecillion three hundred ninety three duocenseptendecillion two hundred ten duocensexdecillion three hundred sixty nine duocenquindecillion fifty five duocenquattuordecillion two hundred fifty five duocentredecillion one hundred thirty three duocenduodecillion three hundred sixty two duocenundecillion nine hundred forty seven duocendecillion eight hundred ninety two duocennovemtillion nine hundred thirty two duocenoctotillion three hundred sixty two duocenseptentillion two hundred eighty three duocensextillion six hundred ten duocenquintillion three hundred forty one duocenquattuortillion eight hundred thirty eight duocentretillion nine hundred thirty nine duocenduotillion three hundred forty six duocenuntillion five hundred five duocentillion nine hundred five cennovemnonagintillion six hundred thirty two cenoctononagintillion eight hundred six censeptennonagintillion one hundred forty nine censexnonagintillion two hundred eighty eight cenquinnonagintillion two hundred eighty one cenquattuornonagintillion nine hundred ninety centrenonagintillion three hundred seventy cenduononagintillion seventy seven cenunnonagintillion five hundred eighty seven cennonagintillion two hundred sixty nine cennovemoctogintillion eight hundred three cenoctooctogintillion eight hundred sixty seven censeptenoctogintillion one hundred seventy censexoctogintillion four hundred one cenquinoctogintillion six hundred ninety nine cenquattuoroctogintillion two hundred eighty centreoctogintillion seven hundred eighty seven cenduooctogintillion five hundred nineteen cenunoctogintillion five hundred ninety one cenoctogintillion one hundred fifty four cennovemseptuagintillion eighty eight cenoctoseptuagintillion three hundred thirty censeptenseptuagintillion two hundred fifty four censexseptuagintillion nine hundred five cenquinseptuagintillion four hundred ninety four cenquattuorseptuagintillion eight hundred twenty seven centreseptuagintillion ninety one cenduoseptuagintillion nine hundred thirty two cenunseptuagintillion nine hundred eighty four censeptuagintillion one hundred fourteen cennovemsexagintillion nine hundred twenty one cenoctosexagintillion fifteen censeptensexagintillion two hundred sixteen censexsexagintillion two cenquinsexagintillion two hundred twenty five cenquattuorsexagintillion three hundred ninety six centresexagintillion seventy nine cenduosexagintillion one hundred sixty seven cenunsexagintillion one hundred seventeen censexagintillion four hundred seventy four cennovemquinquagintillion six hundred fifty two cenoctoquinquagintillion five hundred eighty one censeptenquinquagintillion eight hundred ninety three censexquinquagintillion six hundred eleven cenquinquinquagintillion six hundred forty nine cenquattuorquinquagintillion seven hundred thirty six centrequinquagintillion four hundred fourteen cenduoquinquagintillion nine hundred forty eight cenunquinquagintillion three cenquinquagintillion six hundred fifty cennovemquadragintillion six hundred fifty four cenoctoquadragintillion one hundred eighty eight censeptenquadragintillion five hundred eighty one censexquadragintillion seven hundred eighty three cenquinquadragintillion nine hundred ninety eight cenquattuorquadragintillion five hundred seventy eight centrequadragintillion nine hundred thirty three cenduoquadragintillion four hundred thirty three cenunquadragintillion eighty six cenquadragintillion seven hundred forty cennovemtrigintillion eight hundred sixteen cenoctotrigintillion eight hundred fifty five censeptentrigintillion five hundred fifteen censextrigintillion nine hundred seventy seven cenquintrigintillion two hundred sixty five cenquattuortrigintillion seven hundred forty four centretrigintillion four hundred thirteen cenduotrigintillion four hundred eighty seven cenuntrigintillion five hundred fifty six centrigintillion seven hundred thirty three cennovemvigintillion four hundred fifty eight cenoctovigintillion seven hundred eleven censeptenvigintillion six hundred thirty five censexvigintillion five hundred fifty eight cenquinvigintillion four hundred ninety eight cenquattuorvigintillion two hundred fifty four centrevigintillion four hundred forty seven cenduovigintillion two hundred five cenunvigintillion one hundred one cenvigintillion twenty eight cennovemdecillion one hundred thirty two cenoctodecillion one hundred fifty five censeptendecillion two hundred eighty seven censexdecillion six hundred ninety seven cenquindecillion five hundred sixty cenquattuordecillion one hundred fourteen centredecillion three hundred eighty four cenduodecillion one hundred twenty cenundecillion five hundred nine cendecillion thirty nine cennovemtillion three hundred forty two cenoctotillion eight hundred sixty eight censeptentillion two hundred thirty seven censextillion ninety cenquintillion seventeen cenquattuortillion six hundred thirty nine centretillion four hundred forty nine cenduotillion nine hundred nine cenuntillion six hundred fifty six centillion three hundred ninety nine novemnonagintillion nine hundred thirteen octononagintillion six hundred thirty five septennonagintillion ninety five sexnonagintillion three hundred twenty six quinnonagintillion four hundred thirty quattuornonagintillion six hundred sixteen trenonagintillion four hundred eight duononagintillion seven hundred fifty four unnonagintillion two hundred ten nonagintillion six hundred twenty six novemoctogintillion three hundred six octooctogintillion eight hundred forty eight septenoctogintillion five hundred seventeen sexoctogintillion eight hundred eight quinoctogintillion ninety eight quattuoroctogintillion two hundred twenty five treoctogintillion one hundred ninety six duooctogintillion five hundred thirty four unoctogintillion nine hundred forty octogintillion seven hundred sixty six novemseptuagintillion seven hundred eighty nine octoseptuagintillion seventy eight septenseptuagintillion four sexseptuagintillion three hundred seventy two quinseptuagintillion eight hundred fifty four quattuorseptuagintillion seven hundred forty four treseptuagintillion eight duoseptuagintillion two hundred eighty eight unseptuagintillion seven hundred seventy three septuagintillion eight hundred twenty four novemsexagintillion six hundred ten octosexagintillion seven hundred seventeen septensexagintillion four hundred forty one sexsexagintillion nine hundred ninety two quinsexagintillion two hundred fifty seven quattuorsexagintillion three hundred eighteen tresexagintillion eight hundred ninety one duosexagintillion eight hundred ninety two unsexagintillion seven hundred twenty five sexagintillion six hundred thirty two novemquinquagintillion eight hundred fourteen octoquinquagintillion nine hundred thirty septenquinquagintillion five hundred forty one sexquinquagintillion eighty nine quinquinquagintillion two hundred sixty five quattuorquinquagintillion fifty two trequinquagintillion seven hundred seventy nine duoquinquagintillion four hundred thirty six unquinquagintillion two hundred sixty seven quinquagintillion three hundred thirty four novemquadragintillion five hundred sixty one octoquadragintillion six hundred ninety four septenquadragintillion eight hundred sixty six sexquadragintillion ninety seven quinquadragintillion nine hundred forty two quattuorquadragintillion five hundred forty six trequadragintillion six hundred eighty four duoquadragintillion one hundred eighty nine unquadragintillion two hundred sixty eight quadragintillion four hundred sixty seven novemtrigintillion six hundred sixty five octotrigintillion six hundred fifty septentrigintillion three hundred eighty two sextrigintillion one hundred sixty five quintrigintillion eight hundred twenty one quattuortrigintillion two hundred sixty eight tretrigintillion nine hundred five duotrigintillion five hundred sixty eight untrigintillion four hundred forty one trigintillion eight hundred sixty novemvigintillion two hundred sixteen octovigintillion nine hundred eight septenvigintillion four hundred sixty eight sexvigintillion five hundred eight quinvigintillion nine hundred seventy six quattuorvigintillion one hundred seventy seven trevigintillion three hundred forty five duovigintillion five hundred seventy three unvigintillion seven hundred nine vigintillion four hundred fifty two novemdecillion seven hundred nine octodecillion eight hundred seventy five septendecillion one hundred sixty one sexdecillion three hundred twelve quindecillion seven hundred sixty eight quattuordecillion four hundred ten tredecillion one hundred sixty four duodecillion eight hundred fifty six undecillion eight hundred eighty one decillion two hundred ninety nine nonillion six hundred eighty octillion two hundred forty six septillion four hundred seventy one sextillion four hundred seventy four quintillion four hundred quadrillion one hundred twenty nine trillion one hundred ninety nine billion five hundred fifty million five hundred seventy eight thousand nine hundred eighteen point one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024",
                NumberStringUtility.numberPhraseToNumberString("thirty five trecenquadragintillion six hundred eighty four trecennovemtrigintillion five hundred forty four trecenoctotrigintillion seventy five trecenseptentrigintillion seven trecensextrigintillion eight hundred eighty nine trecenquintrigintillion three hundred fifty two trecenquattuortrigintillion eight hundred twelve trecentretrigintillion seven hundred thirty seven trecenduotrigintillion three hundred ninety nine trecenuntrigintillion five hundred eleven trecentrigintillion nine hundred nine trecennovemvigintillion one hundred fifteen trecenoctovigintillion three hundred thirty three trecenseptenvigintillion one hundred two trecensexvigintillion three hundred eighty six trecenquinvigintillion three hundred twenty six trecenquattuorvigintillion eight hundred ninety four trecentrevigintillion seven hundred twenty trecenduovigintillion six hundred thirty trecenunvigintillion five hundred thirty four trecenvigintillion four hundred ninety eight trecennovemdecillion three hundred twenty trecenoctodecillion eight hundred eighty two trecenseptendecillion one hundred fifteen trecensexdecillion five hundred eighty six trecenquindecillion one hundred eighty six trecenquattuordecillion two hundred fifty trecentredecillion eight hundred fifty two trecenduodecillion one hundred six trecenundecillion two hundred twenty nine trecendecillion five hundred seventy eight trecennovemtillion eight hundred forty two trecenoctotillion eight hundred forty seven trecenseptentillion seven hundred ninety one trecensextillion three hundred twenty six trecenquintillion one hundred seventy two trecentretillion four hundred sixty two trecenduotillion one hundred fifty two trecenuntillion two hundred thirty seven trecentillion three duocennovemnonagintillion nine hundred forty one duocenoctononagintillion six hundred thirty six duocenseptennonagintillion seven hundred seventy seven duocensexnonagintillion one hundred sixty two duocenquinnonagintillion seven hundred forty seven duocenquattuornonagintillion nine hundred ninety seven duocentrenonagintillion eight hundred seventy seven duocenduononagintillion six hundred forty two duocenunnonagintillion two hundred sixty two duocennonagintillion three hundred eleven duocennovemoctogintillion two hundred eight duocenoctooctogintillion nine hundred nineteen duocenseptenoctogintillion one hundred nineteen duocensexoctogintillion five hundred thirteen duocenquinoctogintillion three hundred eighty three duocenquattuoroctogintillion five hundred forty one duocentreoctogintillion one hundred fifty two duocenduooctogintillion five hundred fifty seven duocenunoctogintillion one hundred fifty one duocenoctogintillion two hundred three duocennovemseptuagintillion six hundred forty nine duocenoctoseptuagintillion two hundred seven duocenseptenseptuagintillion one hundred fifty duocensexseptuagintillion two hundred fifty one duocenquinseptuagintillion four hundred sixty four duocenquattuorseptuagintillion nine hundred ninety eight duocentreseptuagintillion four hundred twenty six duocenduoseptuagintillion sixty one duocenunseptuagintillion six hundred ninety six duocenseptuagintillion six hundred seventy four duocennovemsexagintillion seven hundred seventy eight duocenoctosexagintillion three hundred seventy duocenseptensexagintillion sixty one duocensexsexagintillion seven hundred thirty five duocenquinsexagintillion one duocenquattuorsexagintillion two hundred thirty three duocentresexagintillion four hundred eighty seven duocenduosexagintillion three hundred forty five duocenunsexagintillion nine hundred forty six duocensexagintillion two hundred fifty seven duocennovemquinquagintillion eight hundred sixteen duocenoctoquinquagintillion seven hundred sixty one duocenseptenquinquagintillion eight hundred seventy nine duocensexquinquagintillion seven hundred twenty one duocenquinquinquagintillion seven hundred forty three duocenquattuorquinquagintillion five hundred twenty two duocentrequinquagintillion five hundred seventy seven duocenduoquinquagintillion nine hundred fifty five duocenunquinquagintillion nine hundred sixty two duocenquinquagintillion six hundred fifteen duocennovemquadragintillion two hundred fifty duocenoctoquadragintillion one hundred one duocenseptenquadragintillion two hundred sixteen duocensexquadragintillion one hundred seventy eight duocenquinquadragintillion three hundred seventeen duocenquattuorquadragintillion four hundred seventy three duocentrequadragintillion twenty six duocenduoquadragintillion eight hundred sixty seven duocenunquadragintillion three hundred sixty two duocenquadragintillion two hundred three duocennovemtrigintillion two hundred forty nine duocenoctotrigintillion three hundred forty six duocenseptentrigintillion seven hundred seventy duocensextrigintillion three hundred twenty four duocenquintrigintillion two hundred sixteen duocenquattuortrigintillion seven hundred thirty two duocentretrigintillion eight hundred ten duocenduotrigintillion three hundred eighty five duocenuntrigintillion four hundred eighty five duocentrigintillion one hundred eighty duocennovemvigintillion four hundred ninety three duocenoctovigintillion three hundred eight duocenseptenvigintillion seven hundred forty duocensexvigintillion four hundred seventy seven duocenquinvigintillion three hundred eighty two duocenquattuorvigintillion six hundred sixteen duocentrevigintillion four hundred sixty duocenduovigintillion sixty two duocenunvigintillion five hundred seventy eight duocenvigintillion six hundred seventy six duocennovemdecillion five hundred thirty nine duocenoctodecillion three hundred twenty one duocenseptendecillion thirty six duocensexdecillion nine hundred five duocenquindecillion five hundred twenty five duocenquattuordecillion five hundred thirteen duocentredecillion three hundred thirty six duocenduodecillion two hundred ninety four duocenundecillion seven hundred eighty nine duocendecillion two hundred ninety three duocennovemtillion two hundred thirty six duocenoctotillion two hundred twenty eight duocenseptentillion three hundred sixty one duocensextillion thirty four duocenquintillion one hundred eighty three duocenquattuortillion eight hundred ninety three duocentretillion nine hundred thirty four duocenduotillion six hundred fifty duocenuntillion five hundred ninety duocentillion five hundred sixty three cennovemnonagintillion two hundred eighty cenoctononagintillion six hundred fourteen censeptennonagintillion nine hundred twenty eight censexnonagintillion eight hundred twenty eight cenquinnonagintillion one hundred ninety nine cenquattuornonagintillion thirty seven centrenonagintillion seven cenduononagintillion seven hundred fifty eight cenunnonagintillion seven hundred twenty six cennonagintillion nine hundred eighty cennovemoctogintillion three hundred eighty six cenoctooctogintillion seven hundred seventeen censeptenoctogintillion forty censexoctogintillion one hundred sixty nine cenquinoctogintillion nine hundred twenty eight cenquattuoroctogintillion seventy eight centreoctogintillion seven hundred fifty one cenduooctogintillion nine hundred fifty nine cenunoctogintillion one hundred fifteen cenoctogintillion four hundred eight cennovemseptuagintillion eight hundred thirty three cenoctoseptuagintillion twenty five censeptenseptuagintillion four hundred ninety censexseptuagintillion five hundred forty nine cenquinseptuagintillion four hundred eighty two cenquattuorseptuagintillion seven hundred nine centreseptuagintillion one hundred ninety three cenduoseptuagintillion two hundred ninety eight cenunseptuagintillion four hundred eleven censeptuagintillion four hundred ninety two cennovemsexagintillion one hundred one cenoctosexagintillion five hundred twenty one censeptensexagintillion six hundred censexsexagintillion two hundred twenty two cenquinsexagintillion five hundred thirty nine cenquattuorsexagintillion six hundred seven centresexagintillion nine hundred sixteen cenduosexagintillion seven hundred eleven cenunsexagintillion seven hundred forty seven censexagintillion four hundred sixty five cennovemquinquagintillion two hundred fifty eight cenoctoquinquagintillion one hundred eighty nine censeptenquinquagintillion three hundred sixty one censexquinquagintillion one hundred sixty four cenquinquinquagintillion nine hundred seventy three cenquattuorquinquagintillion six hundred forty one centrequinquagintillion four hundred ninety four cenduoquinquagintillion eight hundred cenunquinquagintillion three hundred sixty five cenquinquagintillion sixty five cennovemquadragintillion four hundred eighteen cenoctoquadragintillion eight hundred fifty eight censeptenquadragintillion one hundred seventy eight censexquadragintillion three hundred ninety nine cenquinquadragintillion eight hundred fifty seven cenquattuorquadragintillion eight hundred ninety three centrequadragintillion three hundred forty three cenduoquadragintillion three hundred eight cenunquadragintillion six hundred seventy four cenquadragintillion eighty one cennovemtrigintillion six hundred eighty five cenoctotrigintillion five hundred fifty one censeptentrigintillion five hundred ninety seven censextrigintillion seven hundred twenty six cenquintrigintillion five hundred seventy four cenquattuortrigintillion four hundred forty one centretrigintillion three hundred forty eight cenduotrigintillion seven hundred fifty five cenuntrigintillion six hundred seventy three centrigintillion three hundred forty five cennovemvigintillion eight hundred seventy one cenoctovigintillion one hundred sixty three censeptenvigintillion five hundred fifty five censexvigintillion eight hundred forty nine cenquinvigintillion eight hundred twenty five cenquattuorvigintillion four hundred forty four centrevigintillion seven hundred twenty cenduovigintillion five hundred ten cenunvigintillion one hundred two cenvigintillion eight hundred thirteen cennovemdecillion two hundred fifteen cenoctodecillion five hundred twenty eight censeptendecillion seven hundred sixty nine censexdecillion seven hundred fifty six cenquindecillion eleven cenquattuordecillion four hundred thirty eight centredecillion four hundred twelve cenduodecillion fifty cenundecillion nine hundred three cendecillion nine hundred thirty four cennovemtillion two hundred eighty six cenoctotillion eight hundred twenty three censeptentillion seven hundred nine censextillion one cenquintillion seven hundred sixty three cenquattuortillion nine hundred forty four centretillion nine hundred ninety cenduotillion nine hundred sixty five cenuntillion six hundred thirty nine centillion nine hundred ninety one novemnonagintillion three hundred sixty three octononagintillion five hundred nine septennonagintillion five hundred thirty two sexnonagintillion six hundred forty three quinnonagintillion sixty one quattuornonagintillion six hundred forty trenonagintillion eight hundred seventy five duononagintillion four hundred twenty one unnonagintillion sixty two nonagintillion six hundred thirty novemoctogintillion six hundred eighty four octooctogintillion eight hundred fifty one septenoctogintillion seven hundred eighty sexoctogintillion eight hundred nine quinoctogintillion eight hundred twenty two quattuoroctogintillion five hundred nineteen treoctogintillion six hundred fifty three duooctogintillion four hundred ninety four unoctogintillion seventy six octogintillion six hundred seventy eight novemseptuagintillion nine hundred seven octoseptuagintillion eight hundred septenseptuagintillion four hundred thirty seven sexseptuagintillion two hundred eighty five quinseptuagintillion four hundred seventy four quattuorseptuagintillion four hundred treseptuagintillion eight hundred twenty eight duoseptuagintillion eight hundred seventy seven unseptuagintillion three hundred eighty two septuagintillion four hundred sixty one novemsexagintillion seventy one octosexagintillion seven hundred forty four septensexagintillion one hundred ninety nine sexsexagintillion two hundred twenty five quinsexagintillion seven hundred thirty one quattuorsexagintillion eight hundred eighty nine tresexagintillion one hundred eighty nine duosexagintillion two hundred seventy two unsexagintillion five hundred sixty three sexagintillion two hundred eighty one novemquinquagintillion four hundred ninety three octoquinquagintillion fifty four septenquinquagintillion one hundred eight sexquinquagintillion nine hundred twenty six quinquinquagintillion five hundred five quattuorquinquagintillion two hundred seventy seven trequinquagintillion nine hundred forty three duoquinquagintillion six hundred twenty six unquinquagintillion seven hundred thirty three quinquagintillion four hundred fifty six novemquadragintillion one hundred sixty nine octoquadragintillion four hundred eighty six septenquadragintillion six hundred nine sexquadragintillion seven hundred ninety four quinquadragintillion two hundred fifty four quattuorquadragintillion six hundred sixty eight trequadragintillion four hundred eighteen duoquadragintillion nine hundred twenty six unquadragintillion eight hundred forty six quadragintillion seven hundred sixty six novemtrigintillion five hundred sixty five octotrigintillion thirty eight septentrigintillion two hundred sixteen sextrigintillion five hundred eighty two quintrigintillion one hundred twenty six quattuortrigintillion eight hundred ninety tretrigintillion five hundred fifty six duotrigintillion eight hundred forty four untrigintillion one hundred eighty six trigintillion twenty one novemvigintillion six hundred ninety octovigintillion eight hundred forty six septenvigintillion eight hundred fifty sexvigintillion eight hundred ninety seven quinvigintillion six hundred seventeen quattuorvigintillion seven hundred thirty four trevigintillion five hundred fifty seven duovigintillion three hundred seventy unvigintillion nine hundred forty five vigintillion two hundred seventy novemdecillion nine hundred eighty seven octodecillion five hundred sixteen septendecillion one hundred thirty one sexdecillion two hundred seventy six quindecillion eight hundred forty one quattuordecillion sixteen tredecillion four hundred eighty five duodecillion six hundred eighty eight undecillion one hundred twenty nine decillion nine hundred sixty eight nonillion twenty four octillion six hundred forty seven septillion one hundred forty seven sextillion four hundred forty quintillion twelve quadrillion nine hundred nineteen trillion nine hundred fifty five billion fifty seven million eight hundred ninety one thousand eight hundred eighteen point four one nine three eight four six zero one"));
        Assert.assertEquals("0.3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("point three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057E-6",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505E-7",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.56845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299E-32",
                NumberStringUtility.numberPhraseToNumberString("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-33",
                NumberStringUtility.numberPhraseToNumberString("three decillionths five hundred sixty eight undecillionths four hundred fifty four duodecillionths four hundred seven tredecillionths five hundred quattuordecillionths seven hundred eighty eight quindecillionths nine hundred thirty five sexdecillionths two hundred eighty one septendecillionths two hundred seventy three octodecillionths seven hundred thirty nine novemdecillionths nine hundred fifty one vigintillionths one hundred ninety unvigintillionths nine hundred eleven duovigintillionths five hundred thirty three trevigintillionths three hundred ten quattuorvigintillionths two hundred thirty eight quinvigintillionths six hundred thirty two sexvigintillionths six hundred eighty nine septenvigintillionths four hundred seventy two octovigintillionths sixty three novemvigintillionths fifty three trigintillionths four hundred forty nine untrigintillionths eight hundred thirty two duotrigintillionths eighty eight tretrigintillionths two hundred eleven quattuortrigintillionths five hundred fifty eight quintrigintillionths six hundred eighteen sextrigintillionths six hundred twenty five septentrigintillionths eighty five octotrigintillionths two hundred ten novemtrigintillionths six hundred twenty two quadragintillionths nine hundred fifty seven unquadragintillionths eight hundred eighty four duoquadragintillionths two hundred eighty four trequadragintillionths seven hundred seventy nine quattuorquadragintillionths one hundred thirty two quinquadragintillionths six hundred sexquadragintillionths seventeen septenquadragintillionths two hundred forty six octoquadragintillionths two hundred fifteen novemquadragintillionths two hundred twenty three quinquagintillionths seven hundred unquinquagintillionths three hundred ninety four duoquinquagintillionths one hundred sixty three trequinquagintillionths six hundred seventy seven quattuorquinquagintillionths seven hundred sixteen quinquinquagintillionths two hundred seventy four sexquinquagintillionths seven hundred ninety nine septenquinquagintillionths seven hundred eighty seven octoquinquagintillionths seven hundred sixty four novemquinquagintillionths two hundred twenty six sexagintillionths two hundred thirty one unsexagintillionths one hundred twenty duosexagintillionths eight hundred ninety one tresexagintillionths nine hundred eleven quattuorsexagintillionths nine hundred fifty one quinsexagintillionths three hundred thirty eight sexsexagintillionths three hundred fifty four septensexagintillionths one hundred fifteen octosexagintillionths two hundred fifty five novemsexagintillionths seven hundred fifteen septuagintillionths one hundred twenty unseptuagintillionths three hundred sixty four duoseptuagintillionths nine hundred twenty treseptuagintillionths seven hundred fifteen quattuorseptuagintillionths twenty five quinseptuagintillionths one hundred forty six sexseptuagintillionths four hundred ninety nine septenseptuagintillionths eight hundred forty two octoseptuagintillionths six hundred six novemseptuagintillionths one hundred sixty nine octogintillionths six hundred sixty seven unoctogintillionths four hundred seventy seven duooctogintillionths eight hundred thirty seven treoctogintillionths six quattuoroctogintillionths one hundred seventy three quinoctogintillionths five hundred sexoctogintillionths one hundred twenty three septenoctogintillionths three hundred forty eight octooctogintillionths seven hundred thirty four novemoctogintillionths five hundred ninety four nonagintillionths six hundred twenty five unnonagintillionths seven hundred eighty one duononagintillionths six hundred seventy six trenonagintillionths one hundred eighty seven quattuornonagintillionths nine hundred seventy two quinnonagintillionths one hundred seventy four sexnonagintillionths three hundred fifty two septennonagintillionths two hundred fifty seven octononagintillionths seven hundred ninety five novemnonagintillionths five hundred ninety six centillionths two hundred sixty one cenuntillionths five hundred twenty five cenduotillionths ten centretillionths one hundred twenty one cenquattuortillionths six hundred seventeen cenquintillionths eight hundred thirty one censextillionths seven hundred forty seven censeptentillionths three hundred two cenoctotillionths six hundred eighty six cennovemtillionths seven hundred thirty six cendecillionths two hundred twenty cenundecillionths three hundred twenty four cenduodecillionths nine hundred thirty four centredecillionths six hundred seventy seven cenquattuordecillionths thirty two cenquindecillionths four hundred twenty one censexdecillionths six hundred seventy three censeptendecillionths two hundred eighty one cenoctodecillionths thirty eight cennovemdecillionths five hundred forty eight cenvigintillionths five hundred eighteen cenunvigintillionths forty nine cenduovigintillionths three hundred thirty centrevigintillionths eight hundred seventy four cenquattuorvigintillionths forty seven cenquinvigintillionths seven hundred thirty eight censexvigintillionths two hundred sixty one censeptenvigintillionths six hundred forty six cenoctovigintillionths six cennovemvigintillionths two hundred fifty seven centrigintillionths eight hundred sixty seven cenuntrigintillionths six hundred fifty three cenduotrigintillionths nine hundred thirty two centretrigintillionths one hundred three cenquattuortrigintillionths six hundred ninety cenquintrigintillionths five hundred fifty two censextrigintillionths five hundred fifty one censeptentrigintillionths three hundred thirty three cenoctotrigintillionths six hundred twenty nine cennovemtrigintillionths four hundred seventy eight cenquadragintillionths nine hundred twenty nine cenunquadragintillionths three hundred twenty three cenduoquadragintillionths six hundred twenty two centrequadragintillionths eight hundred thirty six cenquattuorquadragintillionths one hundred three cenquinquadragintillionths four hundred eighteen censexquadragintillionths three hundred eighty nine censeptenquadragintillionths three hundred ninety three cenoctoquadragintillionths four hundred sixty five cennovemquadragintillionths fifty nine cenquinquagintillionths fifty six cenunquinquagintillionths three hundred twenty eight cenduoquinquagintillionths sixty one centrequinquagintillionths four hundred ninety two cenquattuorquinquagintillionths eight hundred eighty two cenquinquinquagintillionths eight hundred nineteen censexquinquagintillionths nine hundred three censeptenquinquagintillionths seven hundred cenoctoquinquagintillionths seven hundred seventy five cennovemquinquagintillionths eight hundred seventy two censexagintillionths six hundred ninety eight cenunsexagintillionths thirty eight cenduosexagintillionths six hundred seventy one centresexagintillionths seven hundred four cenquattuorsexagintillionths sixteen cenquinsexagintillionths nine hundred ninety two censexsexagintillionths eight hundred seven censeptensexagintillionths eight hundred seventy five cenoctosexagintillionths one hundred ninety five cennovemsexagintillionths nine hundred eleven censeptuagintillionths five hundred forty cenunseptuagintillionths eight hundred eighty three cenduoseptuagintillionths three hundred two centreseptuagintillionths five hundred forty nine cenquattuorseptuagintillionths fifty four cenquinseptuagintillionths nine hundred forty eight censexseptuagintillionths two hundred seventy censeptenseptuagintillionths nine hundred nineteen cenoctoseptuagintillionths three hundred twenty nine cennovemseptuagintillionths eight hundred forty one cenoctogintillionths one hundred forty nine cenunoctogintillionths two hundred ten cenduooctogintillionths one hundred fifty two centreoctogintillionths one hundred sixty cenquattuoroctogintillionths twenty two cenquinoctogintillionths two hundred fifty three censexoctogintillionths nine hundred sixty censeptenoctogintillionths seven hundred ninety one cenoctooctogintillionths six hundred seventy one cennovemoctogintillionths one hundred seventy four cennonagintillionths seven hundred forty six cenunnonagintillionths five hundred twenty five cenduononagintillionths eight hundred eighteen centrenonagintillionths nine hundred thirty six cenquattuornonagintillionths one hundred sixteen cenquinnonagintillionths four hundred ninety seven censexnonagintillionths three hundred sixty four censeptennonagintillionths one hundred forty nine cenoctononagintillionths four hundred eighty cennovemnonagintillionths thirty six duocentillionths five hundred six duocenuntillionths five hundred forty one duocenduotillionths eight hundred eighty five duocentretillionths eight hundred seventeen duocenquattuortillionths eight hundred thirty nine duocenquintillionths nine hundred eighty five duocensextillionths seven hundred eighty nine duocenseptentillionths three hundred thirty four duocenoctotillionths three hundred thirty duocennovemtillionths eight hundred sixty seven duocendecillionths four hundred eight duocenundecillionths one hundred sixty eight duocenduodecillionths five hundred fifty five duocentredecillionths one hundred fifty nine duocenquattuordecillionths seven hundred seventy two duocenquindecillionths six hundred fifty seven duocensexdecillionths four hundred forty four duocenseptendecillionths one hundred thirty four duocenoctodecillionths eight hundred seventy five duocennovemdecillionths five hundred sixty seven duocenvigintillionths three hundred thirty four duocenunvigintillionths five hundred eighty seven duocenduovigintillionths one hundred sixteen duocentrevigintillionths three hundred fifty five duocenquattuorvigintillionths five hundred eighty four duocenquinvigintillionths nine hundred eighty two duocensexvigintillionths five hundred forty four duocenseptenvigintillionths four hundred seventy two duocenoctovigintillionths fifty one duocennovemvigintillionths ten duocentrigintillionths two hundred eighty one duocenuntrigintillionths three hundred twenty one duocenduotrigintillionths five hundred fifty two duocentretrigintillionths eight hundred seventy six duocenquattuortrigintillionths nine hundred seventy five duocenquintrigintillionths six hundred one duocensextrigintillionths one hundred forty three duocenseptentrigintillionths eight hundred forty one duocenoctotrigintillionths two hundred five duocennovemtrigintillionths ninety duocenquadragintillionths three hundred ninety three duocenunquadragintillionths four hundred twenty eight duocenduoquadragintillionths six hundred eighty two duocentrequadragintillionths three hundred seventy duocenquattuorquadragintillionths nine hundred duocenquinquadragintillionths one hundred seventy six duocensexquadragintillionths three hundred ninety four duocenseptenquadragintillionths four hundred ninety nine duocenoctoquadragintillionths ninety six duocennovemquadragintillionths five hundred sixty three duocenquinquagintillionths nine hundred ninety nine duocenunquinquagintillionths one hundred thirty six duocenduoquinquagintillionths three hundred fifty duocentrequinquagintillionths nine hundred fifty three duocenquattuorquinquagintillionths two hundred sixty four duocenquinquinquagintillionths three hundred six duocensexquinquagintillionths one hundred sixty four duocenseptenquinquagintillionths eighty seven duocenoctoquinquagintillionths five hundred forty two duocennovemquinquagintillionths one hundred six duocensexagintillionths two hundred sixty three duocenunsexagintillionths sixty eight duocenduosexagintillionths four hundred eighty five duocentresexagintillionths one hundred seventy eight duocenquattuorsexagintillionths eighty duocenquinsexagintillionths nine hundred eighty two duocensexsexagintillionths two hundred fifty one duocenseptensexagintillionths nine hundred sixty five duocenoctosexagintillionths three hundred forty nine duocennovemsexagintillionths four hundred seven duocenseptuagintillionths six hundred sixty seven duocenunseptuagintillionths eight hundred ninety duocenduoseptuagintillionths seven hundred eighty duocentreseptuagintillionths forty three duocenquattuorseptuagintillionths seven hundred twenty eight duocenquinseptuagintillionths five hundred forty seven duocensexseptuagintillionths four hundred forty duocenseptenseptuagintillionths eighty two duocenoctoseptuagintillionths eight hundred eighty seven duocennovemseptuagintillionths seven hundred thirty eight duocenoctogintillionths two hundred forty six duocenunoctogintillionths one hundred seven duocenduooctogintillionths one hundred seventy four duocentreoctogintillionths four hundred nineteen duocenquattuoroctogintillionths nine hundred twenty two duocenquinoctogintillionths five hundred seventy three duocensexoctogintillionths one hundred eighty eight duocenseptenoctogintillionths nine hundred eighteen duocenoctooctogintillionths nine hundred twenty seven duocennovemoctogintillionths two hundred fifty six duocennonagintillionths three hundred twenty eight duocenunnonagintillionths one hundred forty nine duocenduononagintillionths three hundred five duocentrenonagintillionths four hundred ten duocenquattuornonagintillionths eight hundred ninety two duocenquinnonagintillionths six hundred fifty duocensexnonagintillionths five hundred twenty seven duocenseptennonagintillionths seven hundred ninety four duocenoctononagintillionths three hundred sixty two duocennovemnonagintillionths six hundred seventy three trecentillionths three hundred forty five trecenuntillionths six hundred sixteen trecenduotillionths nine hundred forty eight trecentretillionths six hundred sixty trecenquattuortillionths nine hundred seventy nine trecenquintillionths four hundred twenty five trecensextillionths four hundred sixty six trecenseptentillionths eight hundred forty one trecenoctotillionths eight hundred ninety two trecennovemtillionths six hundred eighty four trecendecillionths six hundred seventy six trecenundecillionths six hundred fifty six trecenduodecillionths five hundred three trecentredecillionths eight hundred twenty one trecenquattuordecillionths six hundred fifty eight trecenquindecillionths two hundred twelve trecensexdecillionths six hundred eighty nine trecenseptendecillionths fifty five trecenoctodecillionths six hundred eighty four trecennovemdecillionths four hundred eighteen trecenvigintillionths six hundred two trecenunvigintillionths one hundred sixty nine trecenduovigintillionths eighty four trecentrevigintillionths six hundred eighty five trecenquattuorvigintillionths eighty nine trecenquinvigintillionths seven hundred sixty one trecensexvigintillionths seven hundred seventy three trecenseptenvigintillionths four hundred fifty five trecenoctovigintillionths seven hundred thirty seven trecennovemvigintillionths ninety four trecentrigintillionths five hundred twenty seven trecenuntrigintillionths ninety eight trecenduotrigintillionths seven hundred fifty one trecentretrigintillionths six hundred thirteen trecenquattuortrigintillionths one hundred twenty seven trecenquintrigintillionths six hundred eighty four trecensextrigintillionths one hundred one trecenseptentrigintillionths six hundred forty eight trecenoctotrigintillionths five hundred sixty eight trecennovemtrigintillionths eight hundred twelve trecenquadragintillionths nine hundred ninety six trecenunquadragintillionths eight hundred two trecenduoquadragintillionths four hundred sixty four trecentrequadragintillionths seven hundred fourteen trecenquattuorquadragintillionths seven hundred forty four trecenquinquadragintillionths one trecensexquadragintillionth two hundred ninety one trecenseptenquadragintillionths nine hundred ninety five trecenoctoquadragintillionths five hundred five trecennovemquadragintillionths seven hundred eighty nine trecenquinquagintillionths one hundred eighty one trecenunquinquagintillionths eight hundred forty one trecenduoquinquagintillionths nine hundred thirty eight trecentrequinquagintillionths four hundred sixty trecenquattuorquinquagintillionths one hundred trecenquinquinquagintillionths"));
        Assert.assertEquals("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106.22957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181",
                NumberStringUtility.numberPhraseToNumberString("thirty five octovigintillion six hundred eighty four septenvigintillion five hundred forty four sexvigintillion seventy five quinvigintillion seven quattuorvigintillion eight hundred eighty nine trevigintillion three hundred fifty two duovigintillion eight hundred twelve unvigintillion seven hundred thirty seven vigintillion three hundred ninety nine novemdecillion five hundred eleven octodecillion nine hundred nine septendecillion one hundred fifteen sexdecillion three hundred thirty three quindecillion one hundred two quattuordecillion three hundred eighty six tredecillion three hundred twenty six duodecillion eight hundred ninety four undecillion seven hundred twenty decillion six hundred thirty nonillion five hundred thirty four octillion four hundred ninety eight septillion three hundred twenty sextillion eight hundred eighty two quintillion one hundred fifteen quadrillion five hundred eighty six trillion one hundred eighty six billion two hundred fifty million eight hundred fifty two thousand one hundred six point two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163",
                NumberStringUtility.numberPhraseToNumberString("three hundred fifty six quattuorquinquagintillionths eight hundred forty five quinquinquagintillionths four hundred forty sexquinquagintillionths seven hundred fifty septenquinquagintillionths seventy eight octoquinquagintillionths eight hundred ninety three novemquinquagintillionths five hundred twenty eight sexagintillionths one hundred twenty seven unsexagintillionths three hundred seventy three duosexagintillionths nine hundred ninety five tresexagintillionths one hundred nineteen quattuorsexagintillionths ninety one quinsexagintillionths one hundred fifty three sexsexagintillionths three hundred thirty one septensexagintillionths twenty three octosexagintillionths eight hundred sixty three novemsexagintillionths two hundred sixty eight septuagintillionths nine hundred forty seven unseptuagintillionths two hundred six duoseptuagintillionths three hundred five treseptuagintillionths three hundred forty four quattuorseptuagintillionths nine hundred eighty three quinseptuagintillionths two hundred eight sexseptuagintillionths eight hundred twenty one septenseptuagintillionths one hundred fifty five octoseptuagintillionths eight hundred sixty one novemseptuagintillionths eight hundred sixty two octogintillionths five hundred eight unoctogintillionths five hundred twenty one duooctogintillionths sixty two treoctogintillionths two hundred ninety five quattuoroctogintillionths seven hundred eighty eight quinoctogintillionths four hundred twenty eight sexoctogintillionths four hundred seventy seven septenoctogintillionths nine hundred thirteen octooctogintillionths two hundred sixty novemoctogintillionths one nonagintillionth seven hundred twenty four unnonagintillionths six hundred twenty one duononagintillionths five hundred twenty two trenonagintillionths three hundred seventy quattuornonagintillionths thirty nine quinnonagintillionths four hundred sixteen sexnonagintillionths three hundred sixty seven septennonagintillionths seven hundred seventy one octononagintillionths six hundred twenty seven novemnonagintillionths four hundred seventy nine centillionths nine hundred seventy eight cenuntillionths seven hundred seventy six cenduotillionths four hundred twenty two centretillionths six hundred twenty three cenquattuortillionths one hundred twelve cenquintillionths eighty nine censextillionths one hundred ninety one censeptentillionths one hundred ninety five cenoctotillionths one hundred thirty three cennovemtillionths eight hundred thirty five cendecillionths four hundred eleven cenundecillionths five hundred twenty five cenduodecillionths five hundred seventy one centredecillionths five hundred twelve cenquattuordecillionths thirty six cenquindecillionths four hundred ninety two censexdecillionths seventy one censeptendecillionths five hundred two cenoctodecillionths five hundred fourteen cennovemdecillionths six hundred forty nine cenvigintillionths nine hundred eighty four cenunvigintillionths two hundred sixty cenduovigintillionths six hundred sixteen centrevigintillionths nine hundred sixty six cenquattuorvigintillionths seven hundred forty seven cenquinvigintillionths seven hundred eighty three censexvigintillionths seven hundred censeptenvigintillionths six hundred seventeen cenoctovigintillionths three hundred fifty cennovemvigintillionths twelve centrigintillionths three hundred thirty four cenuntrigintillionths eight hundred seventy three cenduotrigintillionths four hundred fifty nine centretrigintillionths four hundred sixty two cenquattuortrigintillionths five hundred seventy eight cenquintrigintillionths one hundred sixty seven censextrigintillionths six hundred eighteen censeptentrigintillionths seven hundred ninety seven cenoctotrigintillionths two hundred seventeen cennovemtrigintillionths four hundred thirty five cenquadragintillionths two hundred twenty five cenunquadragintillionths seven hundred seventy nine cenduoquadragintillionths five hundred fifty nine centrequadragintillionths six hundred twenty six cenquattuorquadragintillionths one hundred fifty two cenquinquadragintillionths five hundred one censexquadragintillionths twelve censeptenquadragintillionths one hundred sixty one cenoctoquadragintillionths seven hundred eighty three cennovemquadragintillionths one hundred seventy four cenquinquagintillionths seven hundred thirty cenunquinquagintillionths two hundred sixty eight cenduoquinquagintillionths six hundred seventy three centrequinquagintillionths six hundred twenty two cenquattuorquinquagintillionths thirty two cenquinquinquagintillionths four hundred ninety three censexquinquagintillionths four hundred sixty seven censeptenquinquagintillionths seven hundred three cenoctoquinquagintillionths two hundred forty two cennovemquinquagintillionths one hundred sixty seven censexagintillionths three hundred twenty eight cenunsexagintillionths one hundred three cenduosexagintillionths eight hundred fifty four centresexagintillionths eight hundred fifty one cenquattuorsexagintillionths eight hundred four cenquinsexagintillionths nine hundred thirty three censexsexagintillionths eighty seven censeptensexagintillionths four hundred four cenoctosexagintillionths seven hundred seventy three cennovemsexagintillionths eight hundred twenty six censeptuagintillionths one hundred sixty four cenunseptuagintillionths six hundred cenduoseptuagintillionths six hundred twenty five centreseptuagintillionths seven hundred eighty six cenquattuorseptuagintillionths seven hundred sixty five cenquinseptuagintillionths three hundred ninety three censexseptuagintillionths two hundred ten censeptenseptuagintillionths three hundred sixty nine cenoctoseptuagintillionths fifty five cennovemseptuagintillionths two hundred fifty five cenoctogintillionths one hundred thirty three cenunoctogintillionths three hundred sixty two cenduooctogintillionths nine hundred forty seven centreoctogintillionths eight hundred ninety two cenquattuoroctogintillionths nine hundred thirty two cenquinoctogintillionths three hundred sixty two censexoctogintillionths two hundred eighty three censeptenoctogintillionths six hundred ten cenoctooctogintillionths three hundred forty one cennovemoctogintillionths eight hundred thirty eight cennonagintillionths nine hundred thirty nine cenunnonagintillionths three hundred forty six cenduononagintillionths five hundred five centrenonagintillionths nine hundred five cenquattuornonagintillionths six hundred thirty two cenquinnonagintillionths eight hundred six censexnonagintillionths one hundred forty nine censeptennonagintillionths two hundred eighty eight cenoctononagintillionths two hundred eighty one cennovemnonagintillionths nine hundred ninety duocentillionths three hundred seventy duocenuntillionths seventy seven duocenduotillionths five hundred eighty seven duocentretillionths two hundred sixty nine duocenquattuortillionths eight hundred three duocenquintillionths eight hundred sixty seven duocensextillionths one hundred seventy duocenseptentillionths four hundred one duocenoctotillionths six hundred ninety nine duocennovemtillionths two hundred eighty duocendecillionths seven hundred eighty seven duocenundecillionths five hundred nineteen duocenduodecillionths five hundred ninety one duocentredecillionths one hundred fifty four duocenquattuordecillionths eighty eight duocenquindecillionths three hundred thirty duocensexdecillionths two hundred fifty four duocenseptendecillionths nine hundred five duocenoctodecillionths four hundred ninety four duocennovemdecillionths eight hundred twenty seven duocenvigintillionths ninety one duocenunvigintillionths nine hundred thirty two duocenduovigintillionths nine hundred eighty four duocentrevigintillionths one hundred fourteen duocenquattuorvigintillionths nine hundred twenty one duocenquinvigintillionths fifteen duocensexvigintillionths two hundred sixteen duocenseptenvigintillionths two duocenoctovigintillionths two hundred twenty five duocennovemvigintillionths three hundred ninety six duocentrigintillionths seventy nine duocenuntrigintillionths one hundred sixty seven duocenduotrigintillionths one hundred seventeen duocentretrigintillionths four hundred seventy four duocenquattuortrigintillionths six hundred fifty two duocenquintrigintillionths five hundred eighty one duocensextrigintillionths eight hundred ninety three duocenseptentrigintillionths six hundred eleven duocenoctotrigintillionths six hundred forty nine duocennovemtrigintillionths seven hundred thirty six duocenquadragintillionths four hundred fourteen duocenunquadragintillionths nine hundred forty eight duocenduoquadragintillionths three duocentrequadragintillionths six hundred fifty duocenquattuorquadragintillionths six hundred fifty four duocenquinquadragintillionths one hundred eighty eight duocensexquadragintillionths five hundred eighty one duocenseptenquadragintillionths seven hundred eighty three duocenoctoquadragintillionths nine hundred ninety eight duocennovemquadragintillionths five hundred seventy eight duocenquinquagintillionths nine hundred thirty three duocenunquinquagintillionths four hundred thirty three duocenduoquinquagintillionths eighty six duocentrequinquagintillionths seven hundred forty duocenquattuorquinquagintillionths eight hundred sixteen duocenquinquinquagintillionths eight hundred fifty five duocensexquinquagintillionths five hundred fifteen duocenseptenquinquagintillionths nine hundred seventy seven duocenoctoquinquagintillionths two hundred sixty five duocennovemquinquagintillionths seven hundred forty four duocensexagintillionths four hundred thirteen duocenunsexagintillionths four hundred eighty seven duocenduosexagintillionths five hundred fifty six duocentresexagintillionths seven hundred thirty three duocenquattuorsexagintillionths four hundred fifty eight duocenquinsexagintillionths seven hundred eleven duocensexsexagintillionths six hundred thirty five duocenseptensexagintillionths five hundred fifty eight duocenoctosexagintillionths four hundred ninety eight duocennovemsexagintillionths two hundred fifty four duocenseptuagintillionths four hundred forty seven duocenunseptuagintillionths two hundred five duocenduoseptuagintillionths one hundred one duocentreseptuagintillionths twenty eight duocenquattuorseptuagintillionths one hundred thirty two duocenquinseptuagintillionths one hundred fifty five duocensexseptuagintillionths two hundred eighty seven duocenseptenseptuagintillionths six hundred ninety seven duocenoctoseptuagintillionths five hundred sixty duocennovemseptuagintillionths one hundred fourteen duocenoctogintillionths three hundred eighty four duocenunoctogintillionths one hundred twenty duocenduooctogintillionths five hundred nine duocentreoctogintillionths thirty nine duocenquattuoroctogintillionths three hundred forty two duocenquinoctogintillionths eight hundred sixty eight duocensexoctogintillionths two hundred thirty seven duocenseptenoctogintillionths ninety duocenoctooctogintillionths seventeen duocennovemoctogintillionths six hundred thirty nine duocennonagintillionths four hundred forty nine duocenunnonagintillionths nine hundred nine duocenduononagintillionths six hundred fifty six duocentrenonagintillionths three hundred ninety nine duocenquattuornonagintillionths nine hundred thirteen duocenquinnonagintillionths six hundred thirty five duocensexnonagintillionths ninety five duocenseptennonagintillionths three hundred twenty six duocenoctononagintillionths four hundred thirty duocennovemnonagintillionths six hundred sixteen trecentillionths four hundred eight trecenuntillionths seven hundred fifty four trecenduotillionths two hundred ten trecentretillionths six hundred twenty six trecenquattuortillionths three hundred six trecenquintillionths eight hundred forty eight trecensextillionths five hundred seventeen trecenseptentillionths eight hundred eight trecenoctotillionths ninety eight trecennovemtillionths two hundred twenty five trecendecillionths one hundred ninety six trecenundecillionths five hundred thirty four trecenduodecillionths nine hundred forty trecentredecillionths seven hundred sixty six trecenquattuordecillionths seven hundred eighty nine trecenquindecillionths seventy eight trecensexdecillionths four trecenseptendecillionths three hundred seventy two trecenoctodecillionths eight hundred fifty four trecennovemdecillionths seven hundred forty four trecenvigintillionths eight trecenunvigintillionths two hundred eighty eight trecenduovigintillionths seven hundred seventy three trecentrevigintillionths eight hundred twenty four trecenquattuorvigintillionths six hundred ten trecenquinvigintillionths seven hundred seventeen trecensexvigintillionths four hundred forty one trecenseptenvigintillionths nine hundred ninety two trecenoctovigintillionths two hundred fifty seven trecennovemvigintillionths three hundred eighteen trecentrigintillionths eight hundred ninety one trecenuntrigintillionths eight hundred ninety two trecenduotrigintillionths seven hundred twenty five trecentretrigintillionths six hundred thirty two trecenquattuortrigintillionths eight hundred fourteen trecenquintrigintillionths nine hundred thirty trecensextrigintillionths five hundred forty one trecenseptentrigintillionths eighty nine trecenoctotrigintillionths two hundred sixty five trecennovemtrigintillionths fifty two trecenquadragintillionths seven hundred seventy nine trecenunquadragintillionths four hundred thirty six trecenduoquadragintillionths two hundred sixty seven trecentrequadragintillionths three hundred thirty four trecenquattuorquadragintillionths five hundred sixty one trecenquinquadragintillionths six hundred ninety four trecensexquadragintillionths eight hundred sixty six trecenseptenquadragintillionths ninety seven trecenoctoquadragintillionths nine hundred forty two trecennovemquadragintillionths five hundred forty six trecenquinquagintillionths six hundred eighty four trecenunquinquagintillionths one hundred eighty nine trecenduoquinquagintillionths two hundred sixty eight trecentrequinquagintillionths four hundred sixty seven trecenquattuorquinquagintillionths six hundred sixty five trecenquinquinquagintillionths six hundred fifty trecensexquinquagintillionths three hundred eighty two trecenseptenquinquagintillionths one hundred sixty five trecenoctoquinquagintillionths eight hundred twenty one trecennovemquinquagintillionths two hundred sixty eight trecensexagintillionths nine hundred five trecenunsexagintillionths five hundred sixty eight trecenduosexagintillionths four hundred forty one trecentresexagintillionths eight hundred sixty trecenquattuorsexagintillionths two hundred sixteen trecenquinsexagintillionths nine hundred eight trecensexsexagintillionths four hundred sixty eight trecenseptensexagintillionths five hundred eight trecenoctosexagintillionths nine hundred seventy six trecennovemsexagintillionths one hundred seventy seven trecenseptuagintillionths three hundred forty five trecenunseptuagintillionths five hundred seventy three trecenduoseptuagintillionths seven hundred nine trecentreseptuagintillionths four hundred fifty two trecenquattuorseptuagintillionths seven hundred nine trecenquinseptuagintillionths eight hundred seventy five trecensexseptuagintillionths one hundred sixty one trecenseptenseptuagintillionths three hundred twelve trecenoctoseptuagintillionths seven hundred sixty eight trecennovemseptuagintillionths four hundred ten trecenoctogintillionths one hundred sixty four trecenunoctogintillionths eight hundred fifty six trecenduooctogintillionths eight hundred eighty one trecentreoctogintillionths two hundred ninety nine trecenquattuoroctogintillionths six hundred eighty trecenquinoctogintillionths two hundred forty six trecensexoctogintillionths four hundred seventy one trecenseptenoctogintillionths four hundred seventy four trecenoctooctogintillionths four hundred trecennovemoctogintillionths one hundred twenty nine trecennonagintillionths one hundred ninety nine trecenunnonagintillionths five hundred fifty trecenduononagintillionths five hundred seventy eight trecentrenonagintillionths nine hundred eighteen trecenquattuornonagintillionths one hundred eighty four trecenquinnonagintillionths one hundred ninety three trecensexnonagintillionths eight hundred forty six trecenseptennonagintillionths ten trecenoctononagintillionths"));
        
        //order
        Assert.assertEquals("4", NumberStringUtility.numberPhraseToNumberString("one three"));
        Assert.assertEquals("120", NumberStringUtility.numberPhraseToNumberString("one twenty"));
        Assert.assertEquals("112", NumberStringUtility.numberPhraseToNumberString("one twelve"));
        Assert.assertEquals("135", NumberStringUtility.numberPhraseToNumberString("one thirty five"));
        Assert.assertEquals("100", NumberStringUtility.numberPhraseToNumberString("one hundred"));
        Assert.assertEquals("100", NumberStringUtility.numberPhraseToNumberString("one oh"));
        Assert.assertEquals("103", NumberStringUtility.numberPhraseToNumberString("one oh three"));
        Assert.assertEquals("120", NumberStringUtility.numberPhraseToNumberString("one o twenty"));
        Assert.assertEquals("112", NumberStringUtility.numberPhraseToNumberString("one o twelve"));
        Assert.assertEquals("135", NumberStringUtility.numberPhraseToNumberString("one oh thirty five"));
        Assert.assertEquals("27", NumberStringUtility.numberPhraseToNumberString("twenty seven"));
        Assert.assertEquals("2080", NumberStringUtility.numberPhraseToNumberString("twenty eighty"));
        Assert.assertEquals("2067", NumberStringUtility.numberPhraseToNumberString("twenty sixty seven"));
        Assert.assertEquals("2012", NumberStringUtility.numberPhraseToNumberString("twenty twelve"));
        Assert.assertEquals("2000", NumberStringUtility.numberPhraseToNumberString("twenty hundred"));
        Assert.assertEquals("2000", NumberStringUtility.numberPhraseToNumberString("twenty o"));
        Assert.assertEquals("2000", NumberStringUtility.numberPhraseToNumberString("twenty o"));
        Assert.assertEquals("2006", NumberStringUtility.numberPhraseToNumberString("twenty oh six"));
        Assert.assertEquals("2020", NumberStringUtility.numberPhraseToNumberString("twenty o twenty"));
        Assert.assertEquals("2012", NumberStringUtility.numberPhraseToNumberString("twenty o twelve"));
        Assert.assertEquals("25", NumberStringUtility.numberPhraseToNumberString("nineteen six"));
        Assert.assertEquals("1950", NumberStringUtility.numberPhraseToNumberString("nineteen fifty"));
        Assert.assertEquals("1967", NumberStringUtility.numberPhraseToNumberString("nineteen sixty seven"));
        Assert.assertEquals("1912", NumberStringUtility.numberPhraseToNumberString("nineteen twelve"));
        Assert.assertEquals("1900", NumberStringUtility.numberPhraseToNumberString("nineteen hundred"));
        Assert.assertEquals("1900", NumberStringUtility.numberPhraseToNumberString("nineteen o"));
        Assert.assertEquals("1906", NumberStringUtility.numberPhraseToNumberString("nineteen oh six"));
        Assert.assertEquals("1920", NumberStringUtility.numberPhraseToNumberString("nineteen o twenty"));
        Assert.assertEquals("1912", NumberStringUtility.numberPhraseToNumberString("nineteen o twelve"));
        Assert.assertEquals("0", NumberStringUtility.numberPhraseToNumberString("hundred"));
        Assert.assertEquals("400", NumberStringUtility.numberPhraseToNumberString("four hundred"));
        Assert.assertEquals("409", NumberStringUtility.numberPhraseToNumberString("four hundred nine"));
        Assert.assertEquals("470", NumberStringUtility.numberPhraseToNumberString("four hundred seventy"));
        Assert.assertEquals("472", NumberStringUtility.numberPhraseToNumberString("four hundred seventy two"));
        Assert.assertEquals("417", NumberStringUtility.numberPhraseToNumberString("four hundred seventeen"));
        Assert.assertEquals("400", NumberStringUtility.numberPhraseToNumberString("four hundred hundred"));
        Assert.assertEquals("103", NumberStringUtility.numberPhraseToNumberString("one hundred three"));
        Assert.assertEquals("120", NumberStringUtility.numberPhraseToNumberString("one hundred twenty"));
        Assert.assertEquals("112", NumberStringUtility.numberPhraseToNumberString("one hundred twelve"));
        Assert.assertEquals("135", NumberStringUtility.numberPhraseToNumberString("one hundred thirty five"));
        Assert.assertEquals("301", NumberStringUtility.numberPhraseToNumberString("one three hundred"));
        Assert.assertEquals("12000", NumberStringUtility.numberPhraseToNumberString("one twenty hundred"));
        Assert.assertEquals("11200", NumberStringUtility.numberPhraseToNumberString("one twelve hundred"));
        Assert.assertEquals("13500", NumberStringUtility.numberPhraseToNumberString("one thirty five hundred"));
        Assert.assertEquals("6", NumberStringUtility.numberPhraseToNumberString("one two three"));
        Assert.assertEquals("115", NumberStringUtility.numberPhraseToNumberString("one twelve three"));
        Assert.assertEquals("133", NumberStringUtility.numberPhraseToNumberString("one thirty three"));
        Assert.assertEquals("103", NumberStringUtility.numberPhraseToNumberString("one hundred three"));
        Assert.assertEquals("2070", NumberStringUtility.numberPhraseToNumberString("twenty thirty forty"));
        Assert.assertEquals("1227", NumberStringUtility.numberPhraseToNumberString("twelve thirteen fourteen"));
        Assert.assertEquals("1214", NumberStringUtility.numberPhraseToNumberString("twelve hundred fourteen"));
        
        //special
        Assert.assertEquals("354", NumberStringUtility.numberPhraseToNumberString("three fifty four"));
        Assert.assertEquals("906", NumberStringUtility.numberPhraseToNumberString("nine oh six"));
        Assert.assertEquals("906", NumberStringUtility.numberPhraseToNumberString("nine o six"));
        Assert.assertEquals("1500", NumberStringUtility.numberPhraseToNumberString("fifteen hundred"));
        Assert.assertEquals("1567", NumberStringUtility.numberPhraseToNumberString("fifteen sixty seven"));
        Assert.assertEquals("1507", NumberStringUtility.numberPhraseToNumberString("fifteen oh seven"));
        Assert.assertEquals("1507", NumberStringUtility.numberPhraseToNumberString("fifteen o seven"));
        Assert.assertEquals("353000", NumberStringUtility.numberPhraseToNumberString("three fifty three thousand"));
        Assert.assertEquals("536.218", NumberStringUtility.numberPhraseToNumberString("five hundred thirty six two hundred eighteen thousandths"));
        Assert.assertEquals("536.218", NumberStringUtility.numberPhraseToNumberString("five hundred thirty six and two hundred eighteen thousandths"));
        Assert.assertEquals("500.002", NumberStringUtility.numberPhraseToNumberString("five hundred and two thousandths"));
        Assert.assertEquals("0.502", NumberStringUtility.numberPhraseToNumberString("five hundred two thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("one million six hundred and thirty thousand three hundred and ninety nine and five hundred and two thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred ninety nine five hundred two thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred ninety nine and five hundred two thousandths"));
        Assert.assertEquals("1630000.392", NumberStringUtility.numberPhraseToNumberString("one million six hundred and thirty thousand three hundred and ninety and two thousandths"));
        Assert.assertEquals("1630000.302", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred two thousandths"));
        Assert.assertEquals("1630300.002", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred and two thousandths"));
        Assert.assertEquals("1630000.392", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred ninety two thousandths"));
        Assert.assertEquals("1630300.092", NumberStringUtility.numberPhraseToNumberString("one million six hundred thirty thousand three hundred and ninety two thousandths"));
        Assert.assertEquals("1", NumberStringUtility.numberPhraseToNumberString("first"));
        Assert.assertEquals("1", NumberStringUtility.numberPhraseToNumberString("fir"));
        Assert.assertEquals("2", NumberStringUtility.numberPhraseToNumberString("second"));
        Assert.assertEquals("2", NumberStringUtility.numberPhraseToNumberString("seco"));
        Assert.assertEquals("3", NumberStringUtility.numberPhraseToNumberString("third"));
        Assert.assertEquals("3", NumberStringUtility.numberPhraseToNumberString("thi"));
        Assert.assertEquals("5", NumberStringUtility.numberPhraseToNumberString("fifth"));
        Assert.assertEquals("5", NumberStringUtility.numberPhraseToNumberString("fif"));
        Assert.assertEquals("98", NumberStringUtility.numberPhraseToNumberString("ninety eighth"));
        Assert.assertEquals("251", NumberStringUtility.numberPhraseToNumberString("second hundred fifty first"));
        Assert.assertEquals("8.55", NumberStringUtility.numberPhraseToNumberString("eighth and fifty fifth hundredths"));
        Assert.assertEquals("354", NumberStringUtility.numberPhraseToNumberString("3 54"));
        Assert.assertEquals("906", NumberStringUtility.numberPhraseToNumberString("9 oh 6"));
        Assert.assertEquals("906", NumberStringUtility.numberPhraseToNumberString("9 o 6"));
        Assert.assertEquals("1500", NumberStringUtility.numberPhraseToNumberString("1500"));
        Assert.assertEquals("1567", NumberStringUtility.numberPhraseToNumberString("15 67"));
        Assert.assertEquals("1507", NumberStringUtility.numberPhraseToNumberString("15 oh 7"));
        Assert.assertEquals("1507", NumberStringUtility.numberPhraseToNumberString("15 o 7"));
        Assert.assertEquals("353000", NumberStringUtility.numberPhraseToNumberString("3 53 thousand"));
        Assert.assertEquals("536.218", NumberStringUtility.numberPhraseToNumberString("536 218 thousandths"));
        Assert.assertEquals("536.218", NumberStringUtility.numberPhraseToNumberString("536 and 218 thousandths"));
        Assert.assertEquals("500.002", NumberStringUtility.numberPhraseToNumberString("500 and 2 thousandths"));
        Assert.assertEquals("0.502", NumberStringUtility.numberPhraseToNumberString("502 thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("1 million 600 and 30 thousand 300 and 99 and 500 and 2 thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 399 502 thousandths"));
        Assert.assertEquals("1630399.502", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 399 and 502 thousandths"));
        Assert.assertEquals("1630000.392", NumberStringUtility.numberPhraseToNumberString("1 million 600 and 30 thousand 300 and 90 and 2 thousandths"));
        Assert.assertEquals("1630000.302", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 302 thousandths"));
        Assert.assertEquals("1630300.002", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 300 and 2 thousandths"));
        Assert.assertEquals("1630000.392", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 392 thousandths"));
        Assert.assertEquals("1630300.092", NumberStringUtility.numberPhraseToNumberString("1 million 630 thousand 300 and 92 thousandths"));
        Assert.assertEquals("1", NumberStringUtility.numberPhraseToNumberString("1st"));
        Assert.assertEquals("1", NumberStringUtility.numberPhraseToNumberString("1nd"));
        Assert.assertEquals("2", NumberStringUtility.numberPhraseToNumberString("2nd"));
        Assert.assertEquals("2", NumberStringUtility.numberPhraseToNumberString("2rd"));
        Assert.assertEquals("3", NumberStringUtility.numberPhraseToNumberString("3rd"));
        Assert.assertEquals("3", NumberStringUtility.numberPhraseToNumberString("3th"));
        Assert.assertEquals("5", NumberStringUtility.numberPhraseToNumberString("5th"));
        Assert.assertEquals("5", NumberStringUtility.numberPhraseToNumberString("5st"));
        Assert.assertEquals("98", NumberStringUtility.numberPhraseToNumberString("98th"));
        Assert.assertEquals("251", NumberStringUtility.numberPhraseToNumberString("251st"));
        Assert.assertEquals("8.55", NumberStringUtility.numberPhraseToNumberString("8th and 55th hundredths"));
        
        //overflow
        Assert.assertEquals("1E9223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("one times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("1E-9223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("one times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("9.999999999999E9223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("9.999999999999E-9223372036854775795",
                NumberStringUtility.numberPhraseToNumberString("nine point nine nine nine nine nine nine nine nine nine nine nine nine times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand seven hundred ninety five"));
        Assert.assertEquals("9.9999999999999E-9223372036854775795",
                NumberStringUtility.numberPhraseToNumberString("nine point nine nine nine nine nine nine nine nine nine nine nine nine nine times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand seven hundred ninety five"));
        Assert.assertEquals("1.25465487E9223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("one point two five four six five four eight seven times ten to the nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("1.25465487E-9223372036854775808",
                NumberStringUtility.numberPhraseToNumberString("one point two five four six five four eight seven times ten to the negative nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight"));
        Assert.assertEquals("1E999223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("one times ten to the nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("1E-999223372036854775808",
                NumberStringUtility.numberPhraseToNumberString("one times ten to the negative nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight"));
        Assert.assertEquals("-1E999223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("negative one times ten to the nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("-1E-999223372036854775808",
                NumberStringUtility.numberPhraseToNumberString("negative one times ten to the negative nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight"));
        Assert.assertEquals("8.468926108744E16999223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("eight point four six eight nine two six one zero eight seven four four times ten to the sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("8.468926108744E-16999223372036854775808",
                NumberStringUtility.numberPhraseToNumberString("eight point four six eight nine two six one zero eight seven four four times ten to the negative sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight"));
        Assert.assertEquals("-8.468926108744E16999223372036854775807",
                NumberStringUtility.numberPhraseToNumberString("negative eight point four six eight nine two six one zero eight seven four four times ten to the sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred seven"));
        Assert.assertEquals("-8.468926108744E-16999223372036854775808",
                NumberStringUtility.numberPhraseToNumberString("negative eight point four six eight nine two six one zero eight seven four four times ten to the negative sixteen sextillion nine hundred ninety nine quintillion two hundred twenty three quadrillion three hundred seventy two trillion thirty six billion eight hundred fifty four million seven hundred seventy five thousand eight hundred eight"));
        
        //invalid
        Assert.assertEquals("0",
                NumberStringUtility.numberPhraseToNumberString(""));
        TestUtils.assertException(NumberFormatException.class, "The string: 'times ten to the' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("times ten to the"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'point' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("point"));
        Assert.assertEquals("0",
                NumberStringUtility.numberPhraseToNumberString("and"));
        Assert.assertEquals("0",
                NumberStringUtility.numberPhraseToNumberString("and and and"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative negative eighteen' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative negative eighteen"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative eight hundred fourty three negative thirty four' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative eight hundred fourty three negative thirty four"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'five times ten to the eight time ten to the three' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("five times ten to the eight time ten to the three"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'fifteen point point six eight one nine three two' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("fifteen point point six eight one nine three two"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'fifteen point six eight one point nine three two' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("fifteen point six eight one point nine three two"));
        Assert.assertEquals("-9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("negative eight hundred seventy five thousand nine million one hundred sixty seven billionths one hundred sixteen"));
        Assert.assertEquals("9875116.000000167",
                NumberStringUtility.numberPhraseToNumberString("eight hundred seventy five thousand negative nine million and one hundred sixty seven billionths one hundred sixteen"));
        Assert.assertEquals("521000",
                NumberStringUtility.numberPhraseToNumberString("eighteen thousand five hundred three thousand"));
        Assert.assertEquals("500",
                NumberStringUtility.numberPhraseToNumberString("five hundred and"));
        Assert.assertEquals("500000",
                NumberStringUtility.numberPhraseToNumberString("five hundred thousand and"));
        Assert.assertEquals("500000",
                NumberStringUtility.numberPhraseToNumberString("and five hundred thousand"));
        Assert.assertEquals("0",
                NumberStringUtility.numberPhraseToNumberString("zero million zero thousand zero"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point one hundred sixty seven billionths' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen point one hundred sixty seven billionths"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero eight and one hundred sixty seven billionths' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero eight and one hundred sixty seven billionths"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen one hundred sixty seven billionths point zero zero eight' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen one hundred sixty seven billionths point zero zero eight"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point sixty' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen point sixty"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point six hundred' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("negative nine million eight hundred seventy five thousand one hundred sixteen point six hundred"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'three cenillion' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("three cenillion"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'sixtyth' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("sixtyth"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'four test' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("four test"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'test' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumberString("test"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberPhraseToNumberString(null));
    }
    
    /**
     * JUnit test of numberPhraseToNumber.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#numberPhraseToNumber(String)
     */
    @Test
    public void testNumberPhraseToNumber() throws Exception {
        //simple cases
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber("zero"));
        Assert.assertEquals(new BigDecimal("1"), NumberStringUtility.numberPhraseToNumber("one"));
        Assert.assertEquals(new BigDecimal("2"), NumberStringUtility.numberPhraseToNumber("two"));
        Assert.assertEquals(new BigDecimal("3"), NumberStringUtility.numberPhraseToNumber("three"));
        Assert.assertEquals(new BigDecimal("4"), NumberStringUtility.numberPhraseToNumber("four"));
        Assert.assertEquals(new BigDecimal("5"), NumberStringUtility.numberPhraseToNumber("five"));
        Assert.assertEquals(new BigDecimal("6"), NumberStringUtility.numberPhraseToNumber("six"));
        Assert.assertEquals(new BigDecimal("7"), NumberStringUtility.numberPhraseToNumber("seven"));
        Assert.assertEquals(new BigDecimal("8"), NumberStringUtility.numberPhraseToNumber("eight"));
        Assert.assertEquals(new BigDecimal("9"), NumberStringUtility.numberPhraseToNumber("nine"));
        Assert.assertEquals(new BigDecimal("10"), NumberStringUtility.numberPhraseToNumber("ten"));
        Assert.assertEquals(new BigDecimal("11"), NumberStringUtility.numberPhraseToNumber("eleven"));
        Assert.assertEquals(new BigDecimal("12"), NumberStringUtility.numberPhraseToNumber("twelve"));
        Assert.assertEquals(new BigDecimal("13"), NumberStringUtility.numberPhraseToNumber("thirteen"));
        Assert.assertEquals(new BigDecimal("14"), NumberStringUtility.numberPhraseToNumber("fourteen"));
        Assert.assertEquals(new BigDecimal("15"), NumberStringUtility.numberPhraseToNumber("fifteen"));
        Assert.assertEquals(new BigDecimal("16"), NumberStringUtility.numberPhraseToNumber("sixteen"));
        Assert.assertEquals(new BigDecimal("17"), NumberStringUtility.numberPhraseToNumber("seventeen"));
        Assert.assertEquals(new BigDecimal("18"), NumberStringUtility.numberPhraseToNumber("eighteen"));
        Assert.assertEquals(new BigDecimal("19"), NumberStringUtility.numberPhraseToNumber("nineteen"));
        
        //two digit cases
        Assert.assertEquals(new BigDecimal("20"), NumberStringUtility.numberPhraseToNumber("twenty"));
        Assert.assertEquals(new BigDecimal("25"), NumberStringUtility.numberPhraseToNumber("twenty five"));
        Assert.assertEquals(new BigDecimal("30"), NumberStringUtility.numberPhraseToNumber("thirty"));
        Assert.assertEquals(new BigDecimal("31"), NumberStringUtility.numberPhraseToNumber("thirty one"));
        Assert.assertEquals(new BigDecimal("40"), NumberStringUtility.numberPhraseToNumber("forty"));
        Assert.assertEquals(new BigDecimal("46"), NumberStringUtility.numberPhraseToNumber("forty six"));
        Assert.assertEquals(new BigDecimal("50"), NumberStringUtility.numberPhraseToNumber("fifty"));
        Assert.assertEquals(new BigDecimal("52"), NumberStringUtility.numberPhraseToNumber("fifty two"));
        Assert.assertEquals(new BigDecimal("60"), NumberStringUtility.numberPhraseToNumber("sixty"));
        Assert.assertEquals(new BigDecimal("68"), NumberStringUtility.numberPhraseToNumber("sixty eight"));
        Assert.assertEquals(new BigDecimal("70"), NumberStringUtility.numberPhraseToNumber("seventy"));
        Assert.assertEquals(new BigDecimal("77"), NumberStringUtility.numberPhraseToNumber("seventy seven"));
        Assert.assertEquals(new BigDecimal("80"), NumberStringUtility.numberPhraseToNumber("eighty"));
        Assert.assertEquals(new BigDecimal("83"), NumberStringUtility.numberPhraseToNumber("eighty three"));
        Assert.assertEquals(new BigDecimal("90"), NumberStringUtility.numberPhraseToNumber("ninety"));
        Assert.assertEquals(new BigDecimal("94"), NumberStringUtility.numberPhraseToNumber("ninety four"));
        Assert.assertEquals(new BigDecimal("99"), NumberStringUtility.numberPhraseToNumber("ninety nine"));
        Assert.assertEquals(new BigDecimal("99"), NumberStringUtility.numberPhraseToNumber("ninety and nine"));
        
        //three digit cases
        Assert.assertEquals(new BigDecimal("100"), NumberStringUtility.numberPhraseToNumber("one hundred"));
        Assert.assertEquals(new BigDecimal("154"), NumberStringUtility.numberPhraseToNumber("one hundred fifty four"));
        Assert.assertEquals(new BigDecimal("200"), NumberStringUtility.numberPhraseToNumber("two hundred"));
        Assert.assertEquals(new BigDecimal("219"), NumberStringUtility.numberPhraseToNumber("two hundred nineteen"));
        Assert.assertEquals(new BigDecimal("300"), NumberStringUtility.numberPhraseToNumber("three hundred"));
        Assert.assertEquals(new BigDecimal("377"), NumberStringUtility.numberPhraseToNumber("three hundred seventy seven"));
        Assert.assertEquals(new BigDecimal("400"), NumberStringUtility.numberPhraseToNumber("four hundred"));
        Assert.assertEquals(new BigDecimal("468"), NumberStringUtility.numberPhraseToNumber("four hundred sixty eight"));
        Assert.assertEquals(new BigDecimal("500"), NumberStringUtility.numberPhraseToNumber("five hundred"));
        Assert.assertEquals(new BigDecimal("594"), NumberStringUtility.numberPhraseToNumber("five hundred ninety four"));
        Assert.assertEquals(new BigDecimal("600"), NumberStringUtility.numberPhraseToNumber("six hundred"));
        Assert.assertEquals(new BigDecimal("608"), NumberStringUtility.numberPhraseToNumber("six hundred eight"));
        Assert.assertEquals(new BigDecimal("700"), NumberStringUtility.numberPhraseToNumber("seven hundred"));
        Assert.assertEquals(new BigDecimal("776"), NumberStringUtility.numberPhraseToNumber("seven hundred seventy six"));
        Assert.assertEquals(new BigDecimal("800"), NumberStringUtility.numberPhraseToNumber("eight hundred"));
        Assert.assertEquals(new BigDecimal("842"), NumberStringUtility.numberPhraseToNumber("eight hundred forty two"));
        Assert.assertEquals(new BigDecimal("900"), NumberStringUtility.numberPhraseToNumber("nine hundred"));
        Assert.assertEquals(new BigDecimal("999"), NumberStringUtility.numberPhraseToNumber("nine hundred ninety nine"));
        Assert.assertEquals(new BigDecimal("999"), NumberStringUtility.numberPhraseToNumber("nine hundred and ninety nine"));
        Assert.assertEquals(new BigDecimal("999"), NumberStringUtility.numberPhraseToNumber("nine hundred and ninety and nine"));
        
        //larger cases
        Assert.assertEquals(new BigDecimal("1000"),
                NumberStringUtility.numberPhraseToNumber("one thousand"));
        Assert.assertEquals(new BigDecimal("643822"),
                NumberStringUtility.numberPhraseToNumber("six hundred forty three thousand eight hundred twenty two"));
        Assert.assertEquals(new BigDecimal("15621907"),
                NumberStringUtility.numberPhraseToNumber("fifteen million six hundred twenty one thousand nine hundred seven"));
        Assert.assertEquals(new BigDecimal("946104067001"),
                NumberStringUtility.numberPhraseToNumber("nine hundred forty six billion one hundred four million sixty seven thousand one"));
        Assert.assertEquals(new BigDecimal("199486273416821"),
                NumberStringUtility.numberPhraseToNumber("one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one"));
        Assert.assertEquals(new BigDecimal("199486000000821"),
                NumberStringUtility.numberPhraseToNumber("one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one"));
        Assert.assertEquals(new BigDecimal("1994860000821000054"),
                NumberStringUtility.numberPhraseToNumber("one quintillion nine hundred ninety four quadrillion eight hundred sixty trillion eight hundred twenty one million fifty four"));
        Assert.assertEquals(new BigDecimal("1994860000821000054"),
                NumberStringUtility.numberPhraseToNumber("one quintillion nine hundred and ninety four quadrillion eight hundred and sixty trillion eight hundred and twenty one million and fifty four"));
        Assert.assertEquals(new BigDecimal("1000000000000000"),
                NumberStringUtility.numberPhraseToNumber("one quadrillion"));
        Assert.assertEquals(new BigDecimal("1E+18"),
                NumberStringUtility.numberPhraseToNumber("one quintillion"));
        Assert.assertEquals(new BigDecimal("199486000000821"),
                NumberStringUtility.numberPhraseToNumber("199 trillion 486 billion 821"));
        Assert.assertEquals(new BigDecimal("199486000000821"),
                NumberStringUtility.numberPhraseToNumber("199 trillion and 486 billion and 821"));
        
        //very large cases
        Assert.assertEquals(new BigDecimal("3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion"));
        Assert.assertEquals(new BigDecimal("9.566115646E+55"),
                NumberStringUtility.numberPhraseToNumber("ninety five septendecillion six hundred sixty one sexdecillion one hundred fifty six quindecillion four hundred sixty quattuordecillion"));
        Assert.assertEquals(new BigDecimal("1.874420905E+56"),
                NumberStringUtility.numberPhraseToNumber("one hundred eighty seven septendecillion four hundred forty two sexdecillion ninety quindecillion five hundred quattuordecillion"));
        Assert.assertEquals(new BigDecimal("2.097751274E+57"),
                NumberStringUtility.numberPhraseToNumber("two octodecillion ninety seven septendecillion seven hundred fifty one sexdecillion two hundred seventy four quindecillion"));
        Assert.assertEquals(new BigDecimal("7.461123877E+108"),
                NumberStringUtility.numberPhraseToNumber("seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion"));
        Assert.assertEquals(new BigDecimal("4.000042339E+189"),
                NumberStringUtility.numberPhraseToNumber("four duosexagintillion forty two sexagintillion three hundred thirty nine novemquinquagintillion"));
        Assert.assertEquals(new BigDecimal("8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion"));
        Assert.assertEquals(new BigDecimal("8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals(new BigDecimal("8.4519974635648943123E+124"),
                NumberStringUtility.numberPhraseToNumber("84519974635648943123 quattuortrigintillion"));
        Assert.assertEquals(new BigDecimal("8.4519974635648943123E+105"),
                NumberStringUtility.numberPhraseToNumber("8.4519974635648943123 quattuortrigintillion"));
        Assert.assertEquals(new BigDecimal("8.4519974635648943123E+114"),
                NumberStringUtility.numberPhraseToNumber("8451997463.5648943123 quattuortrigintillion"));
        Assert.assertEquals(new BigDecimal("1.5133259974635648943123E+117"),
                NumberStringUtility.numberPhraseToNumber("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966"),
                NumberStringUtility.numberPhraseToNumber("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966.51"),
                NumberStringUtility.numberPhraseToNumber("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000966.5100001845461"),
                NumberStringUtility.numberPhraseToNumber("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51 and 184.5461 billionths"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"),
                NumberStringUtility.numberPhraseToNumber("1504.874 septentrigintillion 8451997463.5648943123 quattuortrigintillion 966.51 and 686.5 thousandths 184.5461 billionths"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"),
                NumberStringUtility.numberPhraseToNumber("8451997463.5648943123 quattuortrigintillion 1504.874 septentrigintillion 966.51 and 184.5461 billionths 686.5 thousandths"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"),
                NumberStringUtility.numberPhraseToNumber("686.5 thousandths 1504.874 septentrigintillion 966.51 184.5461 billionths 8451997463.5648943123 quattuortrigintillion"));
        
        //negative cases
        Assert.assertEquals(new BigDecimal("-0"), NumberStringUtility.numberPhraseToNumber("negative zero"));
        Assert.assertEquals(new BigDecimal("-2"), NumberStringUtility.numberPhraseToNumber("negative two"));
        Assert.assertEquals(new BigDecimal("-4"), NumberStringUtility.numberPhraseToNumber("negative four"));
        Assert.assertEquals(new BigDecimal("-7"), NumberStringUtility.numberPhraseToNumber("negative seven"));
        Assert.assertEquals(new BigDecimal("-13"), NumberStringUtility.numberPhraseToNumber("negative thirteen"));
        Assert.assertEquals(new BigDecimal("-14"), NumberStringUtility.numberPhraseToNumber("negative fourteen"));
        Assert.assertEquals(new BigDecimal("-19"), NumberStringUtility.numberPhraseToNumber("negative nineteen"));
        Assert.assertEquals(new BigDecimal("-40"), NumberStringUtility.numberPhraseToNumber("negative forty"));
        Assert.assertEquals(new BigDecimal("-46"), NumberStringUtility.numberPhraseToNumber("negative forty six"));
        Assert.assertEquals(new BigDecimal("-52"), NumberStringUtility.numberPhraseToNumber("negative fifty two"));
        Assert.assertEquals(new BigDecimal("-77"), NumberStringUtility.numberPhraseToNumber("negative seventy seven"));
        Assert.assertEquals(new BigDecimal("-80"), NumberStringUtility.numberPhraseToNumber("negative eighty"));
        Assert.assertEquals(new BigDecimal("-99"), NumberStringUtility.numberPhraseToNumber("negative ninety nine"));
        Assert.assertEquals(new BigDecimal("-219"), NumberStringUtility.numberPhraseToNumber("negative two hundred nineteen"));
        Assert.assertEquals(new BigDecimal("-300"), NumberStringUtility.numberPhraseToNumber("negative three hundred"));
        Assert.assertEquals(new BigDecimal("-594"), NumberStringUtility.numberPhraseToNumber("negative five hundred ninety four"));
        Assert.assertEquals(new BigDecimal("-776"), NumberStringUtility.numberPhraseToNumber("negative seven hundred seventy six"));
        Assert.assertEquals(new BigDecimal("-900"), NumberStringUtility.numberPhraseToNumber("negative nine hundred"));
        Assert.assertEquals(new BigDecimal("-999"), NumberStringUtility.numberPhraseToNumber("negative nine hundred ninety nine"));
        Assert.assertEquals(new BigDecimal("-999"), NumberStringUtility.numberPhraseToNumber("negative nine hundred and ninety nine"));
        Assert.assertEquals(new BigDecimal("-643822"),
                NumberStringUtility.numberPhraseToNumber("negative six hundred forty three thousand eight hundred twenty two"));
        Assert.assertEquals(new BigDecimal("-946104067001"),
                NumberStringUtility.numberPhraseToNumber("negative nine hundred forty six billion one hundred four million sixty seven thousand one"));
        Assert.assertEquals(new BigDecimal("-199486273416821"),
                NumberStringUtility.numberPhraseToNumber("negative one hundred ninety nine trillion four hundred eighty six billion two hundred seventy three million four hundred sixteen thousand eight hundred twenty one"));
        Assert.assertEquals(new BigDecimal("-199486000000821"),
                NumberStringUtility.numberPhraseToNumber("negative one hundred ninety nine trillion four hundred eighty six billion eight hundred twenty one"));
        Assert.assertEquals(new BigDecimal("-3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("negative three septendecillion four hundred sixty five sexdecillion eight hundred seventy four quindecillion one hundred twenty two quattuordecillion"));
        Assert.assertEquals(new BigDecimal("-7.461123877E+108"),
                NumberStringUtility.numberPhraseToNumber("negative seven quintrigintillion four hundred sixty one quattuortrigintillion one hundred twenty three tretrigintillion eight hundred seventy seven duotrigintillion"));
        Assert.assertEquals(new BigDecimal("-8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("negative eighty four cenuntillion five hundred nineteen centillion nine hundred seventy four novemnonagintillion six hundred thirty octononagintillion"));
        Assert.assertEquals(new BigDecimal("-8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("negative 84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals(new BigDecimal("-8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("-84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        Assert.assertEquals(new BigDecimal("-8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("- 84 cenuntillion 519 centillion 974 novemnonagintillion 630 octononagintillion"));
        
        //decimal cases
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber("zero point zero"));
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber("point zero"));
        Assert.assertEquals(new BigDecimal("0.1"), NumberStringUtility.numberPhraseToNumber("point one"));
        Assert.assertEquals(new BigDecimal("0.1"), NumberStringUtility.numberPhraseToNumber("zero point one"));
        Assert.assertEquals(new BigDecimal("0.1"), NumberStringUtility.numberPhraseToNumber("one tenth"));
        Assert.assertEquals(new BigDecimal("0.6"), NumberStringUtility.numberPhraseToNumber("six tenths"));
        Assert.assertEquals(new BigDecimal("0.01"), NumberStringUtility.numberPhraseToNumber("one hundredth"));
        Assert.assertEquals(new BigDecimal("0.08"), NumberStringUtility.numberPhraseToNumber("eight hundredths"));
        Assert.assertEquals(new BigDecimal("0.33"), NumberStringUtility.numberPhraseToNumber("thirty three hundredths"));
        Assert.assertEquals(new BigDecimal("0.9"), NumberStringUtility.numberPhraseToNumber("nine tenths"));
        Assert.assertEquals(new BigDecimal("0.001"), NumberStringUtility.numberPhraseToNumber("one thousandth"));
        Assert.assertEquals(new BigDecimal("0.007"), NumberStringUtility.numberPhraseToNumber("seven thousandths"));
        Assert.assertEquals(new BigDecimal("0.077"), NumberStringUtility.numberPhraseToNumber("seventy seven thousandths"));
        Assert.assertEquals(new BigDecimal("0.777"), NumberStringUtility.numberPhraseToNumber("seven hundred seventy seven thousandths"));
        Assert.assertEquals(new BigDecimal("0.0001"), NumberStringUtility.numberPhraseToNumber("one hundred millionths"));
        Assert.assertEquals(new BigDecimal("0.1001"), NumberStringUtility.numberPhraseToNumber("point one zero zero one"));
        Assert.assertEquals(new BigDecimal("2.1542"), NumberStringUtility.numberPhraseToNumber("two point one five four two"));
        Assert.assertEquals(new BigDecimal("19.008"), NumberStringUtility.numberPhraseToNumber("nineteen point zero zero eight"));
        Assert.assertEquals(new BigDecimal("40.74"), NumberStringUtility.numberPhraseToNumber("forty and seventy four hundredths"));
        Assert.assertEquals(new BigDecimal("300.9141"), NumberStringUtility.numberPhraseToNumber("three hundred point nine one four one"));
        Assert.assertEquals(new BigDecimal("594"), NumberStringUtility.numberPhraseToNumber("five hundred ninety four point zero zero zero"));
        Assert.assertEquals(new BigDecimal("776.41"), NumberStringUtility.numberPhraseToNumber("seven hundred seventy six and forty one hundredths zero"));
        Assert.assertEquals(new BigDecimal("643822.9641"),
                NumberStringUtility.numberPhraseToNumber("six hundred forty three thousand eight hundred twenty two point nine six four one"));
        Assert.assertEquals(new BigDecimal("643822.9641"),
                NumberStringUtility.numberPhraseToNumber("643 thousand 822 point 9641"));
        Assert.assertEquals(new BigDecimal("0.00000000123456789"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero zero zero one two three four five six seven eight nine"));
        Assert.assertEquals(new BigDecimal("1.23456789E-10"),
                NumberStringUtility.numberPhraseToNumber("one hundred twenty three trillionths four hundred fifty six quadrillionths seven hundred eighty nine quintillionths"));
        Assert.assertEquals(new BigDecimal("1.23456789E-11"),
                NumberStringUtility.numberPhraseToNumber("twelve trillionths three hundred forty five quadrillionths six hundred seventy eight quintillionths nine hundred sextillionths"));
        Assert.assertEquals(new BigDecimal("1.23456789E-12"),
                NumberStringUtility.numberPhraseToNumber("one trillionth two hundred thirty four quadrillionths five hundred sixty seven quintillionths eight hundred ninety sextillionths"));
        Assert.assertEquals(new BigDecimal("1.23456789E-16"),
                NumberStringUtility.numberPhraseToNumber("one hundred twenty three quintillionths four hundred fifty six sextillionths seven hundred eighty nine septillionths"));
        Assert.assertEquals(new BigDecimal("15.0000000000086543211547"),
                NumberStringUtility.numberPhraseToNumber("fifteen and eight trillionths six hundred fifty four quadrillionths three hundred twenty one quintillionths one hundred fifty four sextillionths seven hundred septillionths"));
        Assert.assertEquals(new BigDecimal("-9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen and one hundred sixty seven billionths"));
        Assert.assertEquals(new BigDecimal("-9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("negative 9 million 875 thousand 116 and 167 billionths"));
        Assert.assertEquals(new BigDecimal("-9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("-9 million 875 thousand 116 and 167 billionths"));
        
        //big decimal cases
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829"),
                NumberStringUtility.numberPhraseToNumber("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine"));
        Assert.assertEquals(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("zero point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829"),
                NumberStringUtility.numberPhraseToNumber("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine"));
        Assert.assertEquals(new BigDecimal("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("negative zero point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("negative five octodecillion nine hundred sixty seven septendecillion nine hundred forty five sexdecillion six hundred eighty nine quindecillion seven hundred ninety four quattuordecillion four hundred thirty six tredecillion eight hundred seventy seven duodecillion one hundred ninety eight undecillion eight hundred eighty seven decillion eight hundred twenty eight nonillion six hundred eighty nine octillion five hundred eighty two septillion one hundred sixty eight sextillion three hundred sixty six quintillion nine hundred two quadrillion seven hundred ninety five trillion three hundred twenty two billion seven hundred twenty five million eight hundred fifty eight thousand eight hundred twenty nine point five four nine zero five four nine eight four eight nine one five six four six five four zero nine four zero zero zero zero zero zero nine eight nine seven five three five zero nine one nine three nine six eight two four zero eight one seven three zero one five five zero six six eight zero nine four eight eight three five nine five nine six six five five seven zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals(new BigDecimal("5.1234641238794421E+61315"),
                NumberStringUtility.numberPhraseToNumber("fifty one viginmilliaquadringenseptentrigintillion two hundred thirty four viginmilliaquadringensextrigintillion six hundred forty one viginmilliaquadringenquintrigintillion two hundred thirty eight viginmilliaquadringenquattuortrigintillion seven hundred ninety four viginmilliaquadringentretrigintillion four hundred twenty one viginmilliaquadringenduotrigintillion"));
        
        //numbers
        Assert.assertEquals(new BigDecimal("19"), NumberStringUtility.numberPhraseToNumber("19"));
        Assert.assertEquals(new BigDecimal("99"), NumberStringUtility.numberPhraseToNumber("99"));
        Assert.assertEquals(new BigDecimal("999"), NumberStringUtility.numberPhraseToNumber("999"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 fifteen"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 15"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 and fifteen"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 and ten and 5"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber(" 500 and ten and 5 "));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 and 15"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 10 5"));
        Assert.assertEquals(new BigDecimal("515"), NumberStringUtility.numberPhraseToNumber("500 and 10 and 5"));
        Assert.assertEquals(new BigDecimal("199486000000821"),
                NumberStringUtility.numberPhraseToNumber("199486000000821"));
        Assert.assertEquals(new BigDecimal("3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("3.465874122E+54"));
        Assert.assertEquals(new BigDecimal("3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("3465874122000000000000000000000000000000000000000000000"));
        Assert.assertEquals(new BigDecimal("1.5133259974635648943123E+117"),
                NumberStringUtility.numberPhraseToNumber("1.5133259974635648943123E+117"));
        Assert.assertEquals(new BigDecimal("1.5133259974635648943123E+117"),
                NumberStringUtility.numberPhraseToNumber("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals(new BigDecimal("8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("8.451997463E+307"));
        Assert.assertEquals(new BigDecimal("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"),
                NumberStringUtility.numberPhraseToNumber("1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"));
        Assert.assertEquals(new BigDecimal("-999"), NumberStringUtility.numberPhraseToNumber("negative 999"));
        Assert.assertEquals(new BigDecimal("-999"), NumberStringUtility.numberPhraseToNumber("-999"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("negative 500 fifteen"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("negative 500 and fifteen"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 fifteen"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 15"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 and fifteen"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 and ten and 5"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("- 500 and ten and 5 "));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 and 15"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 10 5"));
        Assert.assertEquals(new BigDecimal("-515"), NumberStringUtility.numberPhraseToNumber("-500 and 10 and 5"));
        Assert.assertEquals(new BigDecimal("-199486000000821"),
                NumberStringUtility.numberPhraseToNumber("-199486000000821"));
        Assert.assertEquals(new BigDecimal("-3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("-3.465874122E+54"));
        Assert.assertEquals(new BigDecimal("-3.465874122E+54"),
                NumberStringUtility.numberPhraseToNumber("-3465874122000000000000000000000000000000000000000000000"));
        Assert.assertEquals(new BigDecimal("-1.5133259974635648943123E+117"),
                NumberStringUtility.numberPhraseToNumber("-1.5133259974635648943123E+117"));
        Assert.assertEquals(new BigDecimal("-1.5133259974635648943123E+117"),
                NumberStringUtility.numberPhraseToNumber("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
        Assert.assertEquals(new BigDecimal("-8.451997463E+307"),
                NumberStringUtility.numberPhraseToNumber("-8.451997463E+307"));
        Assert.assertEquals(new BigDecimal("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"),
                NumberStringUtility.numberPhraseToNumber("-1513325997463564894312300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000967.1965001845461"));
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber("0.0"));
        Assert.assertEquals(new BigDecimal("0.1"), NumberStringUtility.numberPhraseToNumber("0.1"));
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber(".0"));
        Assert.assertEquals(new BigDecimal("0.1"), NumberStringUtility.numberPhraseToNumber(".1"));
        Assert.assertEquals(new BigDecimal("776.41"), NumberStringUtility.numberPhraseToNumber("776.41"));
        Assert.assertEquals(new BigDecimal("0.000000000000000123456789"),
                NumberStringUtility.numberPhraseToNumber("0.000000000000000123456789"));
        Assert.assertEquals(new BigDecimal("0.000000000000000123456789"),
                NumberStringUtility.numberPhraseToNumber(".000000000000000123456789"));
        Assert.assertEquals(new BigDecimal("1.23456789E-16"),
                NumberStringUtility.numberPhraseToNumber("1.23456789E-16"));
        Assert.assertEquals(new BigDecimal("-9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("-9875116.000000167"));
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829"),
                NumberStringUtility.numberPhraseToNumber("5967945689794436877198887828689582168366902795322725858829"));
        Assert.assertEquals(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber(".54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"),
                NumberStringUtility.numberPhraseToNumber("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001"));
        Assert.assertEquals(new BigDecimal("5.1234641238794421E61315"),
                NumberStringUtility.numberPhraseToNumber("5.1234641238794421E61315"));
        Assert.assertEquals(new BigDecimal("1E+845612345"),
                NumberStringUtility.numberPhraseToNumber("1E845612345"));
        Assert.assertEquals(new BigDecimal("1E-845612345"),
                NumberStringUtility.numberPhraseToNumber("1E-845612345"));
        Assert.assertEquals(new BigDecimal("8.45132198830763E+400654231"),
                NumberStringUtility.numberPhraseToNumber("8.45132198830763E400654231"));
        Assert.assertEquals(new BigDecimal("-8.45132198830763E+400654231"),
                NumberStringUtility.numberPhraseToNumber("-8.45132198830763E400654231"));
        
        //precision
        Assert.assertEquals(new BigDecimal("1000000000000000"),
                NumberStringUtility.numberPhraseToNumber("one quadrillion"));
        Assert.assertEquals(new BigDecimal("1E+16"),
                NumberStringUtility.numberPhraseToNumber("ten quadrillion"));
        Assert.assertEquals(new BigDecimal("10000000000000001"),
                NumberStringUtility.numberPhraseToNumber("ten quadrillion one"));
        Assert.assertEquals(new BigDecimal("5.5E+19"),
                NumberStringUtility.numberPhraseToNumber("fifty five quintillion"));
        Assert.assertEquals(new BigDecimal("5.586322916E+19"),
                NumberStringUtility.numberPhraseToNumber("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty billion"));
        Assert.assertEquals(new BigDecimal("55863229161000000000"),
                NumberStringUtility.numberPhraseToNumber("fifty five quintillion eight hundred sixty three quadrillion two hundred twenty nine trillion one hundred sixty one billion"));
        Assert.assertEquals(new BigDecimal("50000000001000000000"),
                NumberStringUtility.numberPhraseToNumber("fifty quintillion one billion"));
        Assert.assertEquals(new BigDecimal("0.000000000000001"),
                NumberStringUtility.numberPhraseToNumber("one quadrillionth"));
        Assert.assertEquals(new BigDecimal("1E-16"),
                NumberStringUtility.numberPhraseToNumber("one hundred quintillionths"));
        Assert.assertEquals(new BigDecimal("1.0000000000000001"),
                NumberStringUtility.numberPhraseToNumber("one and one hundred quintillionths"));
        Assert.assertEquals(new BigDecimal("5.5E-15"),
                NumberStringUtility.numberPhraseToNumber("five quadrillionths five hundred quintillionths"));
        Assert.assertEquals(new BigDecimal("5.586322916E-11"),
                NumberStringUtility.numberPhraseToNumber("fifty five trillionths eight hundred sixty three quadrillionths two hundred twenty nine quintillionths one hundred sixty sextillionths"));
        Assert.assertEquals(new BigDecimal("0.00000000055863229161"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero zero zero zero five five eight six three two two nine one six one"));
        Assert.assertEquals(new BigDecimal("0.00000000050000000001"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero zero zero zero five zero zero zero zero zero zero zero zero zero one"));
        Assert.assertEquals(new BigDecimal("6E+63"),
                NumberStringUtility.numberPhraseToNumber("six vigintillion"));
        Assert.assertEquals(new BigDecimal("6E+64"),
                NumberStringUtility.numberPhraseToNumber("sixty vigintillion"));
        Assert.assertEquals(new BigDecimal("6.0000000000000000000000000000000000000000000000000000002E+64"),
                NumberStringUtility.numberPhraseToNumber("sixty vigintillion two billion"));
        Assert.assertEquals(new BigDecimal("60000000000000000000000000000000000000000000000000000000000000002"),
                NumberStringUtility.numberPhraseToNumber("sixty vigintillion two"));
        Assert.assertEquals(new BigDecimal("6E-63"),
                NumberStringUtility.numberPhraseToNumber("six vigintillionths"));
        Assert.assertEquals(new BigDecimal("6E-64"),
                NumberStringUtility.numberPhraseToNumber("six hundred unvigintillionths"));
        Assert.assertEquals(new BigDecimal("0.6000000000000000000000000000000000000000000000000000000000000002"),
                NumberStringUtility.numberPhraseToNumber("six tenths two hundred unvigintillionths"));
        Assert.assertEquals(new BigDecimal("0.000000000000000000000000000000060000000000000000000000000000002"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero six zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero two"));
        Assert.assertEquals(new BigDecimal("6.0000000000000000000000000000002E-33"),
                NumberStringUtility.numberPhraseToNumber("six decillionths two hundred unvigintillionths"));
        Assert.assertEquals(new BigDecimal("6.00000000000000000000000000000002E-33"),
                NumberStringUtility.numberPhraseToNumber("six decillionths twenty unvigintillionths"));
        Assert.assertEquals(new BigDecimal("6.000000000000000000000000000000002E-34"),
                NumberStringUtility.numberPhraseToNumber("six hundred undecillionths two hundred duovigintillionths"));
        Assert.assertEquals(new BigDecimal("9E+1023"),
                NumberStringUtility.numberPhraseToNumber("nine trecenquadragintillion"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberPhraseToNumber("nine trecenquadragintillion one"));
        Assert.assertEquals(new BigDecimal("9E+1024"),
                NumberStringUtility.numberPhraseToNumber("ninety trecenquadragintillion one"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberPhraseToNumber("ninety trecenquadragintillion ten"));
        Assert.assertEquals(new BigDecimal("9E+1032"),
                NumberStringUtility.numberPhraseToNumber("nine trecentrequadragintillion eight hundred thirty four million six hundred eighteen thousand ninety two"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberPhraseToNumber("nine trecentrequadragintillion one billion eight hundred thirty four million six hundred eighteen thousand ninety two"));
        Assert.assertEquals(new BigDecimal("9E-1023"),
                NumberStringUtility.numberPhraseToNumber("nine trecenquadragintillionths"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberPhraseToNumber("nine tenths one hundred trecenunquadragintillionths"));
        Assert.assertEquals(new BigDecimal("0.9"),
                NumberStringUtility.numberPhraseToNumber("nine tenths ten trecenunquadragintillionths"));
        Assert.assertEquals(new BigDecimal("0.9"),
                NumberStringUtility.numberPhraseToNumber("nine tenths eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths"));
        Assert.assertEquals(new BigDecimal
                NumberStringUtility.numberPhraseToNumber("nine tenths one hundred eighty three trecenunquadragintillionths four hundred sixty one trecenduoquadragintillionths eight hundred nine trecentrequadragintillionths two hundred trecenquattuorquadragintillionths"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1033"),
                NumberStringUtility.numberPhraseToNumber("thirty five trecentrequadragintillion six hundred eighty four trecenduoquadragintillion five hundred forty four trecenunquadragintillion seventy five trecenquadragintillion seven trecennovemtrigintillion eight hundred eighty nine trecenoctotrigintillion three hundred fifty two trecenseptentrigintillion eight hundred twelve trecensextrigintillion seven hundred thirty seven trecenquintrigintillion three hundred ninety nine trecenquattuortrigintillion five hundred eleven trecentretrigintillion nine hundred nine trecenduotrigintillion one hundred fifteen trecenuntrigintillion three hundred thirty three trecentrigintillion one hundred two trecennovemvigintillion three hundred eighty six trecenoctovigintillion three hundred twenty six trecenseptenvigintillion eight hundred ninety four trecensexvigintillion seven hundred twenty trecenquinvigintillion six hundred thirty trecenquattuorvigintillion five hundred thirty four trecentrevigintillion four hundred ninety eight trecenduovigintillion three hundred twenty trecenunvigintillion eight hundred eighty two trecenvigintillion one hundred fifteen trecennovemdecillion five hundred eighty six trecenoctodecillion one hundred eighty six trecenseptendecillion two hundred fifty trecensexdecillion eight hundred fifty two trecenquindecillion one hundred six trecenquattuordecillion two hundred twenty nine trecentredecillion five hundred seventy eight trecenduodecillion eight hundred forty two trecenundecillion eight hundred forty seven trecendecillion seven hundred ninety one trecennovemtillion three hundred twenty six trecenoctotillion one hundred seventy two trecensextillion four hundred sixty two trecenquintillion one hundred fifty two trecenquattuortillion two hundred thirty seven trecentretillion three trecenduotillion nine hundred forty one trecenuntillion six hundred thirty six trecentillion seven hundred seventy seven duocennovemnonagintillion one hundred sixty two duocenoctononagintillion seven hundred forty seven duocenseptennonagintillion nine hundred ninety seven duocensexnonagintillion eight hundred seventy seven duocenquinnonagintillion six hundred forty two duocenquattuornonagintillion two hundred sixty two duocentrenonagintillion three hundred eleven duocenduononagintillion two hundred eight duocenunnonagintillion nine hundred nineteen duocennonagintillion one hundred nineteen duocennovemoctogintillion five hundred thirteen duocenoctooctogintillion three hundred eighty three duocenseptenoctogintillion five hundred forty one duocensexoctogintillion one hundred fifty two duocenquinoctogintillion five hundred fifty seven duocenquattuoroctogintillion one hundred fifty one duocentreoctogintillion two hundred three duocenduooctogintillion six hundred forty nine duocenunoctogintillion two hundred seven duocenoctogintillion one hundred fifty duocennovemseptuagintillion two hundred fifty one duocenoctoseptuagintillion four hundred sixty four duocenseptenseptuagintillion nine hundred ninety eight duocensexseptuagintillion four hundred twenty six duocenquinseptuagintillion sixty one duocenquattuorseptuagintillion six hundred ninety six duocentreseptuagintillion six hundred seventy four duocenduoseptuagintillion seven hundred seventy eight duocenunseptuagintillion three hundred seventy duocenseptuagintillion sixty one duocennovemsexagintillion seven hundred thirty five duocenoctosexagintillion one duocenseptensexagintillion two hundred thirty three duocensexsexagintillion four hundred eighty seven duocenquinsexagintillion three hundred forty five duocenquattuorsexagintillion nine hundred forty six duocentresexagintillion two hundred fifty seven duocenduosexagintillion eight hundred sixteen duocenunsexagintillion seven hundred sixty one duocensexagintillion eight hundred seventy nine duocennovemquinquagintillion seven hundred twenty one duocenoctoquinquagintillion seven hundred forty three duocenseptenquinquagintillion five hundred twenty two duocensexquinquagintillion five hundred seventy seven duocenquinquinquagintillion nine hundred fifty five duocenquattuorquinquagintillion nine hundred sixty two duocentrequinquagintillion six hundred fifteen duocenduoquinquagintillion two hundred fifty duocenunquinquagintillion one hundred one duocenquinquagintillion two hundred sixteen duocennovemquadragintillion one hundred seventy eight duocenoctoquadragintillion three hundred seventeen duocenseptenquadragintillion four hundred seventy three duocensexquadragintillion twenty six duocenquinquadragintillion eight hundred sixty seven duocenquattuorquadragintillion three hundred sixty two duocentrequadragintillion two hundred three duocenduoquadragintillion two hundred forty nine duocenunquadragintillion three hundred forty six duocenquadragintillion seven hundred seventy duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion two hundred sixteen duocenseptentrigintillion seven hundred thirty two duocensextrigintillion eight hundred ten duocenquintrigintillion three hundred eighty five duocenquattuortrigintillion four hundred eighty five duocentretrigintillion one hundred eighty duocenduotrigintillion four hundred ninety three duocenuntrigintillion three hundred eight duocentrigintillion seven hundred forty duocennovemvigintillion four hundred seventy seven duocenoctovigintillion three hundred eighty two duocenseptenvigintillion six hundred sixteen duocensexvigintillion four hundred sixty duocenquinvigintillion sixty two duocenquattuorvigintillion five hundred seventy eight duocentrevigintillion six hundred seventy six duocenduovigintillion five hundred thirty nine duocenunvigintillion three hundred twenty one duocenvigintillion thirty six duocennovemdecillion nine hundred five duocenoctodecillion five hundred twenty five duocenseptendecillion five hundred thirteen duocensexdecillion three hundred thirty six duocenquindecillion two hundred ninety four duocenquattuordecillion seven hundred eighty nine duocentredecillion two hundred ninety three duocenduodecillion two hundred thirty six duocenundecillion two hundred twenty eight duocendecillion three hundred sixty one duocennovemtillion thirty four duocenoctotillion one hundred eighty three duocenseptentillion eight hundred ninety three duocensextillion nine hundred thirty four duocenquintillion six hundred fifty duocenquattuortillion five hundred ninety duocentretillion five hundred sixty three duocenduotillion two hundred eighty duocenuntillion six hundred fourteen duocentillion nine hundred twenty eight cennovemnonagintillion eight hundred twenty eight cenoctononagintillion one hundred ninety nine censeptennonagintillion thirty seven censexnonagintillion seven cenquinnonagintillion seven hundred fifty eight cenquattuornonagintillion seven hundred twenty six centrenonagintillion nine hundred eighty cenduononagintillion three hundred eighty six cenunnonagintillion seven hundred seventeen cennonagintillion forty cennovemoctogintillion one hundred sixty nine cenoctooctogintillion nine hundred twenty eight censeptenoctogintillion seventy eight censexoctogintillion seven hundred fifty one cenquinoctogintillion nine hundred fifty nine cenquattuoroctogintillion one hundred fifteen centreoctogintillion four hundred eight cenduooctogintillion eight hundred thirty three cenunoctogintillion twenty five cenoctogintillion four hundred ninety cennovemseptuagintillion five hundred forty nine cenoctoseptuagintillion four hundred eighty two censeptenseptuagintillion seven hundred nine censexseptuagintillion one hundred ninety three cenquinseptuagintillion two hundred ninety eight cenquattuorseptuagintillion four hundred eleven centreseptuagintillion four hundred ninety two cenduoseptuagintillion one hundred one cenunseptuagintillion five hundred twenty one censeptuagintillion six hundred cennovemsexagintillion two hundred twenty two cenoctosexagintillion five hundred thirty nine censeptensexagintillion six hundred seven censexsexagintillion nine hundred sixteen cenquinsexagintillion seven hundred eleven cenquattuorsexagintillion seven hundred forty seven centresexagintillion four hundred sixty five cenduosexagintillion two hundred fifty eight cenunsexagintillion one hundred eighty nine censexagintillion three hundred sixty one cennovemquinquagintillion one hundred sixty four cenoctoquinquagintillion nine hundred seventy three censeptenquinquagintillion six hundred forty one censexquinquagintillion four hundred ninety four cenquinquinquagintillion eight hundred cenquattuorquinquagintillion three hundred sixty five centrequinquagintillion sixty five cenduoquinquagintillion four hundred eighteen cenunquinquagintillion eight hundred fifty eight cenquinquagintillion one hundred seventy eight cennovemquadragintillion three hundred ninety nine cenoctoquadragintillion eight hundred fifty seven censeptenquadragintillion eight hundred ninety three censexquadragintillion three hundred forty three cenquinquadragintillion three hundred eight cenquattuorquadragintillion six hundred seventy four centrequadragintillion eighty one cenduoquadragintillion six hundred eighty five cenunquadragintillion five hundred fifty one cenquadragintillion five hundred ninety seven cennovemtrigintillion seven hundred twenty six cenoctotrigintillion five hundred seventy four censeptentrigintillion four hundred forty one censextrigintillion three hundred forty eight cenquintrigintillion seven hundred fifty five cenquattuortrigintillion six hundred seventy three centretrigintillion three hundred forty five cenduotrigintillion eight hundred seventy one cenuntrigintillion one hundred sixty three centrigintillion five hundred fifty five cennovemvigintillion eight hundred forty nine cenoctovigintillion eight hundred twenty five censeptenvigintillion four hundred forty four censexvigintillion seven hundred twenty cenquinvigintillion five hundred ten cenquattuorvigintillion one hundred two centrevigintillion eight hundred thirteen cenduovigintillion two hundred fifteen cenunvigintillion five hundred twenty eight cenvigintillion seven hundred sixty nine cennovemdecillion seven hundred fifty six cenoctodecillion eleven censeptendecillion four hundred thirty eight censexdecillion four hundred twelve cenquindecillion fifty cenquattuordecillion nine hundred three centredecillion nine hundred thirty four cenduodecillion two hundred eighty six cenundecillion eight hundred twenty three cendecillion seven hundred nine cennovemtillion one cenoctotillion seven hundred sixty three censeptentillion nine hundred forty four censextillion nine hundred ninety cenquintillion nine hundred sixty five cenquattuortillion six hundred thirty nine centretillion nine hundred ninety one cenduotillion three hundred sixty three cenuntillion five hundred nine centillion five hundred thirty two novemnonagintillion six hundred forty three octononagintillion sixty one septennonagintillion six hundred forty sexnonagintillion eight hundred seventy five quinnonagintillion four hundred twenty one quattuornonagintillion sixty two trenonagintillion six hundred thirty duononagintillion six hundred eighty four unnonagintillion eight hundred fifty one nonagintillion seven hundred eighty novemoctogintillion eight hundred nine octooctogintillion eight hundred twenty two septenoctogintillion five hundred nineteen sexoctogintillion six hundred fifty three quinoctogintillion four hundred ninety four quattuoroctogintillion seventy six treoctogintillion six hundred seventy eight duooctogintillion nine hundred seven unoctogintillion eight hundred octogintillion four hundred thirty seven novemseptuagintillion two hundred eighty five octoseptuagintillion four hundred seventy four septenseptuagintillion four hundred sexseptuagintillion eight hundred twenty eight quinseptuagintillion eight hundred seventy seven quattuorseptuagintillion three hundred eighty two treseptuagintillion four hundred sixty one duoseptuagintillion seventy one unseptuagintillion seven hundred forty four septuagintillion one hundred ninety nine novemsexagintillion two hundred twenty five octosexagintillion seven hundred thirty one septensexagintillion eight hundred eighty nine sexsexagintillion one hundred eighty nine quinsexagintillion two hundred seventy two quattuorsexagintillion five hundred sixty three tresexagintillion two hundred eighty one duosexagintillion four hundred ninety three unsexagintillion fifty four sexagintillion one hundred eight novemquinquagintillion nine hundred twenty six octoquinquagintillion five hundred five septenquinquagintillion two hundred seventy seven sexquinquagintillion nine hundred forty three quinquinquagintillion six hundred twenty six quattuorquinquagintillion seven hundred thirty three trequinquagintillion four hundred fifty six duoquinquagintillion one hundred sixty nine unquinquagintillion four hundred eighty six quinquagintillion six hundred nine novemquadragintillion seven hundred ninety four octoquadragintillion two hundred fifty four septenquadragintillion six hundred sixty eight sexquadragintillion four hundred eighteen quinquadragintillion nine hundred twenty six quattuorquadragintillion eight hundred forty six trequadragintillion seven hundred sixty six duoquadragintillion five hundred sixty five unquadragintillion thirty eight quadragintillion two hundred sixteen novemtrigintillion five hundred eighty two octotrigintillion one hundred twenty six septentrigintillion eight hundred ninety sextrigintillion five hundred fifty six quintrigintillion eight hundred forty four quattuortrigintillion one hundred eighty six tretrigintillion twenty one duotrigintillion six hundred ninety untrigintillion eight hundred forty six trigintillion eight hundred fifty novemvigintillion eight hundred ninety seven octovigintillion six hundred seventeen septenvigintillion seven hundred thirty four sexvigintillion five hundred fifty seven quinvigintillion three hundred seventy quattuorvigintillion nine hundred forty five trevigintillion two hundred seventy duovigintillion nine hundred eighty seven unvigintillion five hundred sixteen vigintillion one hundred thirty one novemdecillion two hundred seventy six octodecillion eight hundred forty one septendecillion sixteen sexdecillion four hundred eighty five quindecillion six hundred eighty eight quattuordecillion one hundred twenty nine tredecillion nine hundred sixty eight duodecillion twenty four undecillion six hundred forty seven decillion one hundred forty seven nonillion four hundred forty octillion twelve septillion nine hundred nineteen sextillion nine hundred fifty five quintillion fifty seven quadrillion eight hundred ninety one trillion eight hundred eighteen billion four hundred nineteen million three hundred eighty four thousand six hundred one"));
        Assert.assertEquals(new BigDecimal("35684.54407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("thirty five thousand six hundred eighty four point five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("three point five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616.948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("three duocenunnonagintillion five hundred sixty eight duocennonagintillion four hundred fifty four duocennovemoctogintillion four hundred seven duocenoctooctogintillion five hundred duocenseptenoctogintillion seven hundred eighty eight duocensexoctogintillion nine hundred thirty five duocenquinoctogintillion two hundred eighty one duocenquattuoroctogintillion two hundred seventy three duocentreoctogintillion seven hundred thirty nine duocenduooctogintillion nine hundred fifty one duocenunoctogintillion one hundred ninety duocenoctogintillion nine hundred eleven duocennovemseptuagintillion five hundred thirty three duocenoctoseptuagintillion three hundred ten duocenseptenseptuagintillion two hundred thirty eight duocensexseptuagintillion six hundred thirty two duocenquinseptuagintillion six hundred eighty nine duocenquattuorseptuagintillion four hundred seventy two duocentreseptuagintillion sixty three duocenduoseptuagintillion fifty three duocenunseptuagintillion four hundred forty nine duocenseptuagintillion eight hundred thirty two duocennovemsexagintillion eighty eight duocenoctosexagintillion two hundred eleven duocenseptensexagintillion five hundred fifty eight duocensexsexagintillion six hundred eighteen duocenquinsexagintillion six hundred twenty five duocenquattuorsexagintillion eighty five duocentresexagintillion two hundred ten duocenduosexagintillion six hundred twenty two duocenunsexagintillion nine hundred fifty seven duocensexagintillion eight hundred eighty four duocennovemquinquagintillion two hundred eighty four duocenoctoquinquagintillion seven hundred seventy nine duocenseptenquinquagintillion one hundred thirty two duocensexquinquagintillion six hundred duocenquinquinquagintillion seventeen duocenquattuorquinquagintillion two hundred forty six duocentrequinquagintillion two hundred fifteen duocenduoquinquagintillion two hundred twenty three duocenunquinquagintillion seven hundred duocenquinquagintillion three hundred ninety four duocennovemquadragintillion one hundred sixty three duocenoctoquadragintillion six hundred seventy seven duocenseptenquadragintillion seven hundred sixteen duocensexquadragintillion two hundred seventy four duocenquinquadragintillion seven hundred ninety nine duocenquattuorquadragintillion seven hundred eighty seven duocentrequadragintillion seven hundred sixty four duocenduoquadragintillion two hundred twenty six duocenunquadragintillion two hundred thirty one duocenquadragintillion one hundred twenty duocennovemtrigintillion eight hundred ninety one duocenoctotrigintillion nine hundred eleven duocenseptentrigintillion nine hundred fifty one duocensextrigintillion three hundred thirty eight duocenquintrigintillion three hundred fifty four duocenquattuortrigintillion one hundred fifteen duocentretrigintillion two hundred fifty five duocenduotrigintillion seven hundred fifteen duocenuntrigintillion one hundred twenty duocentrigintillion three hundred sixty four duocennovemvigintillion nine hundred twenty duocenoctovigintillion seven hundred fifteen duocenseptenvigintillion twenty five duocensexvigintillion one hundred forty six duocenquinvigintillion four hundred ninety nine duocenquattuorvigintillion eight hundred forty two duocentrevigintillion six hundred six duocenduovigintillion one hundred sixty nine duocenunvigintillion six hundred sixty seven duocenvigintillion four hundred seventy seven duocennovemdecillion eight hundred thirty seven duocenoctodecillion six duocenseptendecillion one hundred seventy three duocensexdecillion five hundred duocenquindecillion one hundred twenty three duocenquattuordecillion three hundred forty eight duocentredecillion seven hundred thirty four duocenduodecillion five hundred ninety four duocenundecillion six hundred twenty five duocendecillion seven hundred eighty one duocennovemtillion six hundred seventy six duocenoctotillion one hundred eighty seven duocenseptentillion nine hundred seventy two duocensextillion one hundred seventy four duocenquintillion three hundred fifty two duocenquattuortillion two hundred fifty seven duocentretillion seven hundred ninety five duocenduotillion five hundred ninety six duocenuntillion two hundred sixty one duocentillion five hundred twenty five cennovemnonagintillion ten cenoctononagintillion one hundred twenty one censeptennonagintillion six hundred seventeen censexnonagintillion eight hundred thirty one cenquinnonagintillion seven hundred forty seven cenquattuornonagintillion three hundred two centrenonagintillion six hundred eighty six cenduononagintillion seven hundred thirty six cenunnonagintillion two hundred twenty cennonagintillion three hundred twenty four cennovemoctogintillion nine hundred thirty four cenoctooctogintillion six hundred seventy seven censeptenoctogintillion thirty two censexoctogintillion four hundred twenty one cenquinoctogintillion six hundred seventy three cenquattuoroctogintillion two hundred eighty one centreoctogintillion thirty eight cenduooctogintillion five hundred forty eight cenunoctogintillion five hundred eighteen cenoctogintillion forty nine cennovemseptuagintillion three hundred thirty cenoctoseptuagintillion eight hundred seventy four censeptenseptuagintillion forty seven censexseptuagintillion seven hundred thirty eight cenquinseptuagintillion two hundred sixty one cenquattuorseptuagintillion six hundred forty six centreseptuagintillion six cenduoseptuagintillion two hundred fifty seven cenunseptuagintillion eight hundred sixty seven censeptuagintillion six hundred fifty three cennovemsexagintillion nine hundred thirty two cenoctosexagintillion one hundred three censeptensexagintillion six hundred ninety censexsexagintillion five hundred fifty two cenquinsexagintillion five hundred fifty one cenquattuorsexagintillion three hundred thirty three centresexagintillion six hundred twenty nine cenduosexagintillion four hundred seventy eight cenunsexagintillion nine hundred twenty nine censexagintillion three hundred twenty three cennovemquinquagintillion six hundred twenty two cenoctoquinquagintillion eight hundred thirty six censeptenquinquagintillion one hundred three censexquinquagintillion four hundred eighteen cenquinquinquagintillion three hundred eighty nine cenquattuorquinquagintillion three hundred ninety three centrequinquagintillion four hundred sixty five cenduoquinquagintillion fifty nine cenunquinquagintillion fifty six cenquinquagintillion three hundred twenty eight cennovemquadragintillion sixty one cenoctoquadragintillion four hundred ninety two censeptenquadragintillion eight hundred eighty two censexquadragintillion eight hundred nineteen cenquinquadragintillion nine hundred three cenquattuorquadragintillion seven hundred centrequadragintillion seven hundred seventy five cenduoquadragintillion eight hundred seventy two cenunquadragintillion six hundred ninety eight cenquadragintillion thirty eight cennovemtrigintillion six hundred seventy one cenoctotrigintillion seven hundred four censeptentrigintillion sixteen censextrigintillion nine hundred ninety two cenquintrigintillion eight hundred seven cenquattuortrigintillion eight hundred seventy five centretrigintillion one hundred ninety five cenduotrigintillion nine hundred eleven cenuntrigintillion five hundred forty centrigintillion eight hundred eighty three cennovemvigintillion three hundred two cenoctovigintillion five hundred forty nine censeptenvigintillion fifty four censexvigintillion nine hundred forty eight cenquinvigintillion two hundred seventy cenquattuorvigintillion nine hundred nineteen centrevigintillion three hundred twenty nine cenduovigintillion eight hundred forty one cenunvigintillion one hundred forty nine cenvigintillion two hundred ten cennovemdecillion one hundred fifty two cenoctodecillion one hundred sixty censeptendecillion twenty two censexdecillion two hundred fifty three cenquindecillion nine hundred sixty cenquattuordecillion seven hundred ninety one centredecillion six hundred seventy one cenduodecillion one hundred seventy four cenundecillion seven hundred forty six cendecillion five hundred twenty five cennovemtillion eight hundred eighteen cenoctotillion nine hundred thirty six censeptentillion one hundred sixteen censextillion four hundred ninety seven cenquintillion three hundred sixty four cenquattuortillion one hundred forty nine centretillion four hundred eighty cenduotillion thirty six cenuntillion five hundred six centillion five hundred forty one novemnonagintillion eight hundred eighty five octononagintillion eight hundred seventeen septennonagintillion eight hundred thirty nine sexnonagintillion nine hundred eighty five quinnonagintillion seven hundred eighty nine quattuornonagintillion three hundred thirty four trenonagintillion three hundred thirty duononagintillion eight hundred sixty seven unnonagintillion four hundred eight nonagintillion one hundred sixty eight novemoctogintillion five hundred fifty five octooctogintillion one hundred fifty nine septenoctogintillion seven hundred seventy two sexoctogintillion six hundred fifty seven quinoctogintillion four hundred forty four quattuoroctogintillion one hundred thirty four treoctogintillion eight hundred seventy five duooctogintillion five hundred sixty seven unoctogintillion three hundred thirty four octogintillion five hundred eighty seven novemseptuagintillion one hundred sixteen octoseptuagintillion three hundred fifty five septenseptuagintillion five hundred eighty four sexseptuagintillion nine hundred eighty two quinseptuagintillion five hundred forty four quattuorseptuagintillion four hundred seventy two treseptuagintillion fifty one duoseptuagintillion ten unseptuagintillion two hundred eighty one septuagintillion three hundred twenty one novemsexagintillion five hundred fifty two octosexagintillion eight hundred seventy six septensexagintillion nine hundred seventy five sexsexagintillion six hundred one quinsexagintillion one hundred forty three quattuorsexagintillion eight hundred forty one tresexagintillion two hundred five duosexagintillion ninety unsexagintillion three hundred ninety three sexagintillion four hundred twenty eight novemquinquagintillion six hundred eighty two octoquinquagintillion three hundred seventy septenquinquagintillion nine hundred sexquinquagintillion one hundred seventy six quinquinquagintillion three hundred ninety four quattuorquinquagintillion four hundred ninety nine trequinquagintillion ninety six duoquinquagintillion five hundred sixty three unquinquagintillion nine hundred ninety nine quinquagintillion one hundred thirty six novemquadragintillion three hundred fifty octoquadragintillion nine hundred fifty three septenquadragintillion two hundred sixty four sexquadragintillion three hundred six quinquadragintillion one hundred sixty four quattuorquadragintillion eighty seven trequadragintillion five hundred forty two duoquadragintillion one hundred six unquadragintillion two hundred sixty three quadragintillion sixty eight novemtrigintillion four hundred eighty five octotrigintillion one hundred seventy eight septentrigintillion eighty sextrigintillion nine hundred eighty two quintrigintillion two hundred fifty one quattuortrigintillion nine hundred sixty five tretrigintillion three hundred forty nine duotrigintillion four hundred seven untrigintillion six hundred sixty seven trigintillion eight hundred ninety novemvigintillion seven hundred eighty octovigintillion forty three septenvigintillion seven hundred twenty eight sexvigintillion five hundred forty seven quinvigintillion four hundred forty quattuorvigintillion eighty two trevigintillion eight hundred eighty seven duovigintillion seven hundred thirty eight unvigintillion two hundred forty six vigintillion one hundred seven novemdecillion one hundred seventy four octodecillion four hundred nineteen septendecillion nine hundred twenty two sexdecillion five hundred seventy three quindecillion one hundred eighty eight quattuordecillion nine hundred eighteen tredecillion nine hundred twenty seven duodecillion two hundred fifty six undecillion three hundred twenty eight decillion one hundred forty nine nonillion three hundred five octillion four hundred ten septillion eight hundred ninety two sextillion six hundred fifty quintillion five hundred twenty seven quadrillion seven hundred ninety four trillion three hundred sixty two billion six hundred seventy three million three hundred forty five thousand six hundred sixteen point nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("three trecenquadragintillion five hundred sixty eight trecennovemtrigintillion four hundred fifty four trecenoctotrigintillion four hundred seven trecenseptentrigintillion five hundred trecensextrigintillion seven hundred eighty eight trecenquintrigintillion nine hundred thirty five trecenquattuortrigintillion two hundred eighty one trecentretrigintillion two hundred seventy three trecenduotrigintillion seven hundred thirty nine trecenuntrigintillion nine hundred fifty one trecentrigintillion one hundred ninety trecennovemvigintillion nine hundred eleven trecenoctovigintillion five hundred thirty three trecenseptenvigintillion three hundred ten trecensexvigintillion two hundred thirty eight trecenquinvigintillion six hundred thirty two trecenquattuorvigintillion six hundred eighty nine trecentrevigintillion four hundred seventy two trecenduovigintillion sixty three trecenunvigintillion fifty three trecenvigintillion four hundred forty nine trecennovemdecillion eight hundred thirty two trecenoctodecillion eighty eight trecenseptendecillion two hundred eleven trecensexdecillion five hundred fifty eight trecenquindecillion six hundred eighteen trecenquattuordecillion six hundred twenty five trecentredecillion eighty five trecenduodecillion two hundred ten trecenundecillion six hundred twenty two trecendecillion nine hundred fifty seven trecennovemtillion eight hundred eighty four trecenoctotillion two hundred eighty four trecenseptentillion seven hundred seventy nine trecensextillion one hundred thirty two trecenquintillion six hundred trecenquattuortillion seventeen trecentretillion two hundred forty six trecenduotillion two hundred fifteen trecenuntillion two hundred twenty three trecentillion seven hundred duocennovemnonagintillion three hundred ninety four duocenoctononagintillion one hundred sixty three duocenseptennonagintillion six hundred seventy seven duocensexnonagintillion seven hundred sixteen duocenquinnonagintillion two hundred seventy four duocenquattuornonagintillion seven hundred ninety nine duocentrenonagintillion seven hundred eighty seven duocenduononagintillion seven hundred sixty four duocenunnonagintillion two hundred twenty six duocennonagintillion two hundred thirty one duocennovemoctogintillion one hundred twenty duocenoctooctogintillion eight hundred ninety one duocenseptenoctogintillion nine hundred eleven duocensexoctogintillion nine hundred fifty one duocenquinoctogintillion three hundred thirty eight duocenquattuoroctogintillion three hundred fifty four duocentreoctogintillion one hundred fifteen duocenduooctogintillion two hundred fifty five duocenunoctogintillion seven hundred fifteen duocenoctogintillion one hundred twenty duocennovemseptuagintillion three hundred sixty four duocenoctoseptuagintillion nine hundred twenty duocenseptenseptuagintillion seven hundred fifteen duocensexseptuagintillion twenty five duocenquinseptuagintillion one hundred forty six duocenquattuorseptuagintillion four hundred ninety nine duocentreseptuagintillion eight hundred forty two duocenduoseptuagintillion six hundred six duocenunseptuagintillion one hundred sixty nine duocenseptuagintillion six hundred sixty seven duocennovemsexagintillion four hundred seventy seven duocenoctosexagintillion eight hundred thirty seven duocenseptensexagintillion six duocensexsexagintillion one hundred seventy three duocenquinsexagintillion five hundred duocenquattuorsexagintillion one hundred twenty three duocentresexagintillion three hundred forty eight duocenduosexagintillion seven hundred thirty four duocenunsexagintillion five hundred ninety four duocensexagintillion six hundred twenty five duocennovemquinquagintillion seven hundred eighty one duocenoctoquinquagintillion six hundred seventy six duocenseptenquinquagintillion one hundred eighty seven duocensexquinquagintillion nine hundred seventy two duocenquinquinquagintillion one hundred seventy four duocenquattuorquinquagintillion three hundred fifty two duocentrequinquagintillion two hundred fifty seven duocenduoquinquagintillion seven hundred ninety five duocenunquinquagintillion five hundred ninety six duocenquinquagintillion two hundred sixty one duocennovemquadragintillion five hundred twenty five duocenoctoquadragintillion ten duocenseptenquadragintillion one hundred twenty one duocensexquadragintillion six hundred seventeen duocenquinquadragintillion eight hundred thirty one duocenquattuorquadragintillion seven hundred forty seven duocentrequadragintillion three hundred two duocenduoquadragintillion six hundred eighty six duocenunquadragintillion seven hundred thirty six duocenquadragintillion two hundred twenty duocennovemtrigintillion three hundred twenty four duocenoctotrigintillion nine hundred thirty four duocenseptentrigintillion six hundred seventy seven duocensextrigintillion thirty two duocenquintrigintillion four hundred twenty one duocenquattuortrigintillion six hundred seventy three duocentretrigintillion two hundred eighty one duocenduotrigintillion thirty eight duocenuntrigintillion five hundred forty eight duocentrigintillion five hundred eighteen duocennovemvigintillion forty nine duocenoctovigintillion three hundred thirty duocenseptenvigintillion eight hundred seventy four duocensexvigintillion forty seven duocenquinvigintillion seven hundred thirty eight duocenquattuorvigintillion two hundred sixty one duocentrevigintillion six hundred forty six duocenduovigintillion six duocenunvigintillion two hundred fifty seven duocenvigintillion eight hundred sixty seven duocennovemdecillion six hundred fifty three duocenoctodecillion nine hundred thirty two duocenseptendecillion one hundred three duocensexdecillion six hundred ninety duocenquindecillion five hundred fifty two duocenquattuordecillion five hundred fifty one duocentredecillion three hundred thirty three duocenduodecillion six hundred twenty nine duocenundecillion four hundred seventy eight duocendecillion nine hundred twenty nine duocennovemtillion three hundred twenty three duocenoctotillion six hundred twenty two duocenseptentillion eight hundred thirty six duocensextillion one hundred three duocenquintillion four hundred eighteen duocenquattuortillion three hundred eighty nine duocentretillion three hundred ninety three duocenduotillion four hundred sixty five duocenuntillion fifty nine duocentillion fifty six cennovemnonagintillion three hundred twenty eight cenoctononagintillion sixty one censeptennonagintillion four hundred ninety two censexnonagintillion eight hundred eighty two cenquinnonagintillion eight hundred nineteen cenquattuornonagintillion nine hundred three centrenonagintillion seven hundred cenduononagintillion seven hundred seventy five cenunnonagintillion eight hundred seventy two cennonagintillion six hundred ninety eight cennovemoctogintillion thirty eight cenoctooctogintillion six hundred seventy one censeptenoctogintillion seven hundred four censexoctogintillion sixteen cenquinoctogintillion nine hundred ninety two cenquattuoroctogintillion eight hundred seven centreoctogintillion eight hundred seventy five cenduooctogintillion one hundred ninety five cenunoctogintillion nine hundred eleven cenoctogintillion five hundred forty cennovemseptuagintillion eight hundred eighty three cenoctoseptuagintillion three hundred two censeptenseptuagintillion five hundred forty nine censexseptuagintillion fifty four cenquinseptuagintillion nine hundred forty eight cenquattuorseptuagintillion two hundred seventy centreseptuagintillion nine hundred nineteen cenduoseptuagintillion three hundred twenty nine cenunseptuagintillion eight hundred forty one censeptuagintillion one hundred forty nine cennovemsexagintillion two hundred ten cenoctosexagintillion one hundred fifty two censeptensexagintillion one hundred sixty censexsexagintillion twenty two cenquinsexagintillion two hundred fifty three cenquattuorsexagintillion nine hundred sixty centresexagintillion seven hundred ninety one cenduosexagintillion six hundred seventy one cenunsexagintillion one hundred seventy four censexagintillion seven hundred forty six cennovemquinquagintillion five hundred twenty five cenoctoquinquagintillion eight hundred eighteen censeptenquinquagintillion nine hundred thirty six censexquinquagintillion one hundred sixteen cenquinquinquagintillion four hundred ninety seven cenquattuorquinquagintillion three hundred sixty four centrequinquagintillion one hundred forty nine cenduoquinquagintillion four hundred eighty cenunquinquagintillion thirty six cenquinquagintillion five hundred six cennovemquadragintillion five hundred forty one cenoctoquadragintillion eight hundred eighty five censeptenquadragintillion eight hundred seventeen censexquadragintillion eight hundred thirty nine cenquinquadragintillion nine hundred eighty five cenquattuorquadragintillion seven hundred eighty nine centrequadragintillion three hundred thirty four cenduoquadragintillion three hundred thirty cenunquadragintillion eight hundred sixty seven cenquadragintillion four hundred eight cennovemtrigintillion one hundred sixty eight cenoctotrigintillion five hundred fifty five censeptentrigintillion one hundred fifty nine censextrigintillion seven hundred seventy two cenquintrigintillion six hundred fifty seven cenquattuortrigintillion four hundred forty four centretrigintillion one hundred thirty four cenduotrigintillion eight hundred seventy five cenuntrigintillion five hundred sixty seven centrigintillion three hundred thirty four cennovemvigintillion five hundred eighty seven cenoctovigintillion one hundred sixteen censeptenvigintillion three hundred fifty five censexvigintillion five hundred eighty four cenquinvigintillion nine hundred eighty two cenquattuorvigintillion five hundred forty four centrevigintillion four hundred seventy two cenduovigintillion fifty one cenunvigintillion ten cenvigintillion two hundred eighty one cennovemdecillion three hundred twenty one cenoctodecillion five hundred fifty two censeptendecillion eight hundred seventy six censexdecillion nine hundred seventy five cenquindecillion six hundred one cenquattuordecillion one hundred forty three centredecillion eight hundred forty one cenduodecillion two hundred five cenundecillion ninety cendecillion three hundred ninety three cennovemtillion four hundred twenty eight cenoctotillion six hundred eighty two censeptentillion three hundred seventy censextillion nine hundred cenquintillion one hundred seventy six cenquattuortillion three hundred ninety four centretillion four hundred ninety nine cenduotillion ninety six cenuntillion five hundred sixty three centillion nine hundred ninety nine novemnonagintillion one hundred thirty six octononagintillion three hundred fifty septennonagintillion nine hundred fifty three sexnonagintillion two hundred sixty four quinnonagintillion three hundred six quattuornonagintillion one hundred sixty four trenonagintillion eighty seven duononagintillion five hundred forty two unnonagintillion one hundred six nonagintillion two hundred sixty three novemoctogintillion sixty eight octooctogintillion four hundred eighty five septenoctogintillion one hundred seventy eight sexoctogintillion eighty quinoctogintillion nine hundred eighty two quattuoroctogintillion two hundred fifty one treoctogintillion nine hundred sixty five duooctogintillion three hundred forty nine unoctogintillion four hundred seven octogintillion six hundred sixty seven novemseptuagintillion eight hundred ninety octoseptuagintillion seven hundred eighty septenseptuagintillion forty three sexseptuagintillion seven hundred twenty eight quinseptuagintillion five hundred forty seven quattuorseptuagintillion four hundred forty treseptuagintillion eighty two duoseptuagintillion eight hundred eighty seven unseptuagintillion seven hundred thirty eight septuagintillion two hundred forty six novemsexagintillion one hundred seven octosexagintillion one hundred seventy four septensexagintillion four hundred nineteen sexsexagintillion nine hundred twenty two quinsexagintillion five hundred seventy three quattuorsexagintillion one hundred eighty eight tresexagintillion nine hundred eighteen duosexagintillion nine hundred twenty seven unsexagintillion two hundred fifty six sexagintillion three hundred twenty eight novemquinquagintillion one hundred forty nine octoquinquagintillion three hundred five septenquinquagintillion four hundred ten sexquinquagintillion eight hundred ninety two quinquinquagintillion six hundred fifty quattuorquinquagintillion five hundred twenty seven trequinquagintillion seven hundred ninety four duoquinquagintillion three hundred sixty two unquinquagintillion six hundred seventy three quinquagintillion three hundred forty five novemquadragintillion six hundred sixteen octoquadragintillion nine hundred forty eight septenquadragintillion six hundred sixty sexquadragintillion nine hundred seventy nine quinquadragintillion four hundred twenty five quattuorquadragintillion four hundred sixty six trequadragintillion eight hundred forty one duoquadragintillion eight hundred ninety two unquadragintillion six hundred eighty four quadragintillion six hundred seventy six novemtrigintillion six hundred fifty six octotrigintillion five hundred three septentrigintillion eight hundred twenty one sextrigintillion six hundred fifty eight quintrigintillion two hundred twelve quattuortrigintillion six hundred eighty nine tretrigintillion fifty five duotrigintillion six hundred eighty four untrigintillion four hundred eighteen trigintillion six hundred two novemvigintillion one hundred sixty nine octovigintillion eighty four septenvigintillion six hundred eighty five sexvigintillion eighty nine quinvigintillion seven hundred sixty one quattuorvigintillion seven hundred seventy three trevigintillion four hundred fifty five duovigintillion seven hundred thirty seven unvigintillion ninety four vigintillion five hundred twenty seven novemdecillion ninety eight octodecillion seven hundred fifty one septendecillion six hundred thirteen sexdecillion one hundred twenty seven quindecillion six hundred eighty four quattuordecillion one hundred one tredecillion six hundred forty eight duodecillion five hundred sixty eight undecillion eight hundred twelve decillion nine hundred ninety six nonillion eight hundred two octillion four hundred sixty four septillion seven hundred fourteen sextillion seven hundred forty four quintillion one quadrillion two hundred ninety one trillion nine hundred ninety five billion five hundred five million seven hundred eighty nine thousand one hundred eighty one point eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("356845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299680246471474400129199550578918.1"),
                NumberStringUtility.numberPhraseToNumber("three hundred fifty six trecennovemtrigintillion eight hundred forty five trecenoctotrigintillion four hundred forty trecenseptentrigintillion seven hundred fifty trecensextrigintillion seventy eight trecenquintrigintillion eight hundred ninety three trecenquattuortrigintillion five hundred twenty eight trecentretrigintillion one hundred twenty seven trecenduotrigintillion three hundred seventy three trecenuntrigintillion nine hundred ninety five trecentrigintillion one hundred nineteen trecennovemvigintillion ninety one trecenoctovigintillion one hundred fifty three trecenseptenvigintillion three hundred thirty one trecensexvigintillion twenty three trecenquinvigintillion eight hundred sixty three trecenquattuorvigintillion two hundred sixty eight trecentrevigintillion nine hundred forty seven trecenduovigintillion two hundred six trecenunvigintillion three hundred five trecenvigintillion three hundred forty four trecennovemdecillion nine hundred eighty three trecenoctodecillion two hundred eight trecenseptendecillion eight hundred twenty one trecensexdecillion one hundred fifty five trecenquindecillion eight hundred sixty one trecenquattuordecillion eight hundred sixty two trecentredecillion five hundred eight trecenduodecillion five hundred twenty one trecenundecillion sixty two trecendecillion two hundred ninety five trecennovemtillion seven hundred eighty eight trecenoctotillion four hundred twenty eight trecenseptentillion four hundred seventy seven trecensextillion nine hundred thirteen trecenquintillion two hundred sixty trecenquattuortillion one trecentretillion seven hundred twenty four trecenduotillion six hundred twenty one trecenuntillion five hundred twenty two trecentillion three hundred seventy duocennovemnonagintillion thirty nine duocenoctononagintillion four hundred sixteen duocenseptennonagintillion three hundred sixty seven duocensexnonagintillion seven hundred seventy one duocenquinnonagintillion six hundred twenty seven duocenquattuornonagintillion four hundred seventy nine duocentrenonagintillion nine hundred seventy eight duocenduononagintillion seven hundred seventy six duocenunnonagintillion four hundred twenty two duocennonagintillion six hundred twenty three duocennovemoctogintillion one hundred twelve duocenoctooctogintillion eighty nine duocenseptenoctogintillion one hundred ninety one duocensexoctogintillion one hundred ninety five duocenquinoctogintillion one hundred thirty three duocenquattuoroctogintillion eight hundred thirty five duocentreoctogintillion four hundred eleven duocenduooctogintillion five hundred twenty five duocenunoctogintillion five hundred seventy one duocenoctogintillion five hundred twelve duocennovemseptuagintillion thirty six duocenoctoseptuagintillion four hundred ninety two duocenseptenseptuagintillion seventy one duocensexseptuagintillion five hundred two duocenquinseptuagintillion five hundred fourteen duocenquattuorseptuagintillion six hundred forty nine duocentreseptuagintillion nine hundred eighty four duocenduoseptuagintillion two hundred sixty duocenunseptuagintillion six hundred sixteen duocenseptuagintillion nine hundred sixty six duocennovemsexagintillion seven hundred forty seven duocenoctosexagintillion seven hundred eighty three duocenseptensexagintillion seven hundred duocensexsexagintillion six hundred seventeen duocenquinsexagintillion three hundred fifty duocenquattuorsexagintillion twelve duocentresexagintillion three hundred thirty four duocenduosexagintillion eight hundred seventy three duocenunsexagintillion four hundred fifty nine duocensexagintillion four hundred sixty two duocennovemquinquagintillion five hundred seventy eight duocenoctoquinquagintillion one hundred sixty seven duocenseptenquinquagintillion six hundred eighteen duocensexquinquagintillion seven hundred ninety seven duocenquinquinquagintillion two hundred seventeen duocenquattuorquinquagintillion four hundred thirty five duocentrequinquagintillion two hundred twenty five duocenduoquinquagintillion seven hundred seventy nine duocenunquinquagintillion five hundred fifty nine duocenquinquagintillion six hundred twenty six duocennovemquadragintillion one hundred fifty two duocenoctoquadragintillion five hundred one duocenseptenquadragintillion twelve duocensexquadragintillion one hundred sixty one duocenquinquadragintillion seven hundred eighty three duocenquattuorquadragintillion one hundred seventy four duocentrequadragintillion seven hundred thirty duocenduoquadragintillion two hundred sixty eight duocenunquadragintillion six hundred seventy three duocenquadragintillion six hundred twenty two duocennovemtrigintillion thirty two duocenoctotrigintillion four hundred ninety three duocenseptentrigintillion four hundred sixty seven duocensextrigintillion seven hundred three duocenquintrigintillion two hundred forty two duocenquattuortrigintillion one hundred sixty seven duocentretrigintillion three hundred twenty eight duocenduotrigintillion one hundred three duocenuntrigintillion eight hundred fifty four duocentrigintillion eight hundred fifty one duocennovemvigintillion eight hundred four duocenoctovigintillion nine hundred thirty three duocenseptenvigintillion eighty seven duocensexvigintillion four hundred four duocenquinvigintillion seven hundred seventy three duocenquattuorvigintillion eight hundred twenty six duocentrevigintillion one hundred sixty four duocenduovigintillion six hundred duocenunvigintillion six hundred twenty five duocenvigintillion seven hundred eighty six duocennovemdecillion seven hundred sixty five duocenoctodecillion three hundred ninety three duocenseptendecillion two hundred ten duocensexdecillion three hundred sixty nine duocenquindecillion fifty five duocenquattuordecillion two hundred fifty five duocentredecillion one hundred thirty three duocenduodecillion three hundred sixty two duocenundecillion nine hundred forty seven duocendecillion eight hundred ninety two duocennovemtillion nine hundred thirty two duocenoctotillion three hundred sixty two duocenseptentillion two hundred eighty three duocensextillion six hundred ten duocenquintillion three hundred forty one duocenquattuortillion eight hundred thirty eight duocentretillion nine hundred thirty nine duocenduotillion three hundred forty six duocenuntillion five hundred five duocentillion nine hundred five cennovemnonagintillion six hundred thirty two cenoctononagintillion eight hundred six censeptennonagintillion one hundred forty nine censexnonagintillion two hundred eighty eight cenquinnonagintillion two hundred eighty one cenquattuornonagintillion nine hundred ninety centrenonagintillion three hundred seventy cenduononagintillion seventy seven cenunnonagintillion five hundred eighty seven cennonagintillion two hundred sixty nine cennovemoctogintillion eight hundred three cenoctooctogintillion eight hundred sixty seven censeptenoctogintillion one hundred seventy censexoctogintillion four hundred one cenquinoctogintillion six hundred ninety nine cenquattuoroctogintillion two hundred eighty centreoctogintillion seven hundred eighty seven cenduooctogintillion five hundred nineteen cenunoctogintillion five hundred ninety one cenoctogintillion one hundred fifty four cennovemseptuagintillion eighty eight cenoctoseptuagintillion three hundred thirty censeptenseptuagintillion two hundred fifty four censexseptuagintillion nine hundred five cenquinseptuagintillion four hundred ninety four cenquattuorseptuagintillion eight hundred twenty seven centreseptuagintillion ninety one cenduoseptuagintillion nine hundred thirty two cenunseptuagintillion nine hundred eighty four censeptuagintillion one hundred fourteen cennovemsexagintillion nine hundred twenty one cenoctosexagintillion fifteen censeptensexagintillion two hundred sixteen censexsexagintillion two cenquinsexagintillion two hundred twenty five cenquattuorsexagintillion three hundred ninety six centresexagintillion seventy nine cenduosexagintillion one hundred sixty seven cenunsexagintillion one hundred seventeen censexagintillion four hundred seventy four cennovemquinquagintillion six hundred fifty two cenoctoquinquagintillion five hundred eighty one censeptenquinquagintillion eight hundred ninety three censexquinquagintillion six hundred eleven cenquinquinquagintillion six hundred forty nine cenquattuorquinquagintillion seven hundred thirty six centrequinquagintillion four hundred fourteen cenduoquinquagintillion nine hundred forty eight cenunquinquagintillion three cenquinquagintillion six hundred fifty cennovemquadragintillion six hundred fifty four cenoctoquadragintillion one hundred eighty eight censeptenquadragintillion five hundred eighty one censexquadragintillion seven hundred eighty three cenquinquadragintillion nine hundred ninety eight cenquattuorquadragintillion five hundred seventy eight centrequadragintillion nine hundred thirty three cenduoquadragintillion four hundred thirty three cenunquadragintillion eighty six cenquadragintillion seven hundred forty cennovemtrigintillion eight hundred sixteen cenoctotrigintillion eight hundred fifty five censeptentrigintillion five hundred fifteen censextrigintillion nine hundred seventy seven cenquintrigintillion two hundred sixty five cenquattuortrigintillion seven hundred forty four centretrigintillion four hundred thirteen cenduotrigintillion four hundred eighty seven cenuntrigintillion five hundred fifty six centrigintillion seven hundred thirty three cennovemvigintillion four hundred fifty eight cenoctovigintillion seven hundred eleven censeptenvigintillion six hundred thirty five censexvigintillion five hundred fifty eight cenquinvigintillion four hundred ninety eight cenquattuorvigintillion two hundred fifty four centrevigintillion four hundred forty seven cenduovigintillion two hundred five cenunvigintillion one hundred one cenvigintillion twenty eight cennovemdecillion one hundred thirty two cenoctodecillion one hundred fifty five censeptendecillion two hundred eighty seven censexdecillion six hundred ninety seven cenquindecillion five hundred sixty cenquattuordecillion one hundred fourteen centredecillion three hundred eighty four cenduodecillion one hundred twenty cenundecillion five hundred nine cendecillion thirty nine cennovemtillion three hundred forty two cenoctotillion eight hundred sixty eight censeptentillion two hundred thirty seven censextillion ninety cenquintillion seventeen cenquattuortillion six hundred thirty nine centretillion four hundred forty nine cenduotillion nine hundred nine cenuntillion six hundred fifty six centillion three hundred ninety nine novemnonagintillion nine hundred thirteen octononagintillion six hundred thirty five septennonagintillion ninety five sexnonagintillion three hundred twenty six quinnonagintillion four hundred thirty quattuornonagintillion six hundred sixteen trenonagintillion four hundred eight duononagintillion seven hundred fifty four unnonagintillion two hundred ten nonagintillion six hundred twenty six novemoctogintillion three hundred six octooctogintillion eight hundred forty eight septenoctogintillion five hundred seventeen sexoctogintillion eight hundred eight quinoctogintillion ninety eight quattuoroctogintillion two hundred twenty five treoctogintillion one hundred ninety six duooctogintillion five hundred thirty four unoctogintillion nine hundred forty octogintillion seven hundred sixty six novemseptuagintillion seven hundred eighty nine octoseptuagintillion seventy eight septenseptuagintillion four sexseptuagintillion three hundred seventy two quinseptuagintillion eight hundred fifty four quattuorseptuagintillion seven hundred forty four treseptuagintillion eight duoseptuagintillion two hundred eighty eight unseptuagintillion seven hundred seventy three septuagintillion eight hundred twenty four novemsexagintillion six hundred ten octosexagintillion seven hundred seventeen septensexagintillion four hundred forty one sexsexagintillion nine hundred ninety two quinsexagintillion two hundred fifty seven quattuorsexagintillion three hundred eighteen tresexagintillion eight hundred ninety one duosexagintillion eight hundred ninety two unsexagintillion seven hundred twenty five sexagintillion six hundred thirty two novemquinquagintillion eight hundred fourteen octoquinquagintillion nine hundred thirty septenquinquagintillion five hundred forty one sexquinquagintillion eighty nine quinquinquagintillion two hundred sixty five quattuorquinquagintillion fifty two trequinquagintillion seven hundred seventy nine duoquinquagintillion four hundred thirty six unquinquagintillion two hundred sixty seven quinquagintillion three hundred thirty four novemquadragintillion five hundred sixty one octoquadragintillion six hundred ninety four septenquadragintillion eight hundred sixty six sexquadragintillion ninety seven quinquadragintillion nine hundred forty two quattuorquadragintillion five hundred forty six trequadragintillion six hundred eighty four duoquadragintillion one hundred eighty nine unquadragintillion two hundred sixty eight quadragintillion four hundred sixty seven novemtrigintillion six hundred sixty five octotrigintillion six hundred fifty septentrigintillion three hundred eighty two sextrigintillion one hundred sixty five quintrigintillion eight hundred twenty one quattuortrigintillion two hundred sixty eight tretrigintillion nine hundred five duotrigintillion five hundred sixty eight untrigintillion four hundred forty one trigintillion eight hundred sixty novemvigintillion two hundred sixteen octovigintillion nine hundred eight septenvigintillion four hundred sixty eight sexvigintillion five hundred eight quinvigintillion nine hundred seventy six quattuorvigintillion one hundred seventy seven trevigintillion three hundred forty five duovigintillion five hundred seventy three unvigintillion seven hundred nine vigintillion four hundred fifty two novemdecillion seven hundred nine octodecillion eight hundred seventy five septendecillion one hundred sixty one sexdecillion three hundred twelve quindecillion seven hundred sixty eight quattuordecillion four hundred ten tredecillion one hundred sixty four duodecillion eight hundred fifty six undecillion eight hundred eighty one decillion two hundred ninety nine nonillion six hundred eighty octillion two hundred forty six septillion four hundred seventy one sextillion four hundred seventy four quintillion four hundred quadrillion one hundred twenty nine trillion one hundred ninety nine billion five hundred fifty million five hundred seventy eight thousand nine hundred eighteen point one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E+1024"),
                NumberStringUtility.numberPhraseToNumber("thirty five trecenquadragintillion six hundred eighty four trecennovemtrigintillion five hundred forty four trecenoctotrigintillion seventy five trecenseptentrigintillion seven trecensextrigintillion eight hundred eighty nine trecenquintrigintillion three hundred fifty two trecenquattuortrigintillion eight hundred twelve trecentretrigintillion seven hundred thirty seven trecenduotrigintillion three hundred ninety nine trecenuntrigintillion five hundred eleven trecentrigintillion nine hundred nine trecennovemvigintillion one hundred fifteen trecenoctovigintillion three hundred thirty three trecenseptenvigintillion one hundred two trecensexvigintillion three hundred eighty six trecenquinvigintillion three hundred twenty six trecenquattuorvigintillion eight hundred ninety four trecentrevigintillion seven hundred twenty trecenduovigintillion six hundred thirty trecenunvigintillion five hundred thirty four trecenvigintillion four hundred ninety eight trecennovemdecillion three hundred twenty trecenoctodecillion eight hundred eighty two trecenseptendecillion one hundred fifteen trecensexdecillion five hundred eighty six trecenquindecillion one hundred eighty six trecenquattuordecillion two hundred fifty trecentredecillion eight hundred fifty two trecenduodecillion one hundred six trecenundecillion two hundred twenty nine trecendecillion five hundred seventy eight trecennovemtillion eight hundred forty two trecenoctotillion eight hundred forty seven trecenseptentillion seven hundred ninety one trecensextillion three hundred twenty six trecenquintillion one hundred seventy two trecentretillion four hundred sixty two trecenduotillion one hundred fifty two trecenuntillion two hundred thirty seven trecentillion three duocennovemnonagintillion nine hundred forty one duocenoctononagintillion six hundred thirty six duocenseptennonagintillion seven hundred seventy seven duocensexnonagintillion one hundred sixty two duocenquinnonagintillion seven hundred forty seven duocenquattuornonagintillion nine hundred ninety seven duocentrenonagintillion eight hundred seventy seven duocenduononagintillion six hundred forty two duocenunnonagintillion two hundred sixty two duocennonagintillion three hundred eleven duocennovemoctogintillion two hundred eight duocenoctooctogintillion nine hundred nineteen duocenseptenoctogintillion one hundred nineteen duocensexoctogintillion five hundred thirteen duocenquinoctogintillion three hundred eighty three duocenquattuoroctogintillion five hundred forty one duocentreoctogintillion one hundred fifty two duocenduooctogintillion five hundred fifty seven duocenunoctogintillion one hundred fifty one duocenoctogintillion two hundred three duocennovemseptuagintillion six hundred forty nine duocenoctoseptuagintillion two hundred seven duocenseptenseptuagintillion one hundred fifty duocensexseptuagintillion two hundred fifty one duocenquinseptuagintillion four hundred sixty four duocenquattuorseptuagintillion nine hundred ninety eight duocentreseptuagintillion four hundred twenty six duocenduoseptuagintillion sixty one duocenunseptuagintillion six hundred ninety six duocenseptuagintillion six hundred seventy four duocennovemsexagintillion seven hundred seventy eight duocenoctosexagintillion three hundred seventy duocenseptensexagintillion sixty one duocensexsexagintillion seven hundred thirty five duocenquinsexagintillion one duocenquattuorsexagintillion two hundred thirty three duocentresexagintillion four hundred eighty seven duocenduosexagintillion three hundred forty five duocenunsexagintillion nine hundred forty six duocensexagintillion two hundred fifty seven duocennovemquinquagintillion eight hundred sixteen duocenoctoquinquagintillion seven hundred sixty one duocenseptenquinquagintillion eight hundred seventy nine duocensexquinquagintillion seven hundred twenty one duocenquinquinquagintillion seven hundred forty three duocenquattuorquinquagintillion five hundred twenty two duocentrequinquagintillion five hundred seventy seven duocenduoquinquagintillion nine hundred fifty five duocenunquinquagintillion nine hundred sixty two duocenquinquagintillion six hundred fifteen duocennovemquadragintillion two hundred fifty duocenoctoquadragintillion one hundred one duocenseptenquadragintillion two hundred sixteen duocensexquadragintillion one hundred seventy eight duocenquinquadragintillion three hundred seventeen duocenquattuorquadragintillion four hundred seventy three duocentrequadragintillion twenty six duocenduoquadragintillion eight hundred sixty seven duocenunquadragintillion three hundred sixty two duocenquadragintillion two hundred three duocennovemtrigintillion two hundred forty nine duocenoctotrigintillion three hundred forty six duocenseptentrigintillion seven hundred seventy duocensextrigintillion three hundred twenty four duocenquintrigintillion two hundred sixteen duocenquattuortrigintillion seven hundred thirty two duocentretrigintillion eight hundred ten duocenduotrigintillion three hundred eighty five duocenuntrigintillion four hundred eighty five duocentrigintillion one hundred eighty duocennovemvigintillion four hundred ninety three duocenoctovigintillion three hundred eight duocenseptenvigintillion seven hundred forty duocensexvigintillion four hundred seventy seven duocenquinvigintillion three hundred eighty two duocenquattuorvigintillion six hundred sixteen duocentrevigintillion four hundred sixty duocenduovigintillion sixty two duocenunvigintillion five hundred seventy eight duocenvigintillion six hundred seventy six duocennovemdecillion five hundred thirty nine duocenoctodecillion three hundred twenty one duocenseptendecillion thirty six duocensexdecillion nine hundred five duocenquindecillion five hundred twenty five duocenquattuordecillion five hundred thirteen duocentredecillion three hundred thirty six duocenduodecillion two hundred ninety four duocenundecillion seven hundred eighty nine duocendecillion two hundred ninety three duocennovemtillion two hundred thirty six duocenoctotillion two hundred twenty eight duocenseptentillion three hundred sixty one duocensextillion thirty four duocenquintillion one hundred eighty three duocenquattuortillion eight hundred ninety three duocentretillion nine hundred thirty four duocenduotillion six hundred fifty duocenuntillion five hundred ninety duocentillion five hundred sixty three cennovemnonagintillion two hundred eighty cenoctononagintillion six hundred fourteen censeptennonagintillion nine hundred twenty eight censexnonagintillion eight hundred twenty eight cenquinnonagintillion one hundred ninety nine cenquattuornonagintillion thirty seven centrenonagintillion seven cenduononagintillion seven hundred fifty eight cenunnonagintillion seven hundred twenty six cennonagintillion nine hundred eighty cennovemoctogintillion three hundred eighty six cenoctooctogintillion seven hundred seventeen censeptenoctogintillion forty censexoctogintillion one hundred sixty nine cenquinoctogintillion nine hundred twenty eight cenquattuoroctogintillion seventy eight centreoctogintillion seven hundred fifty one cenduooctogintillion nine hundred fifty nine cenunoctogintillion one hundred fifteen cenoctogintillion four hundred eight cennovemseptuagintillion eight hundred thirty three cenoctoseptuagintillion twenty five censeptenseptuagintillion four hundred ninety censexseptuagintillion five hundred forty nine cenquinseptuagintillion four hundred eighty two cenquattuorseptuagintillion seven hundred nine centreseptuagintillion one hundred ninety three cenduoseptuagintillion two hundred ninety eight cenunseptuagintillion four hundred eleven censeptuagintillion four hundred ninety two cennovemsexagintillion one hundred one cenoctosexagintillion five hundred twenty one censeptensexagintillion six hundred censexsexagintillion two hundred twenty two cenquinsexagintillion five hundred thirty nine cenquattuorsexagintillion six hundred seven centresexagintillion nine hundred sixteen cenduosexagintillion seven hundred eleven cenunsexagintillion seven hundred forty seven censexagintillion four hundred sixty five cennovemquinquagintillion two hundred fifty eight cenoctoquinquagintillion one hundred eighty nine censeptenquinquagintillion three hundred sixty one censexquinquagintillion one hundred sixty four cenquinquinquagintillion nine hundred seventy three cenquattuorquinquagintillion six hundred forty one centrequinquagintillion four hundred ninety four cenduoquinquagintillion eight hundred cenunquinquagintillion three hundred sixty five cenquinquagintillion sixty five cennovemquadragintillion four hundred eighteen cenoctoquadragintillion eight hundred fifty eight censeptenquadragintillion one hundred seventy eight censexquadragintillion three hundred ninety nine cenquinquadragintillion eight hundred fifty seven cenquattuorquadragintillion eight hundred ninety three centrequadragintillion three hundred forty three cenduoquadragintillion three hundred eight cenunquadragintillion six hundred seventy four cenquadragintillion eighty one cennovemtrigintillion six hundred eighty five cenoctotrigintillion five hundred fifty one censeptentrigintillion five hundred ninety seven censextrigintillion seven hundred twenty six cenquintrigintillion five hundred seventy four cenquattuortrigintillion four hundred forty one centretrigintillion three hundred forty eight cenduotrigintillion seven hundred fifty five cenuntrigintillion six hundred seventy three centrigintillion three hundred forty five cennovemvigintillion eight hundred seventy one cenoctovigintillion one hundred sixty three censeptenvigintillion five hundred fifty five censexvigintillion eight hundred forty nine cenquinvigintillion eight hundred twenty five cenquattuorvigintillion four hundred forty four centrevigintillion seven hundred twenty cenduovigintillion five hundred ten cenunvigintillion one hundred two cenvigintillion eight hundred thirteen cennovemdecillion two hundred fifteen cenoctodecillion five hundred twenty eight censeptendecillion seven hundred sixty nine censexdecillion seven hundred fifty six cenquindecillion eleven cenquattuordecillion four hundred thirty eight centredecillion four hundred twelve cenduodecillion fifty cenundecillion nine hundred three cendecillion nine hundred thirty four cennovemtillion two hundred eighty six cenoctotillion eight hundred twenty three censeptentillion seven hundred nine censextillion one cenquintillion seven hundred sixty three cenquattuortillion nine hundred forty four centretillion nine hundred ninety cenduotillion nine hundred sixty five cenuntillion six hundred thirty nine centillion nine hundred ninety one novemnonagintillion three hundred sixty three octononagintillion five hundred nine septennonagintillion five hundred thirty two sexnonagintillion six hundred forty three quinnonagintillion sixty one quattuornonagintillion six hundred forty trenonagintillion eight hundred seventy five duononagintillion four hundred twenty one unnonagintillion sixty two nonagintillion six hundred thirty novemoctogintillion six hundred eighty four octooctogintillion eight hundred fifty one septenoctogintillion seven hundred eighty sexoctogintillion eight hundred nine quinoctogintillion eight hundred twenty two quattuoroctogintillion five hundred nineteen treoctogintillion six hundred fifty three duooctogintillion four hundred ninety four unoctogintillion seventy six octogintillion six hundred seventy eight novemseptuagintillion nine hundred seven octoseptuagintillion eight hundred septenseptuagintillion four hundred thirty seven sexseptuagintillion two hundred eighty five quinseptuagintillion four hundred seventy four quattuorseptuagintillion four hundred treseptuagintillion eight hundred twenty eight duoseptuagintillion eight hundred seventy seven unseptuagintillion three hundred eighty two septuagintillion four hundred sixty one novemsexagintillion seventy one octosexagintillion seven hundred forty four septensexagintillion one hundred ninety nine sexsexagintillion two hundred twenty five quinsexagintillion seven hundred thirty one quattuorsexagintillion eight hundred eighty nine tresexagintillion one hundred eighty nine duosexagintillion two hundred seventy two unsexagintillion five hundred sixty three sexagintillion two hundred eighty one novemquinquagintillion four hundred ninety three octoquinquagintillion fifty four septenquinquagintillion one hundred eight sexquinquagintillion nine hundred twenty six quinquinquagintillion five hundred five quattuorquinquagintillion two hundred seventy seven trequinquagintillion nine hundred forty three duoquinquagintillion six hundred twenty six unquinquagintillion seven hundred thirty three quinquagintillion four hundred fifty six novemquadragintillion one hundred sixty nine octoquadragintillion four hundred eighty six septenquadragintillion six hundred nine sexquadragintillion seven hundred ninety four quinquadragintillion two hundred fifty four quattuorquadragintillion six hundred sixty eight trequadragintillion four hundred eighteen duoquadragintillion nine hundred twenty six unquadragintillion eight hundred forty six quadragintillion seven hundred sixty six novemtrigintillion five hundred sixty five octotrigintillion thirty eight septentrigintillion two hundred sixteen sextrigintillion five hundred eighty two quintrigintillion one hundred twenty six quattuortrigintillion eight hundred ninety tretrigintillion five hundred fifty six duotrigintillion eight hundred forty four untrigintillion one hundred eighty six trigintillion twenty one novemvigintillion six hundred ninety octovigintillion eight hundred forty six septenvigintillion eight hundred fifty sexvigintillion eight hundred ninety seven quinvigintillion six hundred seventeen quattuorvigintillion seven hundred thirty four trevigintillion five hundred fifty seven duovigintillion three hundred seventy unvigintillion nine hundred forty five vigintillion two hundred seventy novemdecillion nine hundred eighty seven octodecillion five hundred sixteen septendecillion one hundred thirty one sexdecillion two hundred seventy six quindecillion eight hundred forty one quattuordecillion sixteen tredecillion four hundred eighty five duodecillion six hundred eighty eight undecillion one hundred twenty nine decillion nine hundred sixty eight nonillion twenty four octillion six hundred forty seven septillion one hundred forty seven sextillion four hundred forty quintillion twelve quadrillion nine hundred nineteen trillion nine hundred fifty five billion fifty seven million eight hundred ninety one thousand eight hundred eighteen point four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("0.3568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("point three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.5684544075007889352812737399511909115333102386326894720630534498320882115586186250852106229578842847791326000172462152237003941636777162747997877642262311208919119513383541152557151203649207150251464998426061696674778370061735001233487345946257816761879721743522577955962615250101216178317473026867362203249346770324216732810385485180493308740477382616460062578676539321036905525513336294789293236228361034183893934650590563280614928828199037007758726980386717040169928078751959115408833025490549482709193298411492101521600222539607916711747465258189361164973641494800365065418858178399857893343308674081685551597726574441348755673345871163555849825444720510102813215528769756011438412050903934286823709001763944990965639991363509532643061640875421062630684851780809822519653494076678907800437285474400828877382461071744199225731889189272563281493054108926505277943626733456169486609794254668418926846766565038216582126890556844186021690846850897617734557370945270987516131276841016485688129968024647147440012919955057E-6"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505E-7"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.56845440750078893528127373995119091153331023863268947206305344983208821155861862508521062295788428477913260001724621522370039416367771627479978776422623112089191195133835411525571512036492071502514649984260616966747783700617350012334873459462578167618797217435225779559626152501012161783174730268673622032493467703242167328103854851804933087404773826164600625786765393210369055255133362947892932362283610341838939346505905632806149288281990370077587269803867170401699280787519591154088330254905494827091932984114921015216002225396079167117474652581893611649736414948003650654188581783998578933433086740816855515977265744413487556733458711635558498254447205101028132155287697560114384120509039342868237090017639449909656399913635095326430616408754210626306848517808098225196534940766789078004372854744008288773824610717441992257318891892725632814930541089265052779436267334561694866097942546684189268467665650382165821268905568441860216908468508976177345573709452709875161312768410164856881299E-32"),
                NumberStringUtility.numberPhraseToNumber("point zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero zero three five six eight four five four four zero seven five zero zero seven eight eight nine three five two eight one two seven three seven three nine nine five one one nine zero nine one one five three three three one zero two three eight six three two six eight nine four seven two zero six three zero five three four four nine eight three two zero eight eight two one one five five eight six one eight six two five zero eight five two one zero six two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-33"),
                NumberStringUtility.numberPhraseToNumber("three decillionths five hundred sixty eight undecillionths four hundred fifty four duodecillionths four hundred seven tredecillionths five hundred quattuordecillionths seven hundred eighty eight quindecillionths nine hundred thirty five sexdecillionths two hundred eighty one septendecillionths two hundred seventy three octodecillionths seven hundred thirty nine novemdecillionths nine hundred fifty one vigintillionths one hundred ninety unvigintillionths nine hundred eleven duovigintillionths five hundred thirty three trevigintillionths three hundred ten quattuorvigintillionths two hundred thirty eight quinvigintillionths six hundred thirty two sexvigintillionths six hundred eighty nine septenvigintillionths four hundred seventy two octovigintillionths sixty three novemvigintillionths fifty three trigintillionths four hundred forty nine untrigintillionths eight hundred thirty two duotrigintillionths eighty eight tretrigintillionths two hundred eleven quattuortrigintillionths five hundred fifty eight quintrigintillionths six hundred eighteen sextrigintillionths six hundred twenty five septentrigintillionths eighty five octotrigintillionths two hundred ten novemtrigintillionths six hundred twenty two quadragintillionths nine hundred fifty seven unquadragintillionths eight hundred eighty four duoquadragintillionths two hundred eighty four trequadragintillionths seven hundred seventy nine quattuorquadragintillionths one hundred thirty two quinquadragintillionths six hundred sexquadragintillionths seventeen septenquadragintillionths two hundred forty six octoquadragintillionths two hundred fifteen novemquadragintillionths two hundred twenty three quinquagintillionths seven hundred unquinquagintillionths three hundred ninety four duoquinquagintillionths one hundred sixty three trequinquagintillionths six hundred seventy seven quattuorquinquagintillionths seven hundred sixteen quinquinquagintillionths two hundred seventy four sexquinquagintillionths seven hundred ninety nine septenquinquagintillionths seven hundred eighty seven octoquinquagintillionths seven hundred sixty four novemquinquagintillionths two hundred twenty six sexagintillionths two hundred thirty one unsexagintillionths one hundred twenty duosexagintillionths eight hundred ninety one tresexagintillionths nine hundred eleven quattuorsexagintillionths nine hundred fifty one quinsexagintillionths three hundred thirty eight sexsexagintillionths three hundred fifty four septensexagintillionths one hundred fifteen octosexagintillionths two hundred fifty five novemsexagintillionths seven hundred fifteen septuagintillionths one hundred twenty unseptuagintillionths three hundred sixty four duoseptuagintillionths nine hundred twenty treseptuagintillionths seven hundred fifteen quattuorseptuagintillionths twenty five quinseptuagintillionths one hundred forty six sexseptuagintillionths four hundred ninety nine septenseptuagintillionths eight hundred forty two octoseptuagintillionths six hundred six novemseptuagintillionths one hundred sixty nine octogintillionths six hundred sixty seven unoctogintillionths four hundred seventy seven duooctogintillionths eight hundred thirty seven treoctogintillionths six quattuoroctogintillionths one hundred seventy three quinoctogintillionths five hundred sexoctogintillionths one hundred twenty three septenoctogintillionths three hundred forty eight octooctogintillionths seven hundred thirty four novemoctogintillionths five hundred ninety four nonagintillionths six hundred twenty five unnonagintillionths seven hundred eighty one duononagintillionths six hundred seventy six trenonagintillionths one hundred eighty seven quattuornonagintillionths nine hundred seventy two quinnonagintillionths one hundred seventy four sexnonagintillionths three hundred fifty two septennonagintillionths two hundred fifty seven octononagintillionths seven hundred ninety five novemnonagintillionths five hundred ninety six centillionths two hundred sixty one cenuntillionths five hundred twenty five cenduotillionths ten centretillionths one hundred twenty one cenquattuortillionths six hundred seventeen cenquintillionths eight hundred thirty one censextillionths seven hundred forty seven censeptentillionths three hundred two cenoctotillionths six hundred eighty six cennovemtillionths seven hundred thirty six cendecillionths two hundred twenty cenundecillionths three hundred twenty four cenduodecillionths nine hundred thirty four centredecillionths six hundred seventy seven cenquattuordecillionths thirty two cenquindecillionths four hundred twenty one censexdecillionths six hundred seventy three censeptendecillionths two hundred eighty one cenoctodecillionths thirty eight cennovemdecillionths five hundred forty eight cenvigintillionths five hundred eighteen cenunvigintillionths forty nine cenduovigintillionths three hundred thirty centrevigintillionths eight hundred seventy four cenquattuorvigintillionths forty seven cenquinvigintillionths seven hundred thirty eight censexvigintillionths two hundred sixty one censeptenvigintillionths six hundred forty six cenoctovigintillionths six cennovemvigintillionths two hundred fifty seven centrigintillionths eight hundred sixty seven cenuntrigintillionths six hundred fifty three cenduotrigintillionths nine hundred thirty two centretrigintillionths one hundred three cenquattuortrigintillionths six hundred ninety cenquintrigintillionths five hundred fifty two censextrigintillionths five hundred fifty one censeptentrigintillionths three hundred thirty three cenoctotrigintillionths six hundred twenty nine cennovemtrigintillionths four hundred seventy eight cenquadragintillionths nine hundred twenty nine cenunquadragintillionths three hundred twenty three cenduoquadragintillionths six hundred twenty two centrequadragintillionths eight hundred thirty six cenquattuorquadragintillionths one hundred three cenquinquadragintillionths four hundred eighteen censexquadragintillionths three hundred eighty nine censeptenquadragintillionths three hundred ninety three cenoctoquadragintillionths four hundred sixty five cennovemquadragintillionths fifty nine cenquinquagintillionths fifty six cenunquinquagintillionths three hundred twenty eight cenduoquinquagintillionths sixty one centrequinquagintillionths four hundred ninety two cenquattuorquinquagintillionths eight hundred eighty two cenquinquinquagintillionths eight hundred nineteen censexquinquagintillionths nine hundred three censeptenquinquagintillionths seven hundred cenoctoquinquagintillionths seven hundred seventy five cennovemquinquagintillionths eight hundred seventy two censexagintillionths six hundred ninety eight cenunsexagintillionths thirty eight cenduosexagintillionths six hundred seventy one centresexagintillionths seven hundred four cenquattuorsexagintillionths sixteen cenquinsexagintillionths nine hundred ninety two censexsexagintillionths eight hundred seven censeptensexagintillionths eight hundred seventy five cenoctosexagintillionths one hundred ninety five cennovemsexagintillionths nine hundred eleven censeptuagintillionths five hundred forty cenunseptuagintillionths eight hundred eighty three cenduoseptuagintillionths three hundred two centreseptuagintillionths five hundred forty nine cenquattuorseptuagintillionths fifty four cenquinseptuagintillionths nine hundred forty eight censexseptuagintillionths two hundred seventy censeptenseptuagintillionths nine hundred nineteen cenoctoseptuagintillionths three hundred twenty nine cennovemseptuagintillionths eight hundred forty one cenoctogintillionths one hundred forty nine cenunoctogintillionths two hundred ten cenduooctogintillionths one hundred fifty two centreoctogintillionths one hundred sixty cenquattuoroctogintillionths twenty two cenquinoctogintillionths two hundred fifty three censexoctogintillionths nine hundred sixty censeptenoctogintillionths seven hundred ninety one cenoctooctogintillionths six hundred seventy one cennovemoctogintillionths one hundred seventy four cennonagintillionths seven hundred forty six cenunnonagintillionths five hundred twenty five cenduononagintillionths eight hundred eighteen centrenonagintillionths nine hundred thirty six cenquattuornonagintillionths one hundred sixteen cenquinnonagintillionths four hundred ninety seven censexnonagintillionths three hundred sixty four censeptennonagintillionths one hundred forty nine cenoctononagintillionths four hundred eighty cennovemnonagintillionths thirty six duocentillionths five hundred six duocenuntillionths five hundred forty one duocenduotillionths eight hundred eighty five duocentretillionths eight hundred seventeen duocenquattuortillionths eight hundred thirty nine duocenquintillionths nine hundred eighty five duocensextillionths seven hundred eighty nine duocenseptentillionths three hundred thirty four duocenoctotillionths three hundred thirty duocennovemtillionths eight hundred sixty seven duocendecillionths four hundred eight duocenundecillionths one hundred sixty eight duocenduodecillionths five hundred fifty five duocentredecillionths one hundred fifty nine duocenquattuordecillionths seven hundred seventy two duocenquindecillionths six hundred fifty seven duocensexdecillionths four hundred forty four duocenseptendecillionths one hundred thirty four duocenoctodecillionths eight hundred seventy five duocennovemdecillionths five hundred sixty seven duocenvigintillionths three hundred thirty four duocenunvigintillionths five hundred eighty seven duocenduovigintillionths one hundred sixteen duocentrevigintillionths three hundred fifty five duocenquattuorvigintillionths five hundred eighty four duocenquinvigintillionths nine hundred eighty two duocensexvigintillionths five hundred forty four duocenseptenvigintillionths four hundred seventy two duocenoctovigintillionths fifty one duocennovemvigintillionths ten duocentrigintillionths two hundred eighty one duocenuntrigintillionths three hundred twenty one duocenduotrigintillionths five hundred fifty two duocentretrigintillionths eight hundred seventy six duocenquattuortrigintillionths nine hundred seventy five duocenquintrigintillionths six hundred one duocensextrigintillionths one hundred forty three duocenseptentrigintillionths eight hundred forty one duocenoctotrigintillionths two hundred five duocennovemtrigintillionths ninety duocenquadragintillionths three hundred ninety three duocenunquadragintillionths four hundred twenty eight duocenduoquadragintillionths six hundred eighty two duocentrequadragintillionths three hundred seventy duocenquattuorquadragintillionths nine hundred duocenquinquadragintillionths one hundred seventy six duocensexquadragintillionths three hundred ninety four duocenseptenquadragintillionths four hundred ninety nine duocenoctoquadragintillionths ninety six duocennovemquadragintillionths five hundred sixty three duocenquinquagintillionths nine hundred ninety nine duocenunquinquagintillionths one hundred thirty six duocenduoquinquagintillionths three hundred fifty duocentrequinquagintillionths nine hundred fifty three duocenquattuorquinquagintillionths two hundred sixty four duocenquinquinquagintillionths three hundred six duocensexquinquagintillionths one hundred sixty four duocenseptenquinquagintillionths eighty seven duocenoctoquinquagintillionths five hundred forty two duocennovemquinquagintillionths one hundred six duocensexagintillionths two hundred sixty three duocenunsexagintillionths sixty eight duocenduosexagintillionths four hundred eighty five duocentresexagintillionths one hundred seventy eight duocenquattuorsexagintillionths eighty duocenquinsexagintillionths nine hundred eighty two duocensexsexagintillionths two hundred fifty one duocenseptensexagintillionths nine hundred sixty five duocenoctosexagintillionths three hundred forty nine duocennovemsexagintillionths four hundred seven duocenseptuagintillionths six hundred sixty seven duocenunseptuagintillionths eight hundred ninety duocenduoseptuagintillionths seven hundred eighty duocentreseptuagintillionths forty three duocenquattuorseptuagintillionths seven hundred twenty eight duocenquinseptuagintillionths five hundred forty seven duocensexseptuagintillionths four hundred forty duocenseptenseptuagintillionths eighty two duocenoctoseptuagintillionths eight hundred eighty seven duocennovemseptuagintillionths seven hundred thirty eight duocenoctogintillionths two hundred forty six duocenunoctogintillionths one hundred seven duocenduooctogintillionths one hundred seventy four duocentreoctogintillionths four hundred nineteen duocenquattuoroctogintillionths nine hundred twenty two duocenquinoctogintillionths five hundred seventy three duocensexoctogintillionths one hundred eighty eight duocenseptenoctogintillionths nine hundred eighteen duocenoctooctogintillionths nine hundred twenty seven duocennovemoctogintillionths two hundred fifty six duocennonagintillionths three hundred twenty eight duocenunnonagintillionths one hundred forty nine duocenduononagintillionths three hundred five duocentrenonagintillionths four hundred ten duocenquattuornonagintillionths eight hundred ninety two duocenquinnonagintillionths six hundred fifty duocensexnonagintillionths five hundred twenty seven duocenseptennonagintillionths seven hundred ninety four duocenoctononagintillionths three hundred sixty two duocennovemnonagintillionths six hundred seventy three trecentillionths three hundred forty five trecenuntillionths six hundred sixteen trecenduotillionths nine hundred forty eight trecentretillionths six hundred sixty trecenquattuortillionths nine hundred seventy nine trecenquintillionths four hundred twenty five trecensextillionths four hundred sixty six trecenseptentillionths eight hundred forty one trecenoctotillionths eight hundred ninety two trecennovemtillionths six hundred eighty four trecendecillionths six hundred seventy six trecenundecillionths six hundred fifty six trecenduodecillionths five hundred three trecentredecillionths eight hundred twenty one trecenquattuordecillionths six hundred fifty eight trecenquindecillionths two hundred twelve trecensexdecillionths six hundred eighty nine trecenseptendecillionths fifty five trecenoctodecillionths six hundred eighty four trecennovemdecillionths four hundred eighteen trecenvigintillionths six hundred two trecenunvigintillionths one hundred sixty nine trecenduovigintillionths eighty four trecentrevigintillionths six hundred eighty five trecenquattuorvigintillionths eighty nine trecenquinvigintillionths seven hundred sixty one trecensexvigintillionths seven hundred seventy three trecenseptenvigintillionths four hundred fifty five trecenoctovigintillionths seven hundred thirty seven trecennovemvigintillionths ninety four trecentrigintillionths five hundred twenty seven trecenuntrigintillionths ninety eight trecenduotrigintillionths seven hundred fifty one trecentretrigintillionths six hundred thirteen trecenquattuortrigintillionths one hundred twenty seven trecenquintrigintillionths six hundred eighty four trecensextrigintillionths one hundred one trecenseptentrigintillionths six hundred forty eight trecenoctotrigintillionths five hundred sixty eight trecennovemtrigintillionths eight hundred twelve trecenquadragintillionths nine hundred ninety six trecenunquadragintillionths eight hundred two trecenduoquadragintillionths four hundred sixty four trecentrequadragintillionths seven hundred fourteen trecenquattuorquadragintillionths seven hundred forty four trecenquinquadragintillionths one trecensexquadragintillionth two hundred ninety one trecenseptenquadragintillionths nine hundred ninety five trecenoctoquadragintillionths five hundred five trecennovemquadragintillionths seven hundred eighty nine trecenquinquagintillionths one hundred eighty one trecenunquinquagintillionths eight hundred forty one trecenduoquinquagintillionths nine hundred thirty eight trecentrequinquagintillionths four hundred sixty trecenquattuorquinquagintillionths one hundred trecenquinquinquagintillionths"));
        Assert.assertEquals(new BigDecimal("35684544075007889352812737399511909115333102386326894720630534498320882115586186250852106.22957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181"),
                NumberStringUtility.numberPhraseToNumber("thirty five octovigintillion six hundred eighty four septenvigintillion five hundred forty four sexvigintillion seventy five quinvigintillion seven quattuorvigintillion eight hundred eighty nine trevigintillion three hundred fifty two duovigintillion eight hundred twelve unvigintillion seven hundred thirty seven vigintillion three hundred ninety nine novemdecillion five hundred eleven octodecillion nine hundred nine septendecillion one hundred fifteen sexdecillion three hundred thirty three quindecillion one hundred two quattuordecillion three hundred eighty six tredecillion three hundred twenty six duodecillion eight hundred ninety four undecillion seven hundred twenty decillion six hundred thirty nonillion five hundred thirty four octillion four hundred ninety eight septillion three hundred twenty sextillion eight hundred eighty two quintillion one hundred fifteen quadrillion five hundred eighty six trillion one hundred eighty six billion two hundred fifty million eight hundred fifty two thousand one hundred six point two two nine five seven eight eight four two eight four seven seven nine one three two six zero zero zero one seven two four six two one five two two three seven zero zero three nine four one six three six seven seven seven one six two seven four seven nine nine seven eight seven seven six four two two six two three one one two zero eight nine one nine one one nine five one three three eight three five four one one five two five five seven one five one two zero three six four nine two zero seven one five zero two five one four six four nine nine eight four two six zero six one six nine six six seven four seven seven eight three seven zero zero six one seven three five zero zero one two three three four eight seven three four five nine four six two five seven eight one six seven six one eight seven nine seven two one seven four three five two two five seven seven nine five five nine six two six one five two five zero one zero one two one six one seven eight three one seven four seven three zero two six eight six seven three six two two zero three two four nine three four six seven seven zero three two four two one six seven three two eight one zero three eight five four eight five one eight zero four nine three three zero eight seven four zero four seven seven three eight two six one six four six zero zero six two five seven eight six seven six five three nine three two one zero three six nine zero five five two five five one three three three six two nine four seven eight nine two nine three two three six two two eight three six one zero three four one eight three eight nine three nine three four six five zero five nine zero five six three two eight zero six one four nine two eight eight two eight one nine nine zero three seven zero zero seven seven five eight seven two six nine eight zero three eight six seven one seven zero four zero one six nine nine two eight zero seven eight seven five one nine five nine one one five four zero eight eight three three zero two five four nine zero five four nine four eight two seven zero nine one nine three two nine eight four one one four nine two one zero one five two one six zero zero two two two five three nine six zero seven nine one six seven one one seven four seven four six five two five eight one eight nine three six one one six four nine seven three six four one four nine four eight zero zero three six five zero six five four one eight eight five eight one seven eight three nine nine eight five seven eight nine three three four three three zero eight six seven four zero eight one six eight five five five one five nine seven seven two six five seven four four four one three four eight seven five five six seven three three four five eight seven one one six three five five five eight four nine eight two five four four four seven two zero five one zero one zero two eight one three two one five five two eight seven six nine seven five six zero one one four three eight four one two zero five zero nine zero three nine three four two eight six eight two three seven zero nine zero zero one seven six three nine four four nine nine zero nine six five six three nine nine nine one three six three five zero nine five three two six four three zero six one six four zero eight seven five four two one zero six two six three zero six eight four eight five one seven eight zero eight zero nine eight two two five one nine six five three four nine four zero seven six six seven eight nine zero seven eight zero zero four three seven two eight five four seven four four zero zero eight two eight eight seven seven three eight two four six one zero seven one seven four four one nine nine two two five seven three one eight eight nine one eight nine two seven two five six three two eight one four nine three zero five four one zero eight nine two six five zero five two seven seven nine four three six two six seven three three four five six one six nine four eight six six zero nine seven nine four two five four six six eight four one eight nine two six eight four six seven six six five six five zero three eight two one six five eight two one two six eight nine zero five five six eight four four one eight six zero two one six nine zero eight four six eight five zero eight nine seven six one seven seven three four five five seven three seven zero nine four five two seven zero nine eight seven five one six one three one two seven six eight four one zero one six four eight five six eight eight one two nine nine six eight zero two four six four seven one four seven four four zero zero one two nine one nine nine five five zero five seven eight nine one eight one eight four one nine three eight four six zero one"));
        Assert.assertEquals(new BigDecimal("3.568454407500788935281273739951190911533310238632689472063053449832088211558618625085210622957884284779132600017246215223700394163677716274799787764226231120891911951338354115255715120364920715025146499842606169667477837006173500123348734594625781676187972174352257795596261525010121617831747302686736220324934677032421673281038548518049330874047738261646006257867653932103690552551333629478929323622836103418389393465059056328061492882819903700775872698038671704016992807875195911540883302549054948270919329841149210152160022253960791671174746525818936116497364149480036506541885817839985789334330867408168555159772657444134875567334587116355584982544472051010281321552876975601143841205090393428682370900176394499096563999136350953264306164087542106263068485178080982251965349407667890780043728547440082887738246107174419922573188918927256328149305410892650527794362673345616948660979425466841892684676656503821658212689055684418602169084685089761773455737094527098751613127684101648568812996802464714744001291995505789181E-163"),
                NumberStringUtility.numberPhraseToNumber("three hundred fifty six quattuorquinquagintillionths eight hundred forty five quinquinquagintillionths four hundred forty sexquinquagintillionths seven hundred fifty septenquinquagintillionths seventy eight octoquinquagintillionths eight hundred ninety three novemquinquagintillionths five hundred twenty eight sexagintillionths one hundred twenty seven unsexagintillionths three hundred seventy three duosexagintillionths nine hundred ninety five tresexagintillionths one hundred nineteen quattuorsexagintillionths ninety one quinsexagintillionths one hundred fifty three sexsexagintillionths three hundred thirty one septensexagintillionths twenty three octosexagintillionths eight hundred sixty three novemsexagintillionths two hundred sixty eight septuagintillionths nine hundred forty seven unseptuagintillionths two hundred six duoseptuagintillionths three hundred five treseptuagintillionths three hundred forty four quattuorseptuagintillionths nine hundred eighty three quinseptuagintillionths two hundred eight sexseptuagintillionths eight hundred twenty one septenseptuagintillionths one hundred fifty five octoseptuagintillionths eight hundred sixty one novemseptuagintillionths eight hundred sixty two octogintillionths five hundred eight unoctogintillionths five hundred twenty one duooctogintillionths sixty two treoctogintillionths two hundred ninety five quattuoroctogintillionths seven hundred eighty eight quinoctogintillionths four hundred twenty eight sexoctogintillionths four hundred seventy seven septenoctogintillionths nine hundred thirteen octooctogintillionths two hundred sixty novemoctogintillionths one nonagintillionth seven hundred twenty four unnonagintillionths six hundred twenty one duononagintillionths five hundred twenty two trenonagintillionths three hundred seventy quattuornonagintillionths thirty nine quinnonagintillionths four hundred sixteen sexnonagintillionths three hundred sixty seven septennonagintillionths seven hundred seventy one octononagintillionths six hundred twenty seven novemnonagintillionths four hundred seventy nine centillionths nine hundred seventy eight cenuntillionths seven hundred seventy six cenduotillionths four hundred twenty two centretillionths six hundred twenty three cenquattuortillionths one hundred twelve cenquintillionths eighty nine censextillionths one hundred ninety one censeptentillionths one hundred ninety five cenoctotillionths one hundred thirty three cennovemtillionths eight hundred thirty five cendecillionths four hundred eleven cenundecillionths five hundred twenty five cenduodecillionths five hundred seventy one centredecillionths five hundred twelve cenquattuordecillionths thirty six cenquindecillionths four hundred ninety two censexdecillionths seventy one censeptendecillionths five hundred two cenoctodecillionths five hundred fourteen cennovemdecillionths six hundred forty nine cenvigintillionths nine hundred eighty four cenunvigintillionths two hundred sixty cenduovigintillionths six hundred sixteen centrevigintillionths nine hundred sixty six cenquattuorvigintillionths seven hundred forty seven cenquinvigintillionths seven hundred eighty three censexvigintillionths seven hundred censeptenvigintillionths six hundred seventeen cenoctovigintillionths three hundred fifty cennovemvigintillionths twelve centrigintillionths three hundred thirty four cenuntrigintillionths eight hundred seventy three cenduotrigintillionths four hundred fifty nine centretrigintillionths four hundred sixty two cenquattuortrigintillionths five hundred seventy eight cenquintrigintillionths one hundred sixty seven censextrigintillionths six hundred eighteen censeptentrigintillionths seven hundred ninety seven cenoctotrigintillionths two hundred seventeen cennovemtrigintillionths four hundred thirty five cenquadragintillionths two hundred twenty five cenunquadragintillionths seven hundred seventy nine cenduoquadragintillionths five hundred fifty nine centrequadragintillionths six hundred twenty six cenquattuorquadragintillionths one hundred fifty two cenquinquadragintillionths five hundred one censexquadragintillionths twelve censeptenquadragintillionths one hundred sixty one cenoctoquadragintillionths seven hundred eighty three cennovemquadragintillionths one hundred seventy four cenquinquagintillionths seven hundred thirty cenunquinquagintillionths two hundred sixty eight cenduoquinquagintillionths six hundred seventy three centrequinquagintillionths six hundred twenty two cenquattuorquinquagintillionths thirty two cenquinquinquagintillionths four hundred ninety three censexquinquagintillionths four hundred sixty seven censeptenquinquagintillionths seven hundred three cenoctoquinquagintillionths two hundred forty two cennovemquinquagintillionths one hundred sixty seven censexagintillionths three hundred twenty eight cenunsexagintillionths one hundred three cenduosexagintillionths eight hundred fifty four centresexagintillionths eight hundred fifty one cenquattuorsexagintillionths eight hundred four cenquinsexagintillionths nine hundred thirty three censexsexagintillionths eighty seven censeptensexagintillionths four hundred four cenoctosexagintillionths seven hundred seventy three cennovemsexagintillionths eight hundred twenty six censeptuagintillionths one hundred sixty four cenunseptuagintillionths six hundred cenduoseptuagintillionths six hundred twenty five centreseptuagintillionths seven hundred eighty six cenquattuorseptuagintillionths seven hundred sixty five cenquinseptuagintillionths three hundred ninety three censexseptuagintillionths two hundred ten censeptenseptuagintillionths three hundred sixty nine cenoctoseptuagintillionths fifty five cennovemseptuagintillionths two hundred fifty five cenoctogintillionths one hundred thirty three cenunoctogintillionths three hundred sixty two cenduooctogintillionths nine hundred forty seven centreoctogintillionths eight hundred ninety two cenquattuoroctogintillionths nine hundred thirty two cenquinoctogintillionths three hundred sixty two censexoctogintillionths two hundred eighty three censeptenoctogintillionths six hundred ten cenoctooctogintillionths three hundred forty one cennovemoctogintillionths eight hundred thirty eight cennonagintillionths nine hundred thirty nine cenunnonagintillionths three hundred forty six cenduononagintillionths five hundred five centrenonagintillionths nine hundred five cenquattuornonagintillionths six hundred thirty two cenquinnonagintillionths eight hundred six censexnonagintillionths one hundred forty nine censeptennonagintillionths two hundred eighty eight cenoctononagintillionths two hundred eighty one cennovemnonagintillionths nine hundred ninety duocentillionths three hundred seventy duocenuntillionths seventy seven duocenduotillionths five hundred eighty seven duocentretillionths two hundred sixty nine duocenquattuortillionths eight hundred three duocenquintillionths eight hundred sixty seven duocensextillionths one hundred seventy duocenseptentillionths four hundred one duocenoctotillionths six hundred ninety nine duocennovemtillionths two hundred eighty duocendecillionths seven hundred eighty seven duocenundecillionths five hundred nineteen duocenduodecillionths five hundred ninety one duocentredecillionths one hundred fifty four duocenquattuordecillionths eighty eight duocenquindecillionths three hundred thirty duocensexdecillionths two hundred fifty four duocenseptendecillionths nine hundred five duocenoctodecillionths four hundred ninety four duocennovemdecillionths eight hundred twenty seven duocenvigintillionths ninety one duocenunvigintillionths nine hundred thirty two duocenduovigintillionths nine hundred eighty four duocentrevigintillionths one hundred fourteen duocenquattuorvigintillionths nine hundred twenty one duocenquinvigintillionths fifteen duocensexvigintillionths two hundred sixteen duocenseptenvigintillionths two duocenoctovigintillionths two hundred twenty five duocennovemvigintillionths three hundred ninety six duocentrigintillionths seventy nine duocenuntrigintillionths one hundred sixty seven duocenduotrigintillionths one hundred seventeen duocentretrigintillionths four hundred seventy four duocenquattuortrigintillionths six hundred fifty two duocenquintrigintillionths five hundred eighty one duocensextrigintillionths eight hundred ninety three duocenseptentrigintillionths six hundred eleven duocenoctotrigintillionths six hundred forty nine duocennovemtrigintillionths seven hundred thirty six duocenquadragintillionths four hundred fourteen duocenunquadragintillionths nine hundred forty eight duocenduoquadragintillionths three duocentrequadragintillionths six hundred fifty duocenquattuorquadragintillionths six hundred fifty four duocenquinquadragintillionths one hundred eighty eight duocensexquadragintillionths five hundred eighty one duocenseptenquadragintillionths seven hundred eighty three duocenoctoquadragintillionths nine hundred ninety eight duocennovemquadragintillionths five hundred seventy eight duocenquinquagintillionths nine hundred thirty three duocenunquinquagintillionths four hundred thirty three duocenduoquinquagintillionths eighty six duocentrequinquagintillionths seven hundred forty duocenquattuorquinquagintillionths eight hundred sixteen duocenquinquinquagintillionths eight hundred fifty five duocensexquinquagintillionths five hundred fifteen duocenseptenquinquagintillionths nine hundred seventy seven duocenoctoquinquagintillionths two hundred sixty five duocennovemquinquagintillionths seven hundred forty four duocensexagintillionths four hundred thirteen duocenunsexagintillionths four hundred eighty seven duocenduosexagintillionths five hundred fifty six duocentresexagintillionths seven hundred thirty three duocenquattuorsexagintillionths four hundred fifty eight duocenquinsexagintillionths seven hundred eleven duocensexsexagintillionths six hundred thirty five duocenseptensexagintillionths five hundred fifty eight duocenoctosexagintillionths four hundred ninety eight duocennovemsexagintillionths two hundred fifty four duocenseptuagintillionths four hundred forty seven duocenunseptuagintillionths two hundred five duocenduoseptuagintillionths one hundred one duocentreseptuagintillionths twenty eight duocenquattuorseptuagintillionths one hundred thirty two duocenquinseptuagintillionths one hundred fifty five duocensexseptuagintillionths two hundred eighty seven duocenseptenseptuagintillionths six hundred ninety seven duocenoctoseptuagintillionths five hundred sixty duocennovemseptuagintillionths one hundred fourteen duocenoctogintillionths three hundred eighty four duocenunoctogintillionths one hundred twenty duocenduooctogintillionths five hundred nine duocentreoctogintillionths thirty nine duocenquattuoroctogintillionths three hundred forty two duocenquinoctogintillionths eight hundred sixty eight duocensexoctogintillionths two hundred thirty seven duocenseptenoctogintillionths ninety duocenoctooctogintillionths seventeen duocennovemoctogintillionths six hundred thirty nine duocennonagintillionths four hundred forty nine duocenunnonagintillionths nine hundred nine duocenduononagintillionths six hundred fifty six duocentrenonagintillionths three hundred ninety nine duocenquattuornonagintillionths nine hundred thirteen duocenquinnonagintillionths six hundred thirty five duocensexnonagintillionths ninety five duocenseptennonagintillionths three hundred twenty six duocenoctononagintillionths four hundred thirty duocennovemnonagintillionths six hundred sixteen trecentillionths four hundred eight trecenuntillionths seven hundred fifty four trecenduotillionths two hundred ten trecentretillionths six hundred twenty six trecenquattuortillionths three hundred six trecenquintillionths eight hundred forty eight trecensextillionths five hundred seventeen trecenseptentillionths eight hundred eight trecenoctotillionths ninety eight trecennovemtillionths two hundred twenty five trecendecillionths one hundred ninety six trecenundecillionths five hundred thirty four trecenduodecillionths nine hundred forty trecentredecillionths seven hundred sixty six trecenquattuordecillionths seven hundred eighty nine trecenquindecillionths seventy eight trecensexdecillionths four trecenseptendecillionths three hundred seventy two trecenoctodecillionths eight hundred fifty four trecennovemdecillionths seven hundred forty four trecenvigintillionths eight trecenunvigintillionths two hundred eighty eight trecenduovigintillionths seven hundred seventy three trecentrevigintillionths eight hundred twenty four trecenquattuorvigintillionths six hundred ten trecenquinvigintillionths seven hundred seventeen trecensexvigintillionths four hundred forty one trecenseptenvigintillionths nine hundred ninety two trecenoctovigintillionths two hundred fifty seven trecennovemvigintillionths three hundred eighteen trecentrigintillionths eight hundred ninety one trecenuntrigintillionths eight hundred ninety two trecenduotrigintillionths seven hundred twenty five trecentretrigintillionths six hundred thirty two trecenquattuortrigintillionths eight hundred fourteen trecenquintrigintillionths nine hundred thirty trecensextrigintillionths five hundred forty one trecenseptentrigintillionths eighty nine trecenoctotrigintillionths two hundred sixty five trecennovemtrigintillionths fifty two trecenquadragintillionths seven hundred seventy nine trecenunquadragintillionths four hundred thirty six trecenduoquadragintillionths two hundred sixty seven trecentrequadragintillionths three hundred thirty four trecenquattuorquadragintillionths five hundred sixty one trecenquinquadragintillionths six hundred ninety four trecensexquadragintillionths eight hundred sixty six trecenseptenquadragintillionths ninety seven trecenoctoquadragintillionths nine hundred forty two trecennovemquadragintillionths five hundred forty six trecenquinquagintillionths six hundred eighty four trecenunquinquagintillionths one hundred eighty nine trecenduoquinquagintillionths two hundred sixty eight trecentrequinquagintillionths four hundred sixty seven trecenquattuorquinquagintillionths six hundred sixty five trecenquinquinquagintillionths six hundred fifty trecensexquinquagintillionths three hundred eighty two trecenseptenquinquagintillionths one hundred sixty five trecenoctoquinquagintillionths eight hundred twenty one trecennovemquinquagintillionths two hundred sixty eight trecensexagintillionths nine hundred five trecenunsexagintillionths five hundred sixty eight trecenduosexagintillionths four hundred forty one trecentresexagintillionths eight hundred sixty trecenquattuorsexagintillionths two hundred sixteen trecenquinsexagintillionths nine hundred eight trecensexsexagintillionths four hundred sixty eight trecenseptensexagintillionths five hundred eight trecenoctosexagintillionths nine hundred seventy six trecennovemsexagintillionths one hundred seventy seven trecenseptuagintillionths three hundred forty five trecenunseptuagintillionths five hundred seventy three trecenduoseptuagintillionths seven hundred nine trecentreseptuagintillionths four hundred fifty two trecenquattuorseptuagintillionths seven hundred nine trecenquinseptuagintillionths eight hundred seventy five trecensexseptuagintillionths one hundred sixty one trecenseptenseptuagintillionths three hundred twelve trecenoctoseptuagintillionths seven hundred sixty eight trecennovemseptuagintillionths four hundred ten trecenoctogintillionths one hundred sixty four trecenunoctogintillionths eight hundred fifty six trecenduooctogintillionths eight hundred eighty one trecentreoctogintillionths two hundred ninety nine trecenquattuoroctogintillionths six hundred eighty trecenquinoctogintillionths two hundred forty six trecensexoctogintillionths four hundred seventy one trecenseptenoctogintillionths four hundred seventy four trecenoctooctogintillionths four hundred trecennovemoctogintillionths one hundred twenty nine trecennonagintillionths one hundred ninety nine trecenunnonagintillionths five hundred fifty trecenduononagintillionths five hundred seventy eight trecentrenonagintillionths nine hundred eighteen trecenquattuornonagintillionths one hundred eighty four trecenquinnonagintillionths one hundred ninety three trecensexnonagintillionths eight hundred forty six trecenseptennonagintillionths ten trecenoctononagintillionths"));
        
        //order
        Assert.assertEquals(new BigDecimal("4"), NumberStringUtility.numberPhraseToNumber("one three"));
        Assert.assertEquals(new BigDecimal("120"), NumberStringUtility.numberPhraseToNumber("one twenty"));
        Assert.assertEquals(new BigDecimal("112"), NumberStringUtility.numberPhraseToNumber("one twelve"));
        Assert.assertEquals(new BigDecimal("135"), NumberStringUtility.numberPhraseToNumber("one thirty five"));
        Assert.assertEquals(new BigDecimal("100"), NumberStringUtility.numberPhraseToNumber("one hundred"));
        Assert.assertEquals(new BigDecimal("100"), NumberStringUtility.numberPhraseToNumber("one oh"));
        Assert.assertEquals(new BigDecimal("103"), NumberStringUtility.numberPhraseToNumber("one oh three"));
        Assert.assertEquals(new BigDecimal("120"), NumberStringUtility.numberPhraseToNumber("one o twenty"));
        Assert.assertEquals(new BigDecimal("112"), NumberStringUtility.numberPhraseToNumber("one o twelve"));
        Assert.assertEquals(new BigDecimal("135"), NumberStringUtility.numberPhraseToNumber("one oh thirty five"));
        Assert.assertEquals(new BigDecimal("27"), NumberStringUtility.numberPhraseToNumber("twenty seven"));
        Assert.assertEquals(new BigDecimal("2080"), NumberStringUtility.numberPhraseToNumber("twenty eighty"));
        Assert.assertEquals(new BigDecimal("2067"), NumberStringUtility.numberPhraseToNumber("twenty sixty seven"));
        Assert.assertEquals(new BigDecimal("2012"), NumberStringUtility.numberPhraseToNumber("twenty twelve"));
        Assert.assertEquals(new BigDecimal("2000"), NumberStringUtility.numberPhraseToNumber("twenty hundred"));
        Assert.assertEquals(new BigDecimal("2000"), NumberStringUtility.numberPhraseToNumber("twenty o"));
        Assert.assertEquals(new BigDecimal("2000"), NumberStringUtility.numberPhraseToNumber("twenty o"));
        Assert.assertEquals(new BigDecimal("2006"), NumberStringUtility.numberPhraseToNumber("twenty oh six"));
        Assert.assertEquals(new BigDecimal("2020"), NumberStringUtility.numberPhraseToNumber("twenty o twenty"));
        Assert.assertEquals(new BigDecimal("2012"), NumberStringUtility.numberPhraseToNumber("twenty o twelve"));
        Assert.assertEquals(new BigDecimal("25"), NumberStringUtility.numberPhraseToNumber("nineteen six"));
        Assert.assertEquals(new BigDecimal("1950"), NumberStringUtility.numberPhraseToNumber("nineteen fifty"));
        Assert.assertEquals(new BigDecimal("1967"), NumberStringUtility.numberPhraseToNumber("nineteen sixty seven"));
        Assert.assertEquals(new BigDecimal("1912"), NumberStringUtility.numberPhraseToNumber("nineteen twelve"));
        Assert.assertEquals(new BigDecimal("1900"), NumberStringUtility.numberPhraseToNumber("nineteen hundred"));
        Assert.assertEquals(new BigDecimal("1900"), NumberStringUtility.numberPhraseToNumber("nineteen o"));
        Assert.assertEquals(new BigDecimal("1906"), NumberStringUtility.numberPhraseToNumber("nineteen oh six"));
        Assert.assertEquals(new BigDecimal("1920"), NumberStringUtility.numberPhraseToNumber("nineteen o twenty"));
        Assert.assertEquals(new BigDecimal("1912"), NumberStringUtility.numberPhraseToNumber("nineteen o twelve"));
        Assert.assertEquals(new BigDecimal("0"), NumberStringUtility.numberPhraseToNumber("hundred"));
        Assert.assertEquals(new BigDecimal("400"), NumberStringUtility.numberPhraseToNumber("four hundred"));
        Assert.assertEquals(new BigDecimal("409"), NumberStringUtility.numberPhraseToNumber("four hundred nine"));
        Assert.assertEquals(new BigDecimal("470"), NumberStringUtility.numberPhraseToNumber("four hundred seventy"));
        Assert.assertEquals(new BigDecimal("472"), NumberStringUtility.numberPhraseToNumber("four hundred seventy two"));
        Assert.assertEquals(new BigDecimal("417"), NumberStringUtility.numberPhraseToNumber("four hundred seventeen"));
        Assert.assertEquals(new BigDecimal("400"), NumberStringUtility.numberPhraseToNumber("four hundred hundred"));
        Assert.assertEquals(new BigDecimal("103"), NumberStringUtility.numberPhraseToNumber("one hundred three"));
        Assert.assertEquals(new BigDecimal("120"), NumberStringUtility.numberPhraseToNumber("one hundred twenty"));
        Assert.assertEquals(new BigDecimal("112"), NumberStringUtility.numberPhraseToNumber("one hundred twelve"));
        Assert.assertEquals(new BigDecimal("135"), NumberStringUtility.numberPhraseToNumber("one hundred thirty five"));
        Assert.assertEquals(new BigDecimal("301"), NumberStringUtility.numberPhraseToNumber("one three hundred"));
        Assert.assertEquals(new BigDecimal("12000"), NumberStringUtility.numberPhraseToNumber("one twenty hundred"));
        Assert.assertEquals(new BigDecimal("11200"), NumberStringUtility.numberPhraseToNumber("one twelve hundred"));
        Assert.assertEquals(new BigDecimal("13500"), NumberStringUtility.numberPhraseToNumber("one thirty five hundred"));
        Assert.assertEquals(new BigDecimal("6"), NumberStringUtility.numberPhraseToNumber("one two three"));
        Assert.assertEquals(new BigDecimal("115"), NumberStringUtility.numberPhraseToNumber("one twelve three"));
        Assert.assertEquals(new BigDecimal("133"), NumberStringUtility.numberPhraseToNumber("one thirty three"));
        Assert.assertEquals(new BigDecimal("103"), NumberStringUtility.numberPhraseToNumber("one hundred three"));
        Assert.assertEquals(new BigDecimal("2070"), NumberStringUtility.numberPhraseToNumber("twenty thirty forty"));
        Assert.assertEquals(new BigDecimal("1227"), NumberStringUtility.numberPhraseToNumber("twelve thirteen fourteen"));
        Assert.assertEquals(new BigDecimal("1214"), NumberStringUtility.numberPhraseToNumber("twelve hundred fourteen"));
        
        //special
        Assert.assertEquals(new BigDecimal("354"), NumberStringUtility.numberPhraseToNumber("three fifty four"));
        Assert.assertEquals(new BigDecimal("906"), NumberStringUtility.numberPhraseToNumber("nine oh six"));
        Assert.assertEquals(new BigDecimal("906"), NumberStringUtility.numberPhraseToNumber("nine o six"));
        Assert.assertEquals(new BigDecimal("1500"), NumberStringUtility.numberPhraseToNumber("fifteen hundred"));
        Assert.assertEquals(new BigDecimal("1567"), NumberStringUtility.numberPhraseToNumber("fifteen sixty seven"));
        Assert.assertEquals(new BigDecimal("1507"), NumberStringUtility.numberPhraseToNumber("fifteen oh seven"));
        Assert.assertEquals(new BigDecimal("1507"), NumberStringUtility.numberPhraseToNumber("fifteen o seven"));
        Assert.assertEquals(new BigDecimal("353000"), NumberStringUtility.numberPhraseToNumber("three fifty three thousand"));
        Assert.assertEquals(new BigDecimal("536.218"), NumberStringUtility.numberPhraseToNumber("five hundred thirty six two hundred eighteen thousandths"));
        Assert.assertEquals(new BigDecimal("536.218"), NumberStringUtility.numberPhraseToNumber("five hundred thirty six and two hundred eighteen thousandths"));
        Assert.assertEquals(new BigDecimal("500.002"), NumberStringUtility.numberPhraseToNumber("five hundred and two thousandths"));
        Assert.assertEquals(new BigDecimal("0.502"), NumberStringUtility.numberPhraseToNumber("five hundred two thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("one million six hundred and thirty thousand three hundred and ninety nine and five hundred and two thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred ninety nine five hundred two thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred ninety nine and five hundred two thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.392"), NumberStringUtility.numberPhraseToNumber("one million six hundred and thirty thousand three hundred and ninety and two thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.302"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred two thousandths"));
        Assert.assertEquals(new BigDecimal("1630300.002"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred and two thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.392"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred ninety two thousandths"));
        Assert.assertEquals(new BigDecimal("1630300.092"), NumberStringUtility.numberPhraseToNumber("one million six hundred thirty thousand three hundred and ninety two thousandths"));
        Assert.assertEquals(new BigDecimal("1"), NumberStringUtility.numberPhraseToNumber("first"));
        Assert.assertEquals(new BigDecimal("1"), NumberStringUtility.numberPhraseToNumber("fir"));
        Assert.assertEquals(new BigDecimal("2"), NumberStringUtility.numberPhraseToNumber("second"));
        Assert.assertEquals(new BigDecimal("2"), NumberStringUtility.numberPhraseToNumber("seco"));
        Assert.assertEquals(new BigDecimal("3"), NumberStringUtility.numberPhraseToNumber("third"));
        Assert.assertEquals(new BigDecimal("3"), NumberStringUtility.numberPhraseToNumber("thi"));
        Assert.assertEquals(new BigDecimal("5"), NumberStringUtility.numberPhraseToNumber("fifth"));
        Assert.assertEquals(new BigDecimal("5"), NumberStringUtility.numberPhraseToNumber("fif"));
        Assert.assertEquals(new BigDecimal("98"), NumberStringUtility.numberPhraseToNumber("ninety eighth"));
        Assert.assertEquals(new BigDecimal("251"), NumberStringUtility.numberPhraseToNumber("second hundred fifty first"));
        Assert.assertEquals(new BigDecimal("8.55"), NumberStringUtility.numberPhraseToNumber("eighth and fifty fifth hundredths"));
        Assert.assertEquals(new BigDecimal("354"), NumberStringUtility.numberPhraseToNumber("3 54"));
        Assert.assertEquals(new BigDecimal("906"), NumberStringUtility.numberPhraseToNumber("9 oh 6"));
        Assert.assertEquals(new BigDecimal("906"), NumberStringUtility.numberPhraseToNumber("9 o 6"));
        Assert.assertEquals(new BigDecimal("1500"), NumberStringUtility.numberPhraseToNumber("1500"));
        Assert.assertEquals(new BigDecimal("1567"), NumberStringUtility.numberPhraseToNumber("15 67"));
        Assert.assertEquals(new BigDecimal("1507"), NumberStringUtility.numberPhraseToNumber("15 oh 7"));
        Assert.assertEquals(new BigDecimal("1507"), NumberStringUtility.numberPhraseToNumber("15 o 7"));
        Assert.assertEquals(new BigDecimal("353000"), NumberStringUtility.numberPhraseToNumber("3 53 thousand"));
        Assert.assertEquals(new BigDecimal("536.218"), NumberStringUtility.numberPhraseToNumber("536 218 thousandths"));
        Assert.assertEquals(new BigDecimal("536.218"), NumberStringUtility.numberPhraseToNumber("536 and 218 thousandths"));
        Assert.assertEquals(new BigDecimal("500.002"), NumberStringUtility.numberPhraseToNumber("500 and 2 thousandths"));
        Assert.assertEquals(new BigDecimal("0.502"), NumberStringUtility.numberPhraseToNumber("502 thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("1 million 600 and 30 thousand 300 and 99 and 500 and 2 thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 399 502 thousandths"));
        Assert.assertEquals(new BigDecimal("1630399.502"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 399 and 502 thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.392"), NumberStringUtility.numberPhraseToNumber("1 million 600 and 30 thousand 300 and 90 and 2 thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.302"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 302 thousandths"));
        Assert.assertEquals(new BigDecimal("1630300.002"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 300 and 2 thousandths"));
        Assert.assertEquals(new BigDecimal("1630000.392"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 392 thousandths"));
        Assert.assertEquals(new BigDecimal("1630300.092"), NumberStringUtility.numberPhraseToNumber("1 million 630 thousand 300 and 92 thousandths"));
        Assert.assertEquals(new BigDecimal("1"), NumberStringUtility.numberPhraseToNumber("1st"));
        Assert.assertEquals(new BigDecimal("1"), NumberStringUtility.numberPhraseToNumber("1nd"));
        Assert.assertEquals(new BigDecimal("2"), NumberStringUtility.numberPhraseToNumber("2nd"));
        Assert.assertEquals(new BigDecimal("2"), NumberStringUtility.numberPhraseToNumber("2rd"));
        Assert.assertEquals(new BigDecimal("3"), NumberStringUtility.numberPhraseToNumber("3rd"));
        Assert.assertEquals(new BigDecimal("3"), NumberStringUtility.numberPhraseToNumber("3th"));
        Assert.assertEquals(new BigDecimal("5"), NumberStringUtility.numberPhraseToNumber("5th"));
        Assert.assertEquals(new BigDecimal("5"), NumberStringUtility.numberPhraseToNumber("5st"));
        Assert.assertEquals(new BigDecimal("98"), NumberStringUtility.numberPhraseToNumber("98th"));
        Assert.assertEquals(new BigDecimal("251"), NumberStringUtility.numberPhraseToNumber("251st"));
        Assert.assertEquals(new BigDecimal("8.55"), NumberStringUtility.numberPhraseToNumber("8th and 55th hundredths"));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberPhraseToNumber("one hundred duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingenoctodecillion"));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberPhraseToNumber("ten tremilliamilliamilliatrecentretriginmilliamilliatrecentretriginmilliatrecenduotrigintillion"));
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.numberPhraseToNumber("ten duomilliamilliamilliaoctingenoctodecmilliamilliaseptingenseptenmilliaoctingennovemdecillionths"));
        TestUtils.assertException(NumberFormatException.class, "Too many nonzero exponent digits.", () ->
                NumberStringUtility.numberPhraseToNumber("one hundred tremilliamilliamilliatrecentretriginmilliamilliatrecentretriginmilliatrecentretrigintillionths"));
        
        //invalid
        Assert.assertEquals(new BigDecimal("0"),
                NumberStringUtility.numberPhraseToNumber(""));
        TestUtils.assertException(NumberFormatException.class, "The string: 'times ten to the' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("times ten to the"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'point' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("point"));
        Assert.assertEquals(new BigDecimal("0"),
                NumberStringUtility.numberPhraseToNumber("and"));
        Assert.assertEquals(new BigDecimal("0"),
                NumberStringUtility.numberPhraseToNumber("and and and"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative negative eighteen' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative negative eighteen"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative eight hundred fourty three negative thirty four' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative eight hundred fourty three negative thirty four"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'five times ten to the eight time ten to the three' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("five times ten to the eight time ten to the three"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'fifteen point point six eight one nine three two' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("fifteen point point six eight one nine three two"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'fifteen point six eight one point nine three two' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("fifteen point six eight one point nine three two"));
        Assert.assertEquals(new BigDecimal("-9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("negative eight hundred seventy five thousand nine million one hundred sixty seven billionths one hundred sixteen"));
        Assert.assertEquals(new BigDecimal("9875116.000000167"),
                NumberStringUtility.numberPhraseToNumber("eight hundred seventy five thousand negative nine million and one hundred sixty seven billionths one hundred sixteen"));
        Assert.assertEquals(new BigDecimal("521000"),
                NumberStringUtility.numberPhraseToNumber("eighteen thousand five hundred three thousand"));
        Assert.assertEquals(new BigDecimal("500"),
                NumberStringUtility.numberPhraseToNumber("five hundred and"));
        Assert.assertEquals(new BigDecimal("500000"),
                NumberStringUtility.numberPhraseToNumber("five hundred thousand and"));
        Assert.assertEquals(new BigDecimal("500000"),
                NumberStringUtility.numberPhraseToNumber("and five hundred thousand"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point one hundred sixty seven billionths' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen point one hundred sixty seven billionths"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero eight and one hundred sixty seven billionths' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen point zero zero eight and one hundred sixty seven billionths"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen one hundred sixty seven billionths point zero zero eight' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen one hundred sixty seven billionths point zero zero eight"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point sixty' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen point sixty"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'negative nine million eight hundred seventy five thousand one hundred sixteen point six hundred' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("negative nine million eight hundred seventy five thousand one hundred sixteen point six hundred"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'sixtyth' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("sixtyth"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'three cenillion' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("three cenillion"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'four test' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("four test"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'test' does not represent a valid number phrase", () ->
                NumberStringUtility.numberPhraseToNumber("test"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.numberPhraseToNumber(null));
    }
    
    /**
     * JUnit test of cleanNumberString.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#cleanNumberString(String)
     */
    @Test
    public void testCleanNumberString() throws Exception {
        //integer
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("000000001"));
        Assert.assertEquals("8400000001", NumberStringUtility.cleanNumberString("00008400000001"));
        
        //negative integer
        Assert.assertEquals("-1", NumberStringUtility.cleanNumberString("-000000001"));
        Assert.assertEquals("-8400000001", NumberStringUtility.cleanNumberString("-00008400000001"));
        
        //positive integer
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("+000000001"));
        Assert.assertEquals("8400000001", NumberStringUtility.cleanNumberString("+00008400000001"));
        
        //decimal
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("0.0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString(".0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("00000000.0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("00000000.00000010000"));
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("1.00000000"));
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("00000001.00000000"));
        
        //negative decimal
        Assert.assertEquals("-0.0000001", NumberStringUtility.cleanNumberString("-0.0000001"));
        Assert.assertEquals("-0.0000001", NumberStringUtility.cleanNumberString("-.0000001"));
        Assert.assertEquals("-0.0000001", NumberStringUtility.cleanNumberString("-00000000.0000001"));
        Assert.assertEquals("-0.0000001", NumberStringUtility.cleanNumberString("-00000000.00000010000"));
        Assert.assertEquals("-1", NumberStringUtility.cleanNumberString("-1.00000000"));
        Assert.assertEquals("-1", NumberStringUtility.cleanNumberString("-00000001.00000000"));
        
        //positive decimal
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("+0.0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("+.0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("+00000000.0000001"));
        Assert.assertEquals("0.0000001", NumberStringUtility.cleanNumberString("+00000000.00000010000"));
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("+1.00000000"));
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("+00000001.00000000"));
        Assert.assertEquals("100000000", NumberStringUtility.cleanNumberString("+0000000100000000."));
        
        //standard
        Assert.assertEquals("198465045408491.489087918482170487414984", NumberStringUtility.cleanNumberString("198465045408491.489087918482170487414984"));
        Assert.assertEquals("-198465045408491.489087918482170487414984", NumberStringUtility.cleanNumberString("-198465045408491.489087918482170487414984"));
        Assert.assertEquals("198465045408491.489087918482170487414984", NumberStringUtility.cleanNumberString("000000198465045408491.489087918482170487414984000000"));
        Assert.assertEquals("-198465045408491.489087918482170487414984", NumberStringUtility.cleanNumberString("-000000198465045408491.489087918482170487414984000000"));
        
        //exponential notation
        Assert.assertEquals("8.165808416E+156042015", NumberStringUtility.cleanNumberString("8.165808416E156042015"));
        Assert.assertEquals("-8.165808416E+156042015", NumberStringUtility.cleanNumberString("-8.165808416E156042015"));
        Assert.assertEquals("8.165808416E-156042015", NumberStringUtility.cleanNumberString("8.165808416E-156042015"));
        Assert.assertEquals("-8.165808416E-156042015", NumberStringUtility.cleanNumberString("-8.165808416E-156042015"));
        Assert.assertEquals("8.165808416E-15604201500000", NumberStringUtility.cleanNumberString("00000008.165808416000e-15604201500000"));
        Assert.assertEquals("-8.165808416E-15604201500000", NumberStringUtility.cleanNumberString("-00000008.165808416000e-15604201500000"));
        Assert.assertEquals("1E+156", NumberStringUtility.cleanNumberString("1E156"));
        
        //dirty exponential notation
        Assert.assertEquals("7.154611E+4", NumberStringUtility.cleanNumberString("715.4611e2"));
        Assert.assertEquals("7.154611E+1", NumberStringUtility.cleanNumberString("0.7154611e2"));
        Assert.assertEquals("7.154611", NumberStringUtility.cleanNumberString("0.7154611e1"));
        Assert.assertEquals("7.154611", NumberStringUtility.cleanNumberString("0.00007154611E5"));
        Assert.assertEquals("7.154611E+1", NumberStringUtility.cleanNumberString(".7154611e2"));
        Assert.assertEquals("7.154611E+1", NumberStringUtility.cleanNumberString("715.4611e-1"));
        Assert.assertEquals("-7.154611E-1", NumberStringUtility.cleanNumberString("-715.4611e-3"));
        Assert.assertEquals("7.154611E-1", NumberStringUtility.cleanNumberString("+715.4611e-3"));
        Assert.assertEquals("7.154611E+2", NumberStringUtility.cleanNumberString("0.0007154611e6"));
        Assert.assertEquals("7.154611E+2", NumberStringUtility.cleanNumberString("0000000.00071546110000000e6"));
        Assert.assertEquals("7.154611E-10", NumberStringUtility.cleanNumberString("+0000000.00071546110000000e-6"));
        Assert.assertEquals("7.154611E+2", NumberStringUtility.cleanNumberString("0000715461100000.00e-9"));
        Assert.assertEquals("7.154E+11", NumberStringUtility.cleanNumberString("7154E8"));
        Assert.assertEquals("7.154611E+2.8", NumberStringUtility.cleanNumberString("7.154611e2.8"));
        Assert.assertEquals("7E+2.8", NumberStringUtility.cleanNumberString("7e2.8"));
        Assert.assertEquals("7E-28", NumberStringUtility.cleanNumberString("7e-28."));
        Assert.assertEquals("7E-28", NumberStringUtility.cleanNumberString("+7.e-28."));
        Assert.assertEquals("7E+2.8", NumberStringUtility.cleanNumberString("7e2.800000"));
        Assert.assertEquals("7E+0.28", NumberStringUtility.cleanNumberString("7e.2800000"));
        Assert.assertEquals("7E+6", NumberStringUtility.cleanNumberString("7.e6"));
        
        //zero
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("0"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("000000"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("+0"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("-0"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("0.0000"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("000000.0000"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("+000000.0000"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("-000000.0000"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("0E643"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("0E-643"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString("-0.0000E-643"));
        
        //spaces
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString(" 1 "));
        Assert.assertEquals("-1", NumberStringUtility.cleanNumberString("     - 00000000 1  "));
        Assert.assertEquals("-0.0000001", NumberStringUtility.cleanNumberString("-   . 0000 001  "));
        Assert.assertEquals("198465045408491.489087918482170487414984", NumberStringUtility.cleanNumberString("198 465 045 408 491 . 489 087 918 482 170 487 414 984"));
        Assert.assertEquals("8.165808416E-156042015", NumberStringUtility.cleanNumberString(" 8 . 165808416 E - 156042015 "));
        Assert.assertEquals("1", NumberStringUtility.cleanNumberString("\t\t \r\n1       \n"));
        
        //invalid
        Assert.assertEquals("1.944E8.1644E-150", NumberStringUtility.cleanNumberString("1.944E+8.1644E-150"));
        Assert.assertEquals("1.944E8.1644E-150", NumberStringUtility.cleanNumberString("1.9440000E+8.1644.e-0150.00"));
        Assert.assertEquals("1.944E8.1644E+150", NumberStringUtility.cleanNumberString("1.9440000E8.1644.e0150.00"));
        Assert.assertEquals("192.168.0.1", NumberStringUtility.cleanNumberString("192.168.0.1"));
        Assert.assertEquals("192.00001680.000.1", NumberStringUtility.cleanNumberString("0192.00001680.000.10"));
        Assert.assertEquals("TE+ST", NumberStringUtility.cleanNumberString("test"));
        Assert.assertEquals("0", NumberStringUtility.cleanNumberString(""));
        TestUtils.assertException(NumberFormatException.class, "Character T is neither a decimal digit number, decimal point, nor \"e\" notation exponential mark.", () ->
                NumberStringUtility.cleanNumberString("something"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.cleanNumberString(null));
    }
    
    /**
     * JUnit test of reciprocalAppendix.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#reciprocalAppendix(Number)
     */
    @Test
    public void testReciprocalAppendix() throws Exception {
        //small numbers
        Assert.assertEquals("st", NumberStringUtility.reciprocalAppendix(1));
        Assert.assertEquals("nd", NumberStringUtility.reciprocalAppendix(2));
        Assert.assertEquals("rd", NumberStringUtility.reciprocalAppendix(3));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(4));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(5));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(6));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(7));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(8));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(9));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(10));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(11));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(12));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(13));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(14));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(15));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(16));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(17));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(18));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(19));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(20));
        Assert.assertEquals("st", NumberStringUtility.reciprocalAppendix(21));
        Assert.assertEquals("nd", NumberStringUtility.reciprocalAppendix(22));
        Assert.assertEquals("rd", NumberStringUtility.reciprocalAppendix(23));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(24));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(25));
        
        //large numbers
        Assert.assertEquals("st", NumberStringUtility.reciprocalAppendix(584321));
        Assert.assertEquals("nd", NumberStringUtility.reciprocalAppendix(21654876202L));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(21654876212L));
        Assert.assertEquals("rd", NumberStringUtility.reciprocalAppendix(7460145843L));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(7460145813L));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(687745106849L));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(7000000000000L));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(7.498513e97));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(9.0048238e266));
        
        //decimals
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(.1));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(.9468));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(.00002));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(.0000046583));
        
        //numbers and decimals
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(654.1));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(872100.9468));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(915670.00002));
        Assert.assertEquals("th", NumberStringUtility.reciprocalAppendix(3548.0000046583));
        
        //big decimal cases
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("st",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("987407054516859841974987427417804142357186878011782621")));
        Assert.assertEquals("nd",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("655404611435764284089748209027864569804848416875828122")));
        Assert.assertEquals("rd",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("759040687484564240498140541659084890184095042413301123")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("354096847098748245420793274098498410357035496877208911")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("980048408450454827589759523876017316878271871678168712")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("159687098703288327621707878208998745120512605454213513")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("-0.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals("th",
                NumberStringUtility.reciprocalAppendix(new BigDecimal("-5967945689794436877198887828689582168366902795322725858829.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
    }
    
    /**
     * JUnit test of powerOfTen.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#powerOfTen(Number)
     */
    @Test
    public void testPowerOfTen() throws Exception {
        //positive powers
        Assert.assertEquals(0, NumberStringUtility.powerOfTen(0));
        Assert.assertEquals(0, NumberStringUtility.powerOfTen(5));
        Assert.assertEquals(1, NumberStringUtility.powerOfTen(10));
        Assert.assertEquals(1, NumberStringUtility.powerOfTen(-59));
        Assert.assertEquals(0, NumberStringUtility.powerOfTen(1.198051056));
        Assert.assertEquals(3, NumberStringUtility.powerOfTen(1806.198051056));
        Assert.assertEquals(4, NumberStringUtility.powerOfTen(61324));
        Assert.assertEquals(8, NumberStringUtility.powerOfTen(5.64981345E8));
        Assert.assertEquals(12, NumberStringUtility.powerOfTen(-6.1245E12));
        Assert.assertEquals(59, NumberStringUtility.powerOfTen(9.9999999E59));
        Assert.assertEquals(102, NumberStringUtility.powerOfTen(-4.568974E102));
        Assert.assertEquals(307, NumberStringUtility.powerOfTen(7.4982114E307));
        
        //negative powers
        Assert.assertEquals(0, NumberStringUtility.powerOfTen(.0));
        Assert.assertEquals(-1, NumberStringUtility.powerOfTen(.1));
        Assert.assertEquals(-1, NumberStringUtility.powerOfTen(.6));
        Assert.assertEquals(-2, NumberStringUtility.powerOfTen(-.01));
        Assert.assertEquals(-2, NumberStringUtility.powerOfTen(.03));
        Assert.assertEquals(-3, NumberStringUtility.powerOfTen(0.00481));
        Assert.assertEquals(-6, NumberStringUtility.powerOfTen(-4.5684E-6));
        Assert.assertEquals(-84, NumberStringUtility.powerOfTen(8.4512265E-84));
        Assert.assertEquals(-109, NumberStringUtility.powerOfTen(-1.0E-109));
        Assert.assertEquals(-324, NumberStringUtility.powerOfTen(6.5644114E-324));
        Assert.assertEquals(0, NumberStringUtility.powerOfTen(0.00000000000));
        
        //big decimal cases
        Assert.assertEquals(757,
                NumberStringUtility.powerOfTen(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-701,
                NumberStringUtility.powerOfTen(new BigDecimal
        Assert.assertEquals(757,
                NumberStringUtility.powerOfTen(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(757,
                NumberStringUtility.powerOfTen(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-701,
                NumberStringUtility.powerOfTen(new BigDecimal
        Assert.assertEquals(757,
                NumberStringUtility.powerOfTen(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(846056513,
                NumberStringUtility.powerOfTen(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E846056513")));
        Assert.assertEquals(-846056513,
                NumberStringUtility.powerOfTen(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E-846056513")));
        Assert.assertEquals(2147483647,
                NumberStringUtility.powerOfTen(new BigDecimal("1E2147483647")));
        Assert.assertEquals(-2147483647,
                NumberStringUtility.powerOfTen(new BigDecimal("1E-2147483647")));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.powerOfTen(new BigDecimal("1E2147483648")));
        TestUtils.assertException(NumberFormatException.class, "Scale out of range.", () ->
                NumberStringUtility.powerOfTen(new BigDecimal("1E-2147483648")));
    }
    
    /**
     * JUnit test of powerOfTenTruncated.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#powerOfTenTruncated(Number)
     */
    @Test
    public void testPowerOfTenTruncated() throws Exception {
        //positive powers
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(0));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(5));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(10));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(-59));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(1.198051056));
        Assert.assertEquals(3, NumberStringUtility.powerOfTenTruncated(1806.198051056));
        Assert.assertEquals(3, NumberStringUtility.powerOfTenTruncated(61324));
        Assert.assertEquals(6, NumberStringUtility.powerOfTenTruncated(5.64981345E8));
        Assert.assertEquals(12, NumberStringUtility.powerOfTenTruncated(-6.1245E12));
        Assert.assertEquals(57, NumberStringUtility.powerOfTenTruncated(9.9999999E59));
        Assert.assertEquals(102, NumberStringUtility.powerOfTenTruncated(-4.568974E102));
        Assert.assertEquals(306, NumberStringUtility.powerOfTenTruncated(7.4982114E307));
        
        //negative powers
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(.0));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(.1));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(.6));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(-.01));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(.03));
        Assert.assertEquals(-3, NumberStringUtility.powerOfTenTruncated(0.00481));
        Assert.assertEquals(-6, NumberStringUtility.powerOfTenTruncated(-4.5684E-6));
        Assert.assertEquals(-84, NumberStringUtility.powerOfTenTruncated(8.4512265E-84));
        Assert.assertEquals(-108, NumberStringUtility.powerOfTenTruncated(-1.0E-109));
        Assert.assertEquals(-324, NumberStringUtility.powerOfTenTruncated(6.5644114E-324));
        Assert.assertEquals(0, NumberStringUtility.powerOfTenTruncated(0.00000000000));
        
        //big decimal cases
        Assert.assertEquals(756,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-699,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal
        Assert.assertEquals(756,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(756,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-699,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal
        Assert.assertEquals(756,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(846056511,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E846056513")));
        Assert.assertEquals(-846056511,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E-846056513")));
        Assert.assertEquals(2147483646,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("1E2147483647")));
        Assert.assertEquals(-2147483646,
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("1E-2147483647")));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("1E2147483648")));
        TestUtils.assertException(NumberFormatException.class, "Scale out of range.", () ->
                NumberStringUtility.powerOfTenTruncated(new BigDecimal("1E-2147483648")));
    }
    
    /**
     * JUnit test of latinPower.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#latinPower(Number)
     */
    @Test
    public void testLatinPower() throws Exception {
        //positive powers
        Assert.assertEquals(0, NumberStringUtility.latinPower(0));
        Assert.assertEquals(0, NumberStringUtility.latinPower(5));
        Assert.assertEquals(0, NumberStringUtility.latinPower(10));
        Assert.assertEquals(0, NumberStringUtility.latinPower(-59));
        Assert.assertEquals(1, NumberStringUtility.latinPower(1806.198051056));
        Assert.assertEquals(1, NumberStringUtility.latinPower(61324));
        Assert.assertEquals(2, NumberStringUtility.latinPower(5.64981345E8));
        Assert.assertEquals(4, NumberStringUtility.latinPower(-6.1245E12));
        Assert.assertEquals(19, NumberStringUtility.latinPower(9.9999999E59));
        Assert.assertEquals(34, NumberStringUtility.latinPower(-4.568974E102));
        Assert.assertEquals(102, NumberStringUtility.latinPower(7.4982114E307));
        
        //negative powers
        Assert.assertEquals(0, NumberStringUtility.latinPower(.0));
        Assert.assertEquals(0, NumberStringUtility.latinPower(.1));
        Assert.assertEquals(0, NumberStringUtility.latinPower(.6));
        Assert.assertEquals(0, NumberStringUtility.latinPower(-.01));
        Assert.assertEquals(0, NumberStringUtility.latinPower(.03));
        Assert.assertEquals(-1, NumberStringUtility.latinPower(0.00481));
        Assert.assertEquals(-2, NumberStringUtility.latinPower(-4.5684E-6));
        Assert.assertEquals(-28, NumberStringUtility.latinPower(8.4512265E-84));
        Assert.assertEquals(-36, NumberStringUtility.latinPower(-1.0E-109));
        Assert.assertEquals(-108, NumberStringUtility.latinPower(6.5644114E-324));
        Assert.assertEquals(0, NumberStringUtility.latinPower(0.00000000000));
        
        //big decimal cases
        Assert.assertEquals(252,
                NumberStringUtility.latinPower(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-233,
                NumberStringUtility.latinPower(new BigDecimal
        Assert.assertEquals(252,
                NumberStringUtility.latinPower(new BigDecimal("59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(252,
                NumberStringUtility.latinPower(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")));
        Assert.assertEquals(-233,
                NumberStringUtility.latinPower(new BigDecimal
        Assert.assertEquals(252,
                NumberStringUtility.latinPower(new BigDecimal("-59679456897944368771988878286895821683669027953227258588290000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.54905498489156465409400000098975350919396824081730155066809488359596655700000000000000000000001")));
        Assert.assertEquals(282018837,
                NumberStringUtility.latinPower(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E846056513")));
        Assert.assertEquals(-282018837,
                NumberStringUtility.latinPower(new BigDecimal("-5.967945689794436877198887828689582168366902795322725858829E-846056513")));
        Assert.assertEquals(715827882,
                NumberStringUtility.latinPower(new BigDecimal("1E2147483647")));
        Assert.assertEquals(-715827882,
                NumberStringUtility.latinPower(new BigDecimal("1E-2147483647")));
        
        //overflow
        TestUtils.assertException(NumberFormatException.class, "Exponent overflow.", () ->
                NumberStringUtility.latinPower(new BigDecimal("1E2147483648")));
        TestUtils.assertException(NumberFormatException.class, "Scale out of range.", () ->
                NumberStringUtility.latinPower(new BigDecimal("1E-2147483648")));
    }
    
    /**
     * JUnit test of smallNumberName.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#smallNumberName(int)
     */
    @Test
    public void testSmallNumberName() throws Exception {
        //standard
        Assert.assertEquals("zero", NumberStringUtility.smallNumberName(0));
        Assert.assertEquals("one", NumberStringUtility.smallNumberName(1));
        Assert.assertEquals("eight", NumberStringUtility.smallNumberName(8));
        Assert.assertEquals("ten", NumberStringUtility.smallNumberName(10));
        Assert.assertEquals("eleven", NumberStringUtility.smallNumberName(11));
        Assert.assertEquals("seventeen", NumberStringUtility.smallNumberName(17));
        Assert.assertEquals("twenty", NumberStringUtility.smallNumberName(20));
        Assert.assertEquals("thirty seven", NumberStringUtility.smallNumberName(37));
        Assert.assertEquals("ninety nine", NumberStringUtility.smallNumberName(99));
        Assert.assertEquals("one hundred", NumberStringUtility.smallNumberName(100));
        Assert.assertEquals("one hundred one", NumberStringUtility.smallNumberName(101));
        Assert.assertEquals("one hundred ten", NumberStringUtility.smallNumberName(110));
        Assert.assertEquals("one hundred eleven", NumberStringUtility.smallNumberName(111));
        Assert.assertEquals("one hundred eighty eight", NumberStringUtility.smallNumberName(188));
        Assert.assertEquals("seven hundred thirty", NumberStringUtility.smallNumberName(730));
        Assert.assertEquals("nine hundred ninety nine", NumberStringUtility.smallNumberName(999));
        
        //invalid
        Assert.assertEquals("", NumberStringUtility.smallNumberName(1000));
        Assert.assertEquals("", NumberStringUtility.smallNumberName(5431));
        Assert.assertEquals("", NumberStringUtility.smallNumberName(-1));
        Assert.assertEquals("", NumberStringUtility.smallNumberName(-158));
        Assert.assertEquals("", NumberStringUtility.smallNumberName(-7541));
    }
    
    /**
     * JUnit test of powerOfTenName.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#powerOfTenName(long, boolean)
     * @see NumberStringUtility#powerOfTenName(long)
     */
    @Test
    public void testPowerOfTenName() throws Exception {
        //standard
        Assert.assertEquals("one", NumberStringUtility.powerOfTenName(0));
        Assert.assertEquals("ten", NumberStringUtility.powerOfTenName(1));
        Assert.assertEquals("hundred", NumberStringUtility.powerOfTenName(2));
        Assert.assertEquals("one thousand", NumberStringUtility.powerOfTenName(3));
        Assert.assertEquals("ten thousand", NumberStringUtility.powerOfTenName(4));
        Assert.assertEquals("hundred thousand", NumberStringUtility.powerOfTenName(5));
        Assert.assertEquals("one million", NumberStringUtility.powerOfTenName(6));
        Assert.assertEquals("ten million", NumberStringUtility.powerOfTenName(7));
        Assert.assertEquals("hundred million", NumberStringUtility.powerOfTenName(8));
        Assert.assertEquals("one billion", NumberStringUtility.powerOfTenName(9));
        Assert.assertEquals("ten billion", NumberStringUtility.powerOfTenName(10));
        Assert.assertEquals("hundred billion", NumberStringUtility.powerOfTenName(11));
        Assert.assertEquals("one trillion", NumberStringUtility.powerOfTenName(12));
        Assert.assertEquals("ten trillion", NumberStringUtility.powerOfTenName(13));
        Assert.assertEquals("hundred trillion", NumberStringUtility.powerOfTenName(14));
        Assert.assertEquals("one quadrillion", NumberStringUtility.powerOfTenName(15));
        Assert.assertEquals("ten quadrillion", NumberStringUtility.powerOfTenName(16));
        Assert.assertEquals("hundred quadrillion", NumberStringUtility.powerOfTenName(17));
        Assert.assertEquals("one quintillion", NumberStringUtility.powerOfTenName(18));
        Assert.assertEquals("ten quintillion", NumberStringUtility.powerOfTenName(19));
        Assert.assertEquals("hundred quintillion", NumberStringUtility.powerOfTenName(20));
        Assert.assertEquals("one sextillion", NumberStringUtility.powerOfTenName(21));
        Assert.assertEquals("ten sextillion", NumberStringUtility.powerOfTenName(22));
        Assert.assertEquals("hundred sextillion", NumberStringUtility.powerOfTenName(23));
        Assert.assertEquals("one septillion", NumberStringUtility.powerOfTenName(24));
        Assert.assertEquals("ten septillion", NumberStringUtility.powerOfTenName(25));
        Assert.assertEquals("hundred septillion", NumberStringUtility.powerOfTenName(26));
        Assert.assertEquals("one octillion", NumberStringUtility.powerOfTenName(27));
        Assert.assertEquals("ten octillion", NumberStringUtility.powerOfTenName(28));
        Assert.assertEquals("hundred octillion", NumberStringUtility.powerOfTenName(29));
        Assert.assertEquals("one nonillion", NumberStringUtility.powerOfTenName(30));
        Assert.assertEquals("ten nonillion", NumberStringUtility.powerOfTenName(31));
        Assert.assertEquals("hundred nonillion", NumberStringUtility.powerOfTenName(32));
        
        //no dashes
        Assert.assertEquals("one", NumberStringUtility.powerOfTenName(0, false));
        Assert.assertEquals("ten", NumberStringUtility.powerOfTenName(1, false));
        Assert.assertEquals("hundred", NumberStringUtility.powerOfTenName(2, false));
        Assert.assertEquals("one thousand", NumberStringUtility.powerOfTenName(3, false));
        Assert.assertEquals("ten thousand", NumberStringUtility.powerOfTenName(4, false));
        Assert.assertEquals("hundred thousand", NumberStringUtility.powerOfTenName(5, false));
        Assert.assertEquals("one million", NumberStringUtility.powerOfTenName(6, false));
        Assert.assertEquals("ten million", NumberStringUtility.powerOfTenName(7, false));
        Assert.assertEquals("hundred million", NumberStringUtility.powerOfTenName(8, false));
        Assert.assertEquals("one billion", NumberStringUtility.powerOfTenName(9, false));
        Assert.assertEquals("ten billion", NumberStringUtility.powerOfTenName(10, false));
        Assert.assertEquals("hundred billion", NumberStringUtility.powerOfTenName(11, false));
        
        //dashes
        Assert.assertEquals("one", NumberStringUtility.powerOfTenName(0, true));
        Assert.assertEquals("ten", NumberStringUtility.powerOfTenName(1, true));
        Assert.assertEquals("hundred", NumberStringUtility.powerOfTenName(2, true));
        Assert.assertEquals("one thousand", NumberStringUtility.powerOfTenName(3, true));
        Assert.assertEquals("ten thousand", NumberStringUtility.powerOfTenName(4, true));
        Assert.assertEquals("hundred thousand", NumberStringUtility.powerOfTenName(5, true));
        Assert.assertEquals("one mi-llion", NumberStringUtility.powerOfTenName(6, true));
        Assert.assertEquals("ten mi-llion", NumberStringUtility.powerOfTenName(7, true));
        Assert.assertEquals("hundred mi-llion", NumberStringUtility.powerOfTenName(8, true));
        Assert.assertEquals("one bi-llion", NumberStringUtility.powerOfTenName(9, true));
        Assert.assertEquals("ten bi-llion", NumberStringUtility.powerOfTenName(10, true));
        Assert.assertEquals("hundred bi-llion", NumberStringUtility.powerOfTenName(11, true));
        
        //larger cases
        Assert.assertEquals("one decillion", NumberStringUtility.powerOfTenName(33));
        Assert.assertEquals("one undecillion", NumberStringUtility.powerOfTenName(36));
        Assert.assertEquals("ten quattuordecillion", NumberStringUtility.powerOfTenName(46));
        Assert.assertEquals("one vigintillion", NumberStringUtility.powerOfTenName(63));
        Assert.assertEquals("hundred quinvigintillion", NumberStringUtility.powerOfTenName(80));
        Assert.assertEquals("ten tretrigintillion", NumberStringUtility.powerOfTenName(103));
        Assert.assertEquals("one novemtrigintillion", NumberStringUtility.powerOfTenName(120));
        Assert.assertEquals("hundred sexquadragintillion", NumberStringUtility.powerOfTenName(143));
        Assert.assertEquals("hundred septuagintillion", NumberStringUtility.powerOfTenName(215));
        Assert.assertEquals("one centillion", NumberStringUtility.powerOfTenName(303));
        Assert.assertEquals("one cenundecillion", NumberStringUtility.powerOfTenName(336));
        Assert.assertEquals("one cenquadragintillion", NumberStringUtility.powerOfTenName(423));
        Assert.assertEquals("ten duocentillion", NumberStringUtility.powerOfTenName(604));
        Assert.assertEquals("one sescentillion", NumberStringUtility.powerOfTenName(1803));
        Assert.assertEquals("ten nongentillion", NumberStringUtility.powerOfTenName(2704));
        Assert.assertEquals("ten octoviginmilliacennovemsexagintillion", NumberStringUtility.powerOfTenName(84511));
        Assert.assertEquals("hundred milliamillianongenseptenquadraginmilliaseptingentillion", NumberStringUtility.powerOfTenName(5843105));
        
        //fractional
        Assert.assertEquals("tenth", NumberStringUtility.powerOfTenName(-1));
        Assert.assertEquals("hundredth", NumberStringUtility.powerOfTenName(-2));
        Assert.assertEquals("one thousandth", NumberStringUtility.powerOfTenName(-3));
        Assert.assertEquals("ten thousandth", NumberStringUtility.powerOfTenName(-4));
        Assert.assertEquals("hundred thousandth", NumberStringUtility.powerOfTenName(-5));
        Assert.assertEquals("one millionth", NumberStringUtility.powerOfTenName(-6));
        Assert.assertEquals("ten millionth", NumberStringUtility.powerOfTenName(-7));
        Assert.assertEquals("hundred millionth", NumberStringUtility.powerOfTenName(-8));
        Assert.assertEquals("one billionth", NumberStringUtility.powerOfTenName(-9));
        Assert.assertEquals("ten billionth", NumberStringUtility.powerOfTenName(-10));
        Assert.assertEquals("hundred billionth", NumberStringUtility.powerOfTenName(-11));
        
        //larger fractional
        Assert.assertEquals("one decillionth", NumberStringUtility.powerOfTenName(-33));
        Assert.assertEquals("one undecillionth", NumberStringUtility.powerOfTenName(-36));
        Assert.assertEquals("ten quattuordecillionth", NumberStringUtility.powerOfTenName(-46));
        Assert.assertEquals("one vigintillionth", NumberStringUtility.powerOfTenName(-63));
        Assert.assertEquals("hundred quinvigintillionth", NumberStringUtility.powerOfTenName(-80));
        Assert.assertEquals("ten tretrigintillionth", NumberStringUtility.powerOfTenName(-103));
        Assert.assertEquals("one novemtrigintillionth", NumberStringUtility.powerOfTenName(-120));
        Assert.assertEquals("hundred sexquadragintillionth", NumberStringUtility.powerOfTenName(-143));
        Assert.assertEquals("hundred septuagintillionth", NumberStringUtility.powerOfTenName(-215));
        Assert.assertEquals("one centillionth", NumberStringUtility.powerOfTenName(-303));
        Assert.assertEquals("one cenundecillionth", NumberStringUtility.powerOfTenName(-336));
        Assert.assertEquals("one cenquadragintillionth", NumberStringUtility.powerOfTenName(-423));
        Assert.assertEquals("ten duocentillionth", NumberStringUtility.powerOfTenName(-604));
        Assert.assertEquals("one sescentillionth", NumberStringUtility.powerOfTenName(-1803));
        Assert.assertEquals("ten nongentillionth", NumberStringUtility.powerOfTenName(-2704));
        Assert.assertEquals("ten octoviginmilliacennovemsexagintillionth", NumberStringUtility.powerOfTenName(-84511));
        Assert.assertEquals("hundred milliamillianongenseptenquadraginmilliaseptingentillionth", NumberStringUtility.powerOfTenName(-5843105));
        
        //extremely large cases
        Assert.assertEquals("one quingenunoctoginmilliamilliasescensexquadraginmilliaunseptuagintillion",
                NumberStringUtility.powerOfTenName(1744938216));
        Assert.assertEquals("one quingenunoctoginmilliamilliasescensexquadraginmilliaunseptuagintillionth",
                NumberStringUtility.powerOfTenName(-1744938216));
        Assert.assertEquals("one octoviginmilliamilliamilliamilliaduocenoctodecmilliamilliamilliaduoseptuaginmilliamilliatrecenseptentriginmilliacenunoctogintillion",
                NumberStringUtility.powerOfTenName(84654217011546L));
        Assert.assertEquals("one octoviginmilliamilliamilliamilliaduocenoctodecmilliamilliamilliaduoseptuaginmilliamilliatrecenseptentriginmilliacenunoctogintillionth",
                NumberStringUtility.powerOfTenName(-84654217011546L));
        Assert.assertEquals("hundred milliamilliamilliamilliamilliamilliaquattuorviginmilliamilliamilliamilliamilliaoctingennovemdecmilliamilliamilliamilliacenquindecmilliamilliamilliaduocensexmilliamilliasexoctoginmilliacennovemnonagintillion",
                NumberStringUtility.powerOfTenName(3074457345618258602L));
        Assert.assertEquals("hundred milliamilliamilliamilliamilliamilliaquattuorviginmilliamilliamilliamilliamilliaoctingennovemdecmilliamilliamilliamilliacenquindecmilliamilliamilliaduocensexmilliamilliasexoctoginmilliacennovemnonagintillionth",
                NumberStringUtility.powerOfTenName(-3074457345618258602L));
        Assert.assertEquals("ten tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion",
                NumberStringUtility.powerOfTenName(9223372036854775807L));
        Assert.assertEquals("ten tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth",
                NumberStringUtility.powerOfTenName(-9223372036854775807L));
        
        //overflow
        TestUtils.assertException(ArrayIndexOutOfBoundsException.class, () ->
                NumberStringUtility.powerOfTenName(-9223372036854775808L));
        
        //dictionary test
        List<String> dictionary = Filesystem.readLines(new File(testResources, "latinPowers.txt"));
        for (int i = 0; i < dictionary.size(); i++) {
            Assert.assertEquals("one " + dictionary.get(i), NumberStringUtility.powerOfTenName(((i + 1) * 3L)));
            Assert.assertEquals("ten " + dictionary.get(i), NumberStringUtility.powerOfTenName(((i + 1) * 3L) + 1));
            Assert.assertEquals("hundred " + dictionary.get(i), NumberStringUtility.powerOfTenName(((i + 1) * 3L) + 2));
            Assert.assertEquals("one " + dictionary.get(i) + "th", NumberStringUtility.powerOfTenName(((i + 1) * -3L)));
            Assert.assertEquals("ten " + dictionary.get(i) + "th", NumberStringUtility.powerOfTenName(((i + 1) * -3L) - 1));
            Assert.assertEquals("hundred " + dictionary.get(i) + "th", NumberStringUtility.powerOfTenName(((i + 1) * -3L) - 2));
        }
    }
    
    /**
     * JUnit test of latinPowerName.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#latinPowerName(long, boolean)
     * @see NumberStringUtility#latinPowerName(long)
     */
    @Test
    public void testLatinPowerName() throws Exception {
        //standard
        Assert.assertEquals("", NumberStringUtility.latinPowerName(0));
        Assert.assertEquals("thousand", NumberStringUtility.latinPowerName(1));
        Assert.assertEquals("million", NumberStringUtility.latinPowerName(2));
        Assert.assertEquals("billion", NumberStringUtility.latinPowerName(3));
        Assert.assertEquals("trillion", NumberStringUtility.latinPowerName(4));
        Assert.assertEquals("quadrillion", NumberStringUtility.latinPowerName(5));
        Assert.assertEquals("quintillion", NumberStringUtility.latinPowerName(6));
        Assert.assertEquals("sextillion", NumberStringUtility.latinPowerName(7));
        Assert.assertEquals("septillion", NumberStringUtility.latinPowerName(8));
        Assert.assertEquals("octillion", NumberStringUtility.latinPowerName(9));
        Assert.assertEquals("nonillion", NumberStringUtility.latinPowerName(10));
        Assert.assertEquals("decillion", NumberStringUtility.latinPowerName(11));
        
        //no dashes
        Assert.assertEquals("", NumberStringUtility.latinPowerName(0, false));
        Assert.assertEquals("thousand", NumberStringUtility.latinPowerName(1, false));
        Assert.assertEquals("million", NumberStringUtility.latinPowerName(2, false));
        Assert.assertEquals("billion", NumberStringUtility.latinPowerName(3, false));
        Assert.assertEquals("trillion", NumberStringUtility.latinPowerName(4, false));
        Assert.assertEquals("quadrillion", NumberStringUtility.latinPowerName(5, false));
        Assert.assertEquals("quintillion", NumberStringUtility.latinPowerName(6, false));
        Assert.assertEquals("sextillion", NumberStringUtility.latinPowerName(7, false));
        Assert.assertEquals("septillion", NumberStringUtility.latinPowerName(8, false));
        Assert.assertEquals("octillion", NumberStringUtility.latinPowerName(9, false));
        Assert.assertEquals("nonillion", NumberStringUtility.latinPowerName(10, false));
        Assert.assertEquals("decillion", NumberStringUtility.latinPowerName(11, false));
        
        //dashes
        Assert.assertEquals("", NumberStringUtility.latinPowerName(0, true));
        Assert.assertEquals("thousand", NumberStringUtility.latinPowerName(1, true));
        Assert.assertEquals("mi-llion", NumberStringUtility.latinPowerName(2, true));
        Assert.assertEquals("bi-llion", NumberStringUtility.latinPowerName(3, true));
        Assert.assertEquals("tri-llion", NumberStringUtility.latinPowerName(4, true));
        Assert.assertEquals("quadri-llion", NumberStringUtility.latinPowerName(5, true));
        Assert.assertEquals("quinti-llion", NumberStringUtility.latinPowerName(6, true));
        Assert.assertEquals("sexti-llion", NumberStringUtility.latinPowerName(7, true));
        Assert.assertEquals("septi-llion", NumberStringUtility.latinPowerName(8, true));
        Assert.assertEquals("octi-llion", NumberStringUtility.latinPowerName(9, true));
        Assert.assertEquals("noni-llion", NumberStringUtility.latinPowerName(10, true));
        Assert.assertEquals("dec-illion", NumberStringUtility.latinPowerName(11, true));
        
        //larger cases
        Assert.assertEquals("quinquagintillion", NumberStringUtility.latinPowerName(51));
        Assert.assertEquals("quattuorquinquagintillion", NumberStringUtility.latinPowerName(55));
        Assert.assertEquals("centillion", NumberStringUtility.latinPowerName(101));
        Assert.assertEquals("cenduotillion", NumberStringUtility.latinPowerName(103));
        Assert.assertEquals("cenvigintillion", NumberStringUtility.latinPowerName(121));
        Assert.assertEquals("cenquattuorvigintillion", NumberStringUtility.latinPowerName(125));
        Assert.assertEquals("octingentreoctogintillion", NumberStringUtility.latinPowerName(884));
        Assert.assertEquals("milliasescenseptuagintillion", NumberStringUtility.latinPowerName(1671));
        Assert.assertEquals("novemmilliaquingensextrigintillion", NumberStringUtility.latinPowerName(9537));
        Assert.assertEquals("treviginmilliaseptingenoctoquadragintillion", NumberStringUtility.latinPowerName(23749));
        Assert.assertEquals("quingenquattuoroctoginmilliasescenduotrigintillion", NumberStringUtility.latinPowerName(584633));
        
        //fractional
        Assert.assertEquals("thousandth", NumberStringUtility.latinPowerName(-1));
        Assert.assertEquals("millionth", NumberStringUtility.latinPowerName(-2));
        Assert.assertEquals("billionth", NumberStringUtility.latinPowerName(-3));
        Assert.assertEquals("trillionth", NumberStringUtility.latinPowerName(-4));
        Assert.assertEquals("quadrillionth", NumberStringUtility.latinPowerName(-5));
        Assert.assertEquals("quintillionth", NumberStringUtility.latinPowerName(-6));
        Assert.assertEquals("sextillionth", NumberStringUtility.latinPowerName(-7));
        Assert.assertEquals("septillionth", NumberStringUtility.latinPowerName(-8));
        Assert.assertEquals("octillionth", NumberStringUtility.latinPowerName(-9));
        Assert.assertEquals("nonillionth", NumberStringUtility.latinPowerName(-10));
        
        //larger fractional
        Assert.assertEquals("quinquagintillionth", NumberStringUtility.latinPowerName(-51));
        Assert.assertEquals("quattuorquinquagintillionth", NumberStringUtility.latinPowerName(-55));
        Assert.assertEquals("centillionth", NumberStringUtility.latinPowerName(-101));
        Assert.assertEquals("cenduotillionth", NumberStringUtility.latinPowerName(-103));
        Assert.assertEquals("cenvigintillionth", NumberStringUtility.latinPowerName(-121));
        Assert.assertEquals("cenquattuorvigintillionth", NumberStringUtility.latinPowerName(-125));
        Assert.assertEquals("octingentreoctogintillionth", NumberStringUtility.latinPowerName(-884));
        Assert.assertEquals("milliasescenseptuagintillionth", NumberStringUtility.latinPowerName(-1671));
        Assert.assertEquals("novemmilliaquingensextrigintillionth", NumberStringUtility.latinPowerName(-9537));
        Assert.assertEquals("treviginmilliaseptingenoctoquadragintillionth", NumberStringUtility.latinPowerName(-23749));
        Assert.assertEquals("quingenquattuoroctoginmilliasescenduotrigintillionth", NumberStringUtility.latinPowerName(-584633));
        
        //extremely large cases
        Assert.assertEquals("milliamilliamilliaseptingenquattuorquadraginmilliamillianongenoctotriginmilliaduocenquindecillion",
                NumberStringUtility.latinPowerName(1744938216));
        Assert.assertEquals("milliamilliamilliaseptingenquattuorquadraginmilliamillianongenoctotriginmilliaduocenquindecillionth",
                NumberStringUtility.latinPowerName(-1744938216));
        Assert.assertEquals("quattuoroctoginmilliamilliamilliamilliasescenquattuorquinquaginmilliamilliamilliaduocenseptendecmilliamilliaundecmilliaquingenquinquadragintillion",
                NumberStringUtility.latinPowerName(84654217011546L));
        Assert.assertEquals("quattuoroctoginmilliamilliamilliamilliasescenquattuorquinquaginmilliamilliamilliaduocenseptendecmilliamilliaundecmilliaquingenquinquadragintillionth",
                NumberStringUtility.latinPowerName(-84654217011546L));
        Assert.assertEquals("tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion",
                NumberStringUtility.latinPowerName(3074457345618258602L));
        Assert.assertEquals("tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth",
                NumberStringUtility.latinPowerName(-3074457345618258602L));
        Assert.assertEquals("novemmilliamilliamilliamilliamilliamilliaduocentreviginmilliamilliamilliamilliamilliatrecenduoseptuaginmilliamilliamilliamilliasextriginmilliamilliamilliaoctingenquattuorquinquaginmilliamilliaseptingenquinseptuaginmilliaoctingensextillion",
                NumberStringUtility.latinPowerName(9223372036854775807L));
        Assert.assertEquals("novemmilliamilliamilliamilliamilliamilliaduocentreviginmilliamilliamilliamilliamilliatrecenduoseptuaginmilliamilliamilliamilliasextriginmilliamilliamilliaoctingenquattuorquinquaginmilliamilliaseptingenquinseptuaginmilliaoctingenseptentillionth",
                NumberStringUtility.latinPowerName(-9223372036854775808L));
        
        //dictionary test
        List<String> dictionary = Filesystem.readLines(new File(testResources, "latinPowers.txt"));
        for (int i = 0; i < dictionary.size(); i++) {
            Assert.assertEquals(dictionary.get(i), NumberStringUtility.latinPowerName((i + 1)));
            Assert.assertEquals(dictionary.get(i) + "th", NumberStringUtility.latinPowerName(-(i + 1)));
        }
    }
    
    /**
     * JUnit test of latinPowerNameToLatinPower.
     *
     * @throws Exception When there is an exception.
     * @see NumberStringUtility#latinPowerNameToLatinPower(String)
     */
    @Test
    public void testLatinPowerNameToLatinPower() throws Exception {
        //standard
        Assert.assertEquals(0L, NumberStringUtility.latinPowerNameToLatinPower(""));
        Assert.assertEquals(1L, NumberStringUtility.latinPowerNameToLatinPower("thousand"));
        Assert.assertEquals(2L, NumberStringUtility.latinPowerNameToLatinPower("million"));
        Assert.assertEquals(3L, NumberStringUtility.latinPowerNameToLatinPower("billion"));
        Assert.assertEquals(4L, NumberStringUtility.latinPowerNameToLatinPower("trillion"));
        Assert.assertEquals(5L, NumberStringUtility.latinPowerNameToLatinPower("quadrillion"));
        Assert.assertEquals(6L, NumberStringUtility.latinPowerNameToLatinPower("quintillion"));
        Assert.assertEquals(7L, NumberStringUtility.latinPowerNameToLatinPower("sextillion"));
        Assert.assertEquals(8L, NumberStringUtility.latinPowerNameToLatinPower("septillion"));
        Assert.assertEquals(9L, NumberStringUtility.latinPowerNameToLatinPower("octillion"));
        Assert.assertEquals(10L, NumberStringUtility.latinPowerNameToLatinPower("nonillion"));
        Assert.assertEquals(11L, NumberStringUtility.latinPowerNameToLatinPower("decillion"));
        
        //dashes
        Assert.assertEquals(0L, NumberStringUtility.latinPowerNameToLatinPower(""));
        Assert.assertEquals(1L, NumberStringUtility.latinPowerNameToLatinPower("thousand"));
        Assert.assertEquals(2L, NumberStringUtility.latinPowerNameToLatinPower("mi-llion"));
        Assert.assertEquals(3L, NumberStringUtility.latinPowerNameToLatinPower("bi-llion"));
        Assert.assertEquals(4L, NumberStringUtility.latinPowerNameToLatinPower("tri-llion"));
        Assert.assertEquals(5L, NumberStringUtility.latinPowerNameToLatinPower("quadri-llion"));
        Assert.assertEquals(6L, NumberStringUtility.latinPowerNameToLatinPower("quinti-llion"));
        Assert.assertEquals(7L, NumberStringUtility.latinPowerNameToLatinPower("sexti-llion"));
        Assert.assertEquals(8L, NumberStringUtility.latinPowerNameToLatinPower("septi-llion"));
        Assert.assertEquals(9L, NumberStringUtility.latinPowerNameToLatinPower("octi-llion"));
        Assert.assertEquals(10L, NumberStringUtility.latinPowerNameToLatinPower("noni-llion"));
        Assert.assertEquals(11L, NumberStringUtility.latinPowerNameToLatinPower("dec-illion"));
        
        //larger cases
        Assert.assertEquals(51L, NumberStringUtility.latinPowerNameToLatinPower("quinquagintillion"));
        Assert.assertEquals(55L, NumberStringUtility.latinPowerNameToLatinPower("quattuorquinquagintillion"));
        Assert.assertEquals(101L, NumberStringUtility.latinPowerNameToLatinPower("centillion"));
        Assert.assertEquals(103L, NumberStringUtility.latinPowerNameToLatinPower("cenduotillion"));
        Assert.assertEquals(121L, NumberStringUtility.latinPowerNameToLatinPower("cenvigintillion"));
        Assert.assertEquals(125L, NumberStringUtility.latinPowerNameToLatinPower("cenquattuorvigintillion"));
        Assert.assertEquals(884L, NumberStringUtility.latinPowerNameToLatinPower("octingentreoctogintillion"));
        Assert.assertEquals(1671L, NumberStringUtility.latinPowerNameToLatinPower("milliasescenseptuagintillion"));
        Assert.assertEquals(9537L, NumberStringUtility.latinPowerNameToLatinPower("novemmilliaquingensextrigintillion"));
        Assert.assertEquals(23749L, NumberStringUtility.latinPowerNameToLatinPower("treviginmilliaseptingenoctoquadragintillion"));
        Assert.assertEquals(584633L, NumberStringUtility.latinPowerNameToLatinPower("quingenquattuoroctoginmilliasescenduotrigintillion"));
        
        //fractional
        Assert.assertEquals(-1L, NumberStringUtility.latinPowerNameToLatinPower("thousandth"));
        Assert.assertEquals(-2L, NumberStringUtility.latinPowerNameToLatinPower("millionths"));
        Assert.assertEquals(-3L, NumberStringUtility.latinPowerNameToLatinPower("billionth"));
        Assert.assertEquals(-4L, NumberStringUtility.latinPowerNameToLatinPower("trillionths"));
        Assert.assertEquals(-5L, NumberStringUtility.latinPowerNameToLatinPower("quadrillionth"));
        Assert.assertEquals(-6L, NumberStringUtility.latinPowerNameToLatinPower("quintillionths"));
        Assert.assertEquals(-7L, NumberStringUtility.latinPowerNameToLatinPower("sextillionth"));
        Assert.assertEquals(-8L, NumberStringUtility.latinPowerNameToLatinPower("septillionths"));
        Assert.assertEquals(-9L, NumberStringUtility.latinPowerNameToLatinPower("octillionth"));
        Assert.assertEquals(-10L, NumberStringUtility.latinPowerNameToLatinPower("nonillionths"));
        
        //larger fractional
        Assert.assertEquals(-51L, NumberStringUtility.latinPowerNameToLatinPower("quinquagintillionth"));
        Assert.assertEquals(-55L, NumberStringUtility.latinPowerNameToLatinPower("quattuorquinquagintillionths"));
        Assert.assertEquals(-101L, NumberStringUtility.latinPowerNameToLatinPower("centillionth"));
        Assert.assertEquals(-103L, NumberStringUtility.latinPowerNameToLatinPower("cenduotillionths"));
        Assert.assertEquals(-121L, NumberStringUtility.latinPowerNameToLatinPower("cenvigintillionth"));
        Assert.assertEquals(-125L, NumberStringUtility.latinPowerNameToLatinPower("cenquattuorvigintillionths"));
        Assert.assertEquals(-884L, NumberStringUtility.latinPowerNameToLatinPower("octingentreoctogintillionth"));
        Assert.assertEquals(-1671L, NumberStringUtility.latinPowerNameToLatinPower("milliasescenseptuagintillionths"));
        Assert.assertEquals(-9537L, NumberStringUtility.latinPowerNameToLatinPower("novemmilliaquingensextrigintillionth"));
        Assert.assertEquals(-23749L, NumberStringUtility.latinPowerNameToLatinPower("treviginmilliaseptingenoctoquadragintillionths"));
        Assert.assertEquals(-584633L, NumberStringUtility.latinPowerNameToLatinPower("quingenquattuoroctoginmilliasescenduotrigintillionth"));
        
        //extremely large cases
        Assert.assertEquals(1744938216,
                NumberStringUtility.latinPowerNameToLatinPower("milliamilliamilliaseptingenquattuorquadraginmilliamillianongenoctotriginmilliaduocenquindecillion"));
        Assert.assertEquals(-1744938216,
                NumberStringUtility.latinPowerNameToLatinPower("milliamilliamilliaseptingenquattuorquadraginmilliamillianongenoctotriginmilliaduocenquindecillionth"));
        Assert.assertEquals(84654217011546L,
                NumberStringUtility.latinPowerNameToLatinPower("quattuoroctoginmilliamilliamilliamilliasescenquattuorquinquaginmilliamilliamilliaduocenseptendecmilliamilliaundecmilliaquingenquinquadragintillion"));
        Assert.assertEquals(-84654217011546L,
                NumberStringUtility.latinPowerNameToLatinPower("quattuoroctoginmilliamilliamilliamilliasescenquattuorquinquaginmilliamilliamilliaduocenseptendecmilliamilliaundecmilliaquingenquinquadragintillionth"));
        Assert.assertEquals(3074457345618258602L,
                NumberStringUtility.latinPowerNameToLatinPower("tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillion"));
        Assert.assertEquals(-3074457345618258602L,
                NumberStringUtility.latinPowerNameToLatinPower("tremilliamilliamilliamilliamilliamilliaquattuorseptuaginmilliamilliamilliamilliamilliaquadringenseptenquinquaginmilliamilliamilliamilliatrecenquinquadraginmilliamilliamilliasescenoctodecmilliamilliaduocenoctoquinquaginmilliasescenuntillionth"));
        Assert.assertEquals(9223372036854775807L,
                NumberStringUtility.latinPowerNameToLatinPower("novemmilliamilliamilliamilliamilliamilliaduocentreviginmilliamilliamilliamilliamilliatrecenduoseptuaginmilliamilliamilliamilliasextriginmilliamilliamilliaoctingenquattuorquinquaginmilliamilliaseptingenquinseptuaginmilliaoctingensextillion"));
        Assert.assertEquals(-9223372036854775808L,
                NumberStringUtility.latinPowerNameToLatinPower("novemmilliamilliamilliamilliamilliamilliaduocentreviginmilliamilliamilliamilliamilliatrecenduoseptuaginmilliamilliamilliamilliasextriginmilliamilliamilliaoctingenquattuorquinquaginmilliamilliaseptingenquinseptuaginmilliaoctingenseptentillionth"));
        
        //dictionary test
        List<String> dictionary = Filesystem.readLines(new File(testResources, "latinPowers.txt"));
        for (int i = 0; i < dictionary.size(); i++) {
            Assert.assertEquals((i + 1), NumberStringUtility.latinPowerNameToLatinPower(dictionary.get(i)));
            Assert.assertEquals(-(i + 1), NumberStringUtility.latinPowerNameToLatinPower(dictionary.get(i) + "th"));
        }
        
        //reversability test
        long[] rangeStart = new long[] {0L, 1001L, 1000001L, 1000000001L, 1000000000001L};
        long[] rangeEnd = new long[] {1000L, 1000000L, 1000000000L, 1000000000000L, 1000000000000001L};
        for (int i = 0; i < rangeStart.length; i++) {
            for (long j = rangeStart[i]; j <= rangeEnd[i]; j += MathUtility.dice((rangeEnd[i] - rangeStart[i]) / 250)) {
                for (long n = 1; n >= -1; n -= 2) {
                    Assert.assertEquals("Could not reverse " + NumberStringUtility.latinPowerName(j * n) + " (" + (j * n) + ")",
                            (j * n), NumberStringUtility.latinPowerNameToLatinPower(NumberStringUtility.latinPowerName(j * n)));
                }
            }
        }
        
        //improper names
        String[] invalidLatinPowerNames = new String[] {
                "trellion", "octollion", //wrong special prefix
                "quinquaginquattuortillion", "quinquaginquattuormilliatillion", "septencentillion", "septencenmilliatillion", "vigincentillion", "vigincenmilliatillion", "quattuorcenvigintillion", "quattuorcenviginmilliatillion", "quattuorvigincentillion", "quattuorvigincenmilliatillion", "vigincenquattuortillion", "vigincenquattuormilliatillion", "viginquattuorcentillion", "viginquattuorcenmilliatillion", //prefixes out of order 
                "tri", "quattuorquinquagin", "novemmilliaquingensextrigin", //missing suffix
                "biillion", "bitillion", "cenllion", "cenillion", "octingentreoctoginllion", "octingentreoctoginillion", "quingenquattuoroctoginmilliasescenduotriginllion", "quingenquattuoroctoginmilliasescenduotriginillion", //wrong suffix
                "milliaseptingenquattuorquadraginmilliamillianongenoctotriginmilliamilliamilliaduocenquindecillion", //millias out of order
        };
        for (final String invalidLatinPowerName : invalidLatinPowerNames) {
            TestUtils.assertException(NumberFormatException.class, "The string: '" + invalidLatinPowerName + "' does not represent a valid latin power name", () ->
                    NumberStringUtility.latinPowerNameToLatinPower(invalidLatinPowerName));
        }
        
        //invalid
        TestUtils.assertNoException(() ->
                Assert.assertEquals(125L, NumberStringUtility.latinPowerNameToLatinPower("cen-quattuor-vigin-tillion")));
        TestUtils.assertNoException(() ->
                Assert.assertEquals(125L, NumberStringUtility.latinPowerNameToLatinPower("cen quattuor vigin tillion")));
        TestUtils.assertException(NumberFormatException.class, "The string: 'three billion' does not represent a valid latin power name", () ->
                NumberStringUtility.latinPowerNameToLatinPower("three billion"));
        TestUtils.assertException(NumberFormatException.class, "The string: 'test' does not represent a valid latin power name", () ->
                NumberStringUtility.latinPowerNameToLatinPower("test"));
        TestUtils.assertException(NullPointerException.class, () ->
                NumberStringUtility.latinPowerNameToLatinPower(null));
    }
    
}
